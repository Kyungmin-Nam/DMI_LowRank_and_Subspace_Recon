function [methodinfo,structs,enuminfo,ThunkLibName]=loadkernel
%LOADKERNEL Create structures to define interfaces found in 'win'.

%This function was generated by loadlibrary.m parser version  on Thu Jun 29 11:41:03 2017
%perl options:'win.i -outfile=loadkernel.m -thunkfile=kernel32_thunk_pcwin64.c -header=win.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'kernel32_thunk_pcwin64');
% BOOL __stdcall GetBinaryTypeW ( LPCWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetBinaryTypeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetShortPathNameW ( LPCWSTR , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetShortPathNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% LPWSTR __stdcall GetEnvironmentStringsW ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetEnvironmentStringsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall FreeEnvironmentStringsW ( LPWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FreeEnvironmentStringsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall FormatMessageW ( DWORD , LPCVOID , DWORD , DWORD , LPWSTR , DWORD , va_list *); 
fcns.name{fcnNum}='FormatMessageW'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'voidPtr', 'ulong', 'ulong', 'uint16Ptr', 'ulong', 'cstringPtr'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateMailslotW ( LPCWSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateMailslotW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% int __stdcall lstrcmpW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcmpW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% int __stdcall lstrcmpiW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcmpiW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% LPWSTR __stdcall lstrcpynW ( LPWSTR , LPCWSTR , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='lstrcpynW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% LPWSTR __stdcall lstrcpyW ( LPWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcpyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% LPWSTR __stdcall lstrcatW ( LPWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcatW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% int __stdcall lstrlenW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='lstrlenW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateMutexW ( LPSECURITY_ATTRIBUTES , BOOL , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='CreateMutexW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenMutexW ( DWORD , BOOL , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenMutexW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateEventW ( LPSECURITY_ATTRIBUTES , BOOL , BOOL , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='CreateEventW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'int32', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenEventW ( DWORD , BOOL , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenEventW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateSemaphoreW ( LPSECURITY_ATTRIBUTES , LONG , LONG , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='CreateSemaphoreW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'long', 'long', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenSemaphoreW ( DWORD , BOOL , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenSemaphoreW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateFileMappingW ( HANDLE , LPSECURITY_ATTRIBUTES , DWORD , DWORD , DWORD , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateFileMappingW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'ulong', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenFileMappingW ( DWORD , BOOL , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenFileMappingW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetLogicalDriveStringsW ( DWORD , LPWSTR ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetLogicalDriveStringsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% HINSTANCE __stdcall LoadLibraryW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadLibraryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% HINSTANCE __stdcall LoadLibraryExW ( LPCWSTR , HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='LoadLibraryExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall GetModuleFileNameW ( HINSTANCE , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetModuleFileNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% HMODULE __stdcall GetModuleHandleW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetModuleHandleW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% void __stdcall FatalAppExitW ( UINT , LPCWSTR ); 
fcns.thunkname{fcnNum}='voiduint32voidPtrThunk';fcns.name{fcnNum}='FatalAppExitW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% LPWSTR __stdcall GetCommandLineW ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetCommandLineW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall GetEnvironmentVariableW ( LPCWSTR , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetEnvironmentVariableW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetEnvironmentVariableW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetEnvironmentVariableW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall ExpandEnvironmentStringsW ( LPCWSTR , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='ExpandEnvironmentStringsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% void __stdcall OutputDebugStringW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='OutputDebugStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% HRSRC __stdcall FindResourceW ( HINSTANCE , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FindResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HRSRC __stdcall FindResourceExW ( HINSTANCE , LPCWSTR , LPCWSTR , WORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='FindResourceExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumResourceTypesW ( HINSTANCE , ENUMRESTYPEPROC , LONG ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumResourceTypesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumResourceNamesW ( HINSTANCE , LPCWSTR , ENUMRESNAMEPROC , LONG ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumResourceNamesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumResourceLanguagesW ( HINSTANCE , LPCWSTR , LPCWSTR , ENUMRESLANGPROC , LONG ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumResourceLanguagesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% HANDLE __stdcall BeginUpdateResourceW ( LPCWSTR , BOOL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='BeginUpdateResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall UpdateResourceW ( HANDLE , LPCWSTR , LPCWSTR , WORD , LPVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint16voidPtrulongThunk';fcns.name{fcnNum}='UpdateResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EndUpdateResourceW ( HANDLE , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EndUpdateResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% ATOM __stdcall GlobalAddAtomW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='GlobalAddAtomW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% ATOM __stdcall GlobalFindAtomW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='GlobalFindAtomW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall GlobalGetAtomNameW ( ATOM , LPWSTR , int ); 
fcns.thunkname{fcnNum}='uint32uint16voidPtrint32Thunk';fcns.name{fcnNum}='GlobalGetAtomNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% ATOM __stdcall AddAtomW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='AddAtomW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% ATOM __stdcall FindAtomW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='FindAtomW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall GetAtomNameW ( ATOM , LPWSTR , int ); 
fcns.thunkname{fcnNum}='uint32uint16voidPtrint32Thunk';fcns.name{fcnNum}='GetAtomNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall GetProfileIntW ( LPCWSTR , LPCWSTR , INT ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetProfileIntW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetProfileStringW ( LPCWSTR , LPCWSTR , LPCWSTR , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetProfileStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteProfileStringW ( LPCWSTR , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteProfileStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetProfileSectionW ( LPCWSTR , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetProfileSectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteProfileSectionW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteProfileSectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall GetPrivateProfileIntW ( LPCWSTR , LPCWSTR , INT , LPCWSTR ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileIntW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetPrivateProfileStringW ( LPCWSTR , LPCWSTR , LPCWSTR , LPWSTR , DWORD , LPCWSTR ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall WritePrivateProfileStringW ( LPCWSTR , LPCWSTR , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WritePrivateProfileStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetPrivateProfileSectionW ( LPCWSTR , LPWSTR , DWORD , LPCWSTR ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileSectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetPrivateProfileSectionNamesA ( LPSTR , DWORD , LPCSTR ); 
fcns.thunkname{fcnNum}='ulongcstringulongcstringThunk';fcns.name{fcnNum}='GetPrivateProfileSectionNamesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall GetPrivateProfileSectionNamesW ( LPWSTR , DWORD , LPCWSTR ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileSectionNamesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall WritePrivateProfileSectionW ( LPCWSTR , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WritePrivateProfileSectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall GetDriveTypeW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDriveTypeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall GetSystemDirectoryW ( LPWSTR , UINT ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='GetSystemDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetTempPathW ( DWORD , LPWSTR ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetTempPathW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall GetTempFileNameW ( LPCWSTR , LPCWSTR , UINT , LPWSTR ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetTempFileNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall GetWindowsDirectoryW ( LPWSTR , UINT ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='GetWindowsDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetCurrentDirectoryW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetCurrentDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetCurrentDirectoryW ( DWORD , LPWSTR ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetCurrentDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetDiskFreeSpaceW ( LPCWSTR , LPDWORD , LPDWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDiskFreeSpaceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall CreateDirectoryW ( LPCWSTR , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CreateDirectoryExW ( LPCWSTR , LPCWSTR , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateDirectoryExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall RemoveDirectoryW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='RemoveDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetFullPathNameW ( LPCWSTR , DWORD , LPWSTR , LPWSTR *); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFullPathNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'uint16Ptr', 'uint16PtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DefineDosDeviceW ( DWORD , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DefineDosDeviceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall QueryDosDeviceW ( LPCWSTR , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='QueryDosDeviceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateFileW ( LPCWSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES , DWORD , DWORD , HANDLE ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetFileAttributesW ( LPCWSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetFileAttributesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall GetFileAttributesW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetFileAttributesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetCompressedFileSizeW ( LPCWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCompressedFileSizeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall DeleteFileW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeleteFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall SearchPathW ( LPCWSTR , LPCWSTR , LPCWSTR , DWORD , LPWSTR , LPWSTR *); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SearchPathW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'ulong', 'uint16Ptr', 'uint16PtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CopyFileW ( LPCWSTR , LPCWSTR , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CopyFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall MoveFileW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MoveFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall MoveFileExW ( LPCWSTR , LPCWSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='MoveFileExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateNamedPipeW ( LPCWSTR , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateNamedPipeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetNamedPipeHandleStateW ( HANDLE , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetNamedPipeHandleStateW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall CallNamedPipeW ( LPCWSTR , LPVOID , DWORD , LPVOID , DWORD , LPDWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrulongvoidPtrulongThunk';fcns.name{fcnNum}='CallNamedPipeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 'ulong', 'voidPtr', 'ulong', 'uint32Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall WaitNamedPipeW ( LPCWSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='WaitNamedPipeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetVolumeLabelW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetVolumeLabelW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetVolumeInformationW ( LPCWSTR , LPWSTR , DWORD , LPDWORD , LPDWORD , LPDWORD , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetVolumeInformationW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall ClearEventLogW ( HANDLE , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ClearEventLogW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall BackupEventLogW ( HANDLE , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='BackupEventLogW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenEventLogW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='OpenEventLogW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall RegisterEventSourceW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegisterEventSourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenBackupEventLogW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='OpenBackupEventLogW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadEventLogW ( HANDLE , DWORD , DWORD , LPVOID , DWORD , DWORD *, DWORD *); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ReadEventLogW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'voidPtr', 'ulong', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReportEventW ( HANDLE , WORD , WORD , DWORD , PSID , WORD , DWORD , LPCWSTR *, LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16ulongvoidPtruint16ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ReportEventW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'ulong', 's_SIDPtr', 'uint16', 'ulong', 'uint16PtrPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AccessCheckAndAuditAlarmW ( LPCWSTR , LPVOID HandleId , LPWSTR , LPWSTR , PSECURITY_DESCRIPTOR , DWORD , PGENERIC_MAPPING , BOOL , LPDWORD , LPBOOL , LPBOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrulongvoidPtrint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AccessCheckAndAuditAlarmW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 'uint16Ptr', 'uint16Ptr', 's_SECURITY_DESCRIPTORPtr', 'ulong', 's_GENERIC_MAPPINGPtr', 'int32', 'uint32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ObjectOpenAuditAlarmW ( LPCWSTR , LPVOID , LPWSTR , LPWSTR , PSECURITY_DESCRIPTOR , HANDLE , DWORD , DWORD , PPRIVILEGE_SET , BOOL , BOOL , LPBOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrulongulongvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='ObjectOpenAuditAlarmW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 'uint16Ptr', 'uint16Ptr', 's_SECURITY_DESCRIPTORPtr', 'voidPtr', 'ulong', 'ulong', 's_PRIVILEGE_SETPtr', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ObjectPrivilegeAuditAlarmW ( LPCWSTR , LPVOID , HANDLE , DWORD , PPRIVILEGE_SET , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrulongvoidPtrint32Thunk';fcns.name{fcnNum}='ObjectPrivilegeAuditAlarmW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 'voidPtr', 'ulong', 's_PRIVILEGE_SETPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ObjectCloseAuditAlarmW ( LPCWSTR , LPVOID , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ObjectCloseAuditAlarmW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall PrivilegedServiceAuditAlarmW ( LPCWSTR , LPCWSTR , HANDLE , PPRIVILEGE_SET , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PrivilegedServiceAuditAlarmW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'voidPtr', 's_PRIVILEGE_SETPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetFileSecurityW ( LPCWSTR , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='SetFileSecurityW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 's_SECURITY_DESCRIPTORPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetFileSecurityW ( LPCWSTR , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetFileSecurityW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 's_SECURITY_DESCRIPTORPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall FindFirstChangeNotificationW ( LPCWSTR , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32ulongThunk';fcns.name{fcnNum}='FindFirstChangeNotificationW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall IsBadStringPtrW ( LPCWSTR , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='IsBadStringPtrW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall LookupAccountSidW ( LPCWSTR , PSID , LPWSTR , LPDWORD , LPWSTR , LPDWORD , PSID_NAME_USE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LookupAccountSidW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 's_SIDPtr', 'uint16Ptr', 'uint32Ptr', 'uint16Ptr', 'uint32Ptr', 'e_SID_NAME_USEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall LookupAccountNameW ( LPCWSTR , LPCWSTR , PSID , LPDWORD , LPWSTR , LPDWORD , PSID_NAME_USE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LookupAccountNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 's_SIDPtr', 'uint32Ptr', 'uint16Ptr', 'uint32Ptr', 'e_SID_NAME_USEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall LookupPrivilegeValueW ( LPCWSTR , LPCWSTR , PLUID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LookupPrivilegeValueW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall LookupPrivilegeNameW ( LPCWSTR , PLUID , LPWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LookupPrivilegeNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall LookupPrivilegeDisplayNameW ( LPCWSTR , LPCWSTR , LPWSTR , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LookupPrivilegeDisplayNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall BuildCommDCBW ( LPCWSTR , LPDCB ); 
fcns.thunkname{fcnNum}='int32voidPtrLPDCBThunk';fcns.name{fcnNum}='BuildCommDCBW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'error'};fcnNum=fcnNum+1;
% BOOL __stdcall BuildCommDCBAndTimeoutsW ( LPCWSTR , LPDCB , LPCOMMTIMEOUTS ); 
fcns.thunkname{fcnNum}='int32voidPtrLPDCBvoidPtrThunk';fcns.name{fcnNum}='BuildCommDCBAndTimeoutsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'error', 's_COMMTIMEOUTSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CommConfigDialogW ( LPCWSTR , HWND , LPCOMMCONFIG ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CommConfigDialogW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 's_COMM_CONFIGPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetDefaultCommConfigW ( LPCWSTR , LPCOMMCONFIG , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDefaultCommConfigW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 's_COMM_CONFIGPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetDefaultCommConfigW ( LPCWSTR , LPCOMMCONFIG , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='SetDefaultCommConfigW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 's_COMM_CONFIGPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetComputerNameW ( LPWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetComputerNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetComputerNameW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetComputerNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetUserNameW ( LPWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetUserNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall wvsprintfW ( LPWSTR , LPCWSTR , va_list arglist ); 
fcns.name{fcnNum}='wvsprintfW'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'cstring'};fcnNum=fcnNum+1;
% int wsprintfW ( LPWSTR , LPCWSTR ,...); 
fcns.name{fcnNum}='wsprintfW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'error'};fcnNum=fcnNum+1;
% HKL __stdcall LoadKeyboardLayoutW ( LPCWSTR , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='LoadKeyboardLayoutW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetKeyboardLayoutNameW ( LPWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetKeyboardLayoutNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% HDESK __stdcall CreateDesktopW ( LPWSTR , LPWSTR , LPDEVMODE , DWORD , DWORD , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateDesktopW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 's_devicemodePtr', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% HDESK __stdcall OpenDesktopW ( LPWSTR , DWORD , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongint32ulongThunk';fcns.name{fcnNum}='OpenDesktopW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumDesktopsW ( HWINSTA , DESKTOPENUMPROCA , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumDesktopsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% HWINSTA __stdcall CreateWindowStationW ( LPWSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateWindowStationW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% HWINSTA __stdcall OpenWindowStationW ( LPWSTR , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32ulongThunk';fcns.name{fcnNum}='OpenWindowStationW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumWindowStationsW ( ENUMWINDOWSTATIONPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrlongThunk';fcns.name{fcnNum}='EnumWindowStationsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall GetUserObjectInformationW ( HANDLE , int , PVOID , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetUserObjectInformationW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetUserObjectInformationW ( HANDLE , int , PVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrulongThunk';fcns.name{fcnNum}='SetUserObjectInformationW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% UINT __stdcall RegisterWindowMessageW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='RegisterWindowMessageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetMessageW ( LPMSG , HWND , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='GetMessageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagMSGPtr', 'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% LONG __stdcall DispatchMessageW ( const MSG *); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DispatchMessageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'tagMSGPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PeekMessageW ( LPMSG , HWND , UINT , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='PeekMessageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagMSGPtr', 'voidPtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% LRESULT __stdcall SendMessageW ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtruint32uint32longThunk';fcns.name{fcnNum}='SendMessageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% LRESULT __stdcall SendMessageTimeoutW ( HWND , UINT , WPARAM , LPARAM , UINT , UINT , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtruint32uint32longuint32uint32voidPtrThunk';fcns.name{fcnNum}='SendMessageTimeoutW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long', 'uint32', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SendNotifyMessageW ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32longThunk';fcns.name{fcnNum}='SendNotifyMessageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall SendMessageCallbackW ( HWND , UINT , WPARAM , LPARAM , SENDASYNCPROC , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32longvoidPtrulongThunk';fcns.name{fcnNum}='SendMessageCallbackW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long', 'FcnPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall PostMessageW ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32longThunk';fcns.name{fcnNum}='PostMessageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall PostThreadMessageW ( DWORD , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='int32ulonguint32uint32longThunk';fcns.name{fcnNum}='PostThreadMessageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% LRESULT __stdcall DefWindowProcW ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtruint32uint32longThunk';fcns.name{fcnNum}='DefWindowProcW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% LRESULT __stdcall CallWindowProcW ( WNDPROC , HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtruint32uint32longThunk';fcns.name{fcnNum}='CallWindowProcW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'FcnPtr', 'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% ATOM __stdcall RegisterClassW ( const WNDCLASS *); 
fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='RegisterClassW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'s_WNDCLASSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall UnregisterClassW ( LPCWSTR , HINSTANCE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='UnregisterClassW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetClassInfoW ( HINSTANCE , LPCWSTR , LPWNDCLASS ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetClassInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 's_WNDCLASSPtr'};fcnNum=fcnNum+1;
% ATOM __stdcall RegisterClassExW ( const WNDCLASSEX *); 
fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='RegisterClassExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'s_WNDCLASSEXPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetClassInfoExW ( HINSTANCE , LPCWSTR , LPWNDCLASSEX ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetClassInfoExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 's_WNDCLASSEXPtr'};fcnNum=fcnNum+1;
% HWND __stdcall CreateWindowExW ( DWORD , LPCWSTR , LPCWSTR , DWORD , int , int , int , int , HWND , HMENU , HINSTANCE , LPVOID ); 
fcns.thunkname{fcnNum}='voidPtrulongvoidPtrvoidPtrulongint32int32int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateWindowExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'uint16Ptr', 'ulong', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% HWND __stdcall CreateDialogParamW ( HINSTANCE , LPCWSTR , HWND , DLGPROC , LPARAM ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='CreateDialogParamW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% HWND __stdcall CreateDialogIndirectParamW ( HINSTANCE , LPCDLGTEMPLATE , HWND , DLGPROC , LPARAM ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='CreateDialogIndirectParamW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'DLGTEMPLATEPtr', 'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% int __stdcall DialogBoxParamW ( HINSTANCE , LPCWSTR , HWND , DLGPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='DialogBoxParamW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% int __stdcall DialogBoxIndirectParamW ( HINSTANCE , LPCDLGTEMPLATE , HWND , DLGPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='DialogBoxIndirectParamW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'DLGTEMPLATEPtr', 'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall SetDlgItemTextW ( HWND , int , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='SetDlgItemTextW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall GetDlgItemTextW ( HWND , int , LPWSTR , int ); 
fcns.thunkname{fcnNum}='uint32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='GetDlgItemTextW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% LONG __stdcall SendDlgItemMessageW ( HWND , int , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtrint32uint32uint32longThunk';fcns.name{fcnNum}='SendDlgItemMessageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% LRESULT __stdcall DefDlgProcW ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtruint32uint32longThunk';fcns.name{fcnNum}='DefDlgProcW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall CallMsgFilterW ( LPMSG , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CallMsgFilterW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagMSGPtr', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall RegisterClipboardFormatW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='RegisterClipboardFormatW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% int __stdcall GetClipboardFormatNameW ( UINT , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32uint32voidPtrint32Thunk';fcns.name{fcnNum}='GetClipboardFormatNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall CharToOemW ( LPCWSTR , LPSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='CharToOemW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall OemToCharW ( LPCSTR , LPWSTR ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='OemToCharW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall CharToOemBuffW ( LPCWSTR , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringulongThunk';fcns.name{fcnNum}='CharToOemBuffW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall OemToCharBuffW ( LPCSTR , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrulongThunk';fcns.name{fcnNum}='OemToCharBuffW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% LPWSTR __stdcall CharUpperW ( LPWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CharUpperW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall CharUpperBuffW ( LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='CharUpperBuffW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% LPWSTR __stdcall CharLowerW ( LPWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CharLowerW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall CharLowerBuffW ( LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='CharLowerBuffW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% LPWSTR __stdcall CharNextW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CharNextW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% LPWSTR __stdcall CharPrevW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CharPrevW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsCharAlphaW ( WCHAR ); 
fcns.thunkname{fcnNum}='int32uint16Thunk';fcns.name{fcnNum}='IsCharAlphaW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% BOOL __stdcall IsCharAlphaNumericW ( WCHAR ); 
fcns.thunkname{fcnNum}='int32uint16Thunk';fcns.name{fcnNum}='IsCharAlphaNumericW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% BOOL __stdcall IsCharUpperW ( WCHAR ); 
fcns.thunkname{fcnNum}='int32uint16Thunk';fcns.name{fcnNum}='IsCharUpperW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% BOOL __stdcall IsCharLowerW ( WCHAR ); 
fcns.thunkname{fcnNum}='int32uint16Thunk';fcns.name{fcnNum}='IsCharLowerW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% int __stdcall GetKeyNameTextW ( LONG , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32longvoidPtrint32Thunk';fcns.name{fcnNum}='GetKeyNameTextW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% SHORT __stdcall VkKeyScanW ( WCHAR ); 
fcns.thunkname{fcnNum}='int16uint16Thunk';fcns.name{fcnNum}='VkKeyScanW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% SHORT __stdcall VkKeyScanExW ( WCHAR , HKL ); 
fcns.thunkname{fcnNum}='int16uint16voidPtrThunk';fcns.name{fcnNum}='VkKeyScanExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'uint16', 'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall MapVirtualKeyW ( UINT , UINT ); 
fcns.thunkname{fcnNum}='uint32uint32uint32Thunk';fcns.name{fcnNum}='MapVirtualKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% UINT __stdcall MapVirtualKeyExW ( UINT , UINT , HKL ); 
fcns.thunkname{fcnNum}='uint32uint32uint32voidPtrThunk';fcns.name{fcnNum}='MapVirtualKeyExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% HACCEL __stdcall LoadAcceleratorsW ( HINSTANCE , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadAcceleratorsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HACCEL __stdcall CreateAcceleratorTableW ( LPACCEL , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CreateAcceleratorTableW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagACCELPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall CopyAcceleratorTableW ( HACCEL , LPACCEL , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CopyAcceleratorTableW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagACCELPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall TranslateAcceleratorW ( HWND , HACCEL , LPMSG ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='TranslateAcceleratorW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'tagMSGPtr'};fcnNum=fcnNum+1;
% HMENU __stdcall LoadMenuW ( HINSTANCE , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadMenuW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HMENU __stdcall LoadMenuIndirectW ( const MENUTEMPLATE *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadMenuIndirectW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ChangeMenuW ( HMENU , UINT , LPCWSTR , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtruint32uint32Thunk';fcns.name{fcnNum}='ChangeMenuW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint16Ptr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall GetMenuStringW ( HMENU , UINT , LPWSTR , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrint32uint32Thunk';fcns.name{fcnNum}='GetMenuStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint16Ptr', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall InsertMenuW ( HMENU , UINT , UINT , UINT , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32uint32voidPtrThunk';fcns.name{fcnNum}='InsertMenuW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall AppendMenuW ( HMENU , UINT , UINT , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='AppendMenuW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ModifyMenuW ( HMENU , UINT , UINT , UINT , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32uint32voidPtrThunk';fcns.name{fcnNum}='ModifyMenuW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall InsertMenuItemW ( HMENU , UINT , BOOL , LPCMENUITEMINFO ); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32voidPtrThunk';fcns.name{fcnNum}='InsertMenuItemW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'int32', 'tagMENUITEMINFOPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetMenuItemInfoW ( HMENU , UINT , BOOL , LPMENUITEMINFO ); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32voidPtrThunk';fcns.name{fcnNum}='GetMenuItemInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'int32', 'tagMENUITEMINFOPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetMenuItemInfoW ( HMENU , UINT , BOOL , LPCMENUITEMINFO ); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32voidPtrThunk';fcns.name{fcnNum}='SetMenuItemInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'int32', 'tagMENUITEMINFOPtr'};fcnNum=fcnNum+1;
% int __stdcall DrawTextW ( HDC , LPCWSTR , int , LPRECT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtruint32Thunk';fcns.name{fcnNum}='DrawTextW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 's_RECTPtr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall DrawTextExW ( HDC , LPWSTR , int , LPRECT , UINT , LPDRAWTEXTPARAMS ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='DrawTextExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 's_RECTPtr', 'uint32', 'DRAWTEXTPARAMSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GrayStringW ( HDC , HBRUSH , GRAYSTRINGPROC , LPARAM , int , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongint32int32int32int32int32Thunk';fcns.name{fcnNum}='GrayStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'FcnPtr', 'long', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall DrawStateW ( HDC , HBRUSH , DRAWSTATEPROC , LPARAM , WPARAM , int , int , int , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlonguint32int32int32int32int32uint32Thunk';fcns.name{fcnNum}='DrawStateW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'FcnPtr', 'long', 'uint32', 'int32', 'int32', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% LONG __stdcall TabbedTextOutW ( HDC , int , int , LPCWSTR , int , int , LPINT , int ); 
fcns.thunkname{fcnNum}='longvoidPtrint32int32voidPtrint32int32voidPtrint32Thunk';fcns.name{fcnNum}='TabbedTextOutW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'uint16Ptr', 'int32', 'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetTabbedTextExtentW ( HDC , LPCWSTR , int , int , LPINT ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='GetTabbedTextExtentW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetPropW ( HWND , LPCWSTR , HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SetPropW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% HANDLE __stdcall GetPropW ( HWND , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetPropW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall RemovePropW ( HWND , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RemovePropW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% int __stdcall EnumPropsExW ( HWND , PROPENUMPROCEX , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumPropsExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% int __stdcall EnumPropsW ( HWND , PROPENUMPROC ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EnumPropsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetWindowTextW ( HWND , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetWindowTextW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% int __stdcall GetWindowTextW ( HWND , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetWindowTextW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetWindowTextLengthW ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetWindowTextLengthW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall MessageBoxW ( HWND , LPCWSTR , LPCWSTR , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='MessageBoxW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall MessageBoxExW ( HWND , LPCWSTR , LPCWSTR , UINT , WORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32uint16Thunk';fcns.name{fcnNum}='MessageBoxExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint32', 'uint16'};fcnNum=fcnNum+1;
% int __stdcall MessageBoxIndirectW ( LPMSGBOXPARAMS ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MessageBoxIndirectW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MSGBOXPARAMSPtr'};fcnNum=fcnNum+1;
% LONG __stdcall GetWindowLongW ( HWND , int ); 
fcns.thunkname{fcnNum}='longvoidPtrint32Thunk';fcns.name{fcnNum}='GetWindowLongW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% LONG __stdcall SetWindowLongW ( HWND , int , LONG ); 
fcns.thunkname{fcnNum}='longvoidPtrint32longThunk';fcns.name{fcnNum}='SetWindowLongW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'long'};fcnNum=fcnNum+1;
% DWORD __stdcall GetClassLongW ( HWND , int ); 
fcns.thunkname{fcnNum}='ulongvoidPtrint32Thunk';fcns.name{fcnNum}='GetClassLongW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall SetClassLongW ( HWND , int , LONG ); 
fcns.thunkname{fcnNum}='ulongvoidPtrint32longThunk';fcns.name{fcnNum}='SetClassLongW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'long'};fcnNum=fcnNum+1;
% HWND __stdcall FindWindowW ( LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FindWindowW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HWND __stdcall FindWindowExW ( HWND , HWND , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FindWindowExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% int __stdcall GetClassNameW ( HWND , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetClassNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% HHOOK __stdcall SetWindowsHookExW ( int , HOOKPROC , HINSTANCE , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrint32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='SetWindowsHookExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'FcnPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% HBITMAP __stdcall LoadBitmapW ( HINSTANCE , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadBitmapW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HCURSOR __stdcall LoadCursorW ( HINSTANCE , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadCursorW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HCURSOR __stdcall LoadCursorFromFileW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadCursorFromFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% HICON __stdcall LoadIconW ( HINSTANCE , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadIconW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall LoadImageW ( HINSTANCE , LPCWSTR , UINT , int , int , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtruint32int32int32uint32Thunk';fcns.name{fcnNum}='LoadImageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall LoadStringW ( HINSTANCE , UINT , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrint32Thunk';fcns.name{fcnNum}='LoadStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsDialogMessageW ( HWND , LPMSG ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='IsDialogMessageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagMSGPtr'};fcnNum=fcnNum+1;
% int __stdcall DlgDirListW ( HWND , LPWSTR , int , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32uint32Thunk';fcns.name{fcnNum}='DlgDirListW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DlgDirSelectExW ( HWND , LPWSTR , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='DlgDirSelectExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int __stdcall DlgDirListComboBoxW ( HWND , LPWSTR , int , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32uint32Thunk';fcns.name{fcnNum}='DlgDirListComboBoxW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DlgDirSelectComboBoxExW ( HWND , LPWSTR , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='DlgDirSelectComboBoxExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% LRESULT __stdcall DefFrameProcW ( HWND , HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtruint32uint32longThunk';fcns.name{fcnNum}='DefFrameProcW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% LRESULT __stdcall DefMDIChildProcW ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtruint32uint32longThunk';fcns.name{fcnNum}='DefMDIChildProcW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% HWND __stdcall CreateMDIWindowW ( LPWSTR , LPWSTR , DWORD , int , int , int , int , HWND , HINSTANCE , LPARAM ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongint32int32int32int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='CreateMDIWindowW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall WinHelpW ( HWND , LPCWSTR , UINT , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32ulongThunk';fcns.name{fcnNum}='WinHelpW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32', 'ulong'};fcnNum=fcnNum+1;
% LONG __stdcall ChangeDisplaySettingsW ( LPDEVMODE , DWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrulongThunk';fcns.name{fcnNum}='ChangeDisplaySettingsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'s_devicemodePtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumDisplaySettingsW ( LPCWSTR , DWORD , LPDEVMODE ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='EnumDisplaySettingsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 's_devicemodePtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SystemParametersInfoW ( UINT , UINT , PVOID , UINT ); 
fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='SystemParametersInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall AddFontResourceW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='AddFontResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% HMETAFILE __stdcall CopyMetaFileW ( HMETAFILE , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CopyMetaFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HFONT __stdcall CreateFontIndirectW ( const LOGFONT *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateFontIndirectW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagLOGFONTPtr'};fcnNum=fcnNum+1;
% HFONT __stdcall CreateFontW ( int , int , int , int , int , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrint32int32int32int32int32ulongulongulongulongulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateFontW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% HDC __stdcall CreateICW ( LPCWSTR , LPCWSTR , LPCWSTR , const DEVMODE *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateICW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 's_devicemodePtr'};fcnNum=fcnNum+1;
% HDC __stdcall CreateMetaFileW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateMetaFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall CreateScalableFontResourceW ( DWORD , LPCWSTR , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateScalableFontResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% int __stdcall DeviceCapabilitiesW ( LPCWSTR , LPCWSTR , WORD , LPWSTR , const DEVMODE *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='DeviceCapabilitiesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16', 'uint16Ptr', 's_devicemodePtr'};fcnNum=fcnNum+1;
% int __stdcall EnumFontFamiliesExW ( HDC , LPLOGFONT , FONTENUMEXPROC , LPARAM , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongulongThunk';fcns.name{fcnNum}='EnumFontFamiliesExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagLOGFONTPtr', 'FcnPtr', 'long', 'ulong'};fcnNum=fcnNum+1;
% int __stdcall EnumFontFamiliesW ( HDC , LPCWSTR , FONTENUMPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumFontFamiliesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% int __stdcall EnumFontsW ( HDC , LPCWSTR , ENUMFONTSPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumFontsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCharWidthW ( HDC , UINT , UINT , LPINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetCharWidthW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCharWidth32W ( HDC , UINT , UINT , LPINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetCharWidth32W'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCharWidthFloatW ( HDC , UINT , UINT , PFLOAT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetCharWidthFloatW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'singlePtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCharABCWidthsW ( HDC , UINT , UINT , LPABC ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetCharABCWidthsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 's_ABCPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCharABCWidthsFloatW ( HDC , UINT , UINT , LPABCFLOAT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetCharABCWidthsFloatW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 's_ABCFLOATPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetGlyphOutlineW ( HDC , UINT , UINT , LPGLYPHMETRICS , DWORD , LPVOID , const MAT2 *); 
fcns.thunkname{fcnNum}='ulongvoidPtruint32uint32voidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetGlyphOutlineW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 's_GLYPHMETRICSPtr', 'ulong', 'voidPtr', 's_MAT2Ptr'};fcnNum=fcnNum+1;
% HMETAFILE __stdcall GetMetaFileW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetMetaFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall GetOutlineTextMetricsW ( HDC , UINT , LPOUTLINETEXTMETRIC ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetOutlineTextMetricsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 's_OUTLINETEXTMETRICPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetTextExtentPointW ( HDC , LPCWSTR , int , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetTextExtentPointW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetTextExtentPoint32W ( HDC , LPCWSTR , int , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetTextExtentPoint32W'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetTextExtentExPointW ( HDC , LPCWSTR , int , int , LPINT , LPINT , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTextExtentExPointW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 'int32', 'int32Ptr', 'int32Ptr', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetCharacterPlacementW ( HDC , LPCWSTR , int , int , LPGCP_RESULTS , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrint32int32voidPtrulongThunk';fcns.name{fcnNum}='GetCharacterPlacementW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 'int32', 'tagGCP_RESULTSPtr', 'ulong'};fcnNum=fcnNum+1;
% HDC __stdcall ResetDCW ( HDC , const DEVMODE *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ResetDCW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 's_devicemodePtr'};fcnNum=fcnNum+1;
% BOOL __stdcall RemoveFontResourceW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='RemoveFontResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% HENHMETAFILE __stdcall CopyEnhMetaFileW ( HENHMETAFILE , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CopyEnhMetaFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HDC __stdcall CreateEnhMetaFileW ( HDC , LPCWSTR , const RECT *, LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateEnhMetaFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 's_RECTPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% HENHMETAFILE __stdcall GetEnhMetaFileW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetEnhMetaFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall GetEnhMetaFileDescriptionW ( HENHMETAFILE , UINT , LPWSTR ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetEnhMetaFileDescriptionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetTextMetricsW ( HDC , LPTEXTMETRIC ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTextMetricsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagTEXTMETRICPtr'};fcnNum=fcnNum+1;
% int __stdcall StartDocW ( HDC , const DOCINFO *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='StartDocW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'DOCINFOPtr'};fcnNum=fcnNum+1;
% int __stdcall GetObjectW ( HGDIOBJ , int , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetObjectW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall TextOutW ( HDC , int , int , LPCWSTR , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrint32Thunk';fcns.name{fcnNum}='TextOutW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ExtTextOutW ( HDC , int , int , UINT , const RECT *, LPCWSTR , UINT , const INT *); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32uint32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='ExtTextOutW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'uint32', 's_RECTPtr', 'uint16Ptr', 'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall PolyTextOutW ( HDC , const POLYTEXT *, int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PolyTextOutW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_POLYTEXTPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetTextFaceW ( HDC , int , LPWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetTextFaceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetKerningPairsW ( HDC , DWORD , LPKERNINGPAIR ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetKerningPairsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'tagKERNINGPAIRPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetLogColorSpaceW ( HCOLORSPACE , LPLOGCOLORSPACE , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetLogColorSpaceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagLOGCOLORSPACEPtr', 'ulong'};fcnNum=fcnNum+1;
% HCOLORSPACE __stdcall CreateColorSpaceW ( LPLOGCOLORSPACE ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateColorSpaceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagLOGCOLORSPACEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetICMProfileW ( HDC , DWORD , LPWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetICMProfileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetICMProfileW ( HDC , LPWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetICMProfileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall UpdateICMRegKeyW ( DWORD , DWORD , LPWSTR , UINT ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtruint32Thunk';fcns.name{fcnNum}='UpdateICMRegKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall EnumICMProfilesW ( HDC , ICMENUMPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumICMProfilesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% HPROPSHEETPAGE __stdcall CreatePropertySheetPageW ( LPCPROPSHEETPAGE ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreatePropertySheetPageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_PSPPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall PropertySheetW ( LPCPROPSHEETHEADER ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PropertySheetW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HIMAGELIST __stdcall ImageList_LoadImageW ( HINSTANCE , LPCWSTR , int , int , COLORREF , UINT , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrint32int32ulonguint32uint32Thunk';fcns.name{fcnNum}='ImageList_LoadImageW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'int32', 'int32', 'ulong', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% HWND __stdcall CreateStatusWindowW ( LONG , LPCWSTR , HWND , UINT *); 
fcns.thunkname{fcnNum}='voidPtrlongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateStatusWindowW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'long', 'uint16Ptr', 'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% void __stdcall DrawStatusTextW ( HDC , LPRECT , LPCWSTR , UINT ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='DrawStatusTextW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetOpenFileNameW ( LPOPENFILENAME ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetOpenFileNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagOFNPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetSaveFileNameW ( LPOPENFILENAME ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetSaveFileNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagOFNPtr'};fcnNum=fcnNum+1;
% short __stdcall GetFileTitleW ( LPCWSTR , LPWSTR , WORD ); 
fcns.thunkname{fcnNum}='int16voidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='GetFileTitleW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16'};fcnNum=fcnNum+1;
% BOOL __stdcall ChooseColorW ( LPCHOOSECOLOR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ChooseColorW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'CHOOSECOLORPtr'};fcnNum=fcnNum+1;
% HWND __stdcall ReplaceTextW ( LPFINDREPLACE ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ReplaceTextW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'FINDREPLACEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ChooseFontW ( LPCHOOSEFONT ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ChooseFontW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'CHOOSEFONTPtr'};fcnNum=fcnNum+1;
% HWND __stdcall FindTextW ( LPFINDREPLACE ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='FindTextW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'FINDREPLACEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PrintDlgW ( LPPRINTDLG ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PrintDlgW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagPDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PageSetupDlgW ( LPPAGESETUPDLG ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PageSetupDlgW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagPSDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CreateProcessW ( LPCWSTR , LPWSTR , LPSECURITY_ATTRIBUTES , LPSECURITY_ATTRIBUTES , BOOL , DWORD , LPVOID , LPCWSTR , LPSTARTUPINFO , LPPROCESS_INFORMATION ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32ulongvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateProcessW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 's_SECURITY_ATTRIBUTESPtr', 's_SECURITY_ATTRIBUTESPtr', 'int32', 'ulong', 'voidPtr', 'uint16Ptr', 's_STARTUPINFOPtr', 's_PROCESS_INFORMATIONPtr'};fcnNum=fcnNum+1;
% void __stdcall GetStartupInfoW ( LPSTARTUPINFO ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GetStartupInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_STARTUPINFOPtr'};fcnNum=fcnNum+1;
% HANDLE __stdcall FindFirstFileW ( LPCWSTR , LPWIN32_FIND_DATA ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FindFirstFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 's_WIN32_FIND_DATAPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FindNextFileW ( HANDLE , LPWIN32_FIND_DATA ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FindNextFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_WIN32_FIND_DATAPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetVersionExW ( LPOSVERSIONINFO ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetVersionExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_OSVERSIONINFOPtr'};fcnNum=fcnNum+1;
% HDC __stdcall CreateDCW ( LPCWSTR , LPCWSTR , LPCWSTR , const DEVMODE *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateDCW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 's_devicemodePtr'};fcnNum=fcnNum+1;
% HFONT __stdcall CreateFontA ( int , int , int , int , int , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrint32int32int32int32int32ulongulongulongulongulongulongulongulongcstringThunk';fcns.name{fcnNum}='CreateFontA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall VerInstallFileW ( DWORD , LPWSTR , LPWSTR , LPWSTR , LPWSTR , LPWSTR , LPWSTR , PUINT ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='VerInstallFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetFileVersionInfoSizeW ( LPWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFileVersionInfoSizeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetFileVersionInfoW ( LPWSTR , DWORD , DWORD , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='GetFileVersionInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall VerLanguageNameW ( DWORD , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrulongThunk';fcns.name{fcnNum}='VerLanguageNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall VerFindFileW ( DWORD , LPWSTR , LPWSTR , LPWSTR , LPWSTR , PUINT , LPWSTR , PUINT ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='VerFindFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegSetValueExW ( HKEY , LPCWSTR , DWORD , DWORD , const BYTE *, DWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrulongulongvoidPtrulongThunk';fcns.name{fcnNum}='RegSetValueExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong', 'ulong', 'uint8Ptr', 'ulong'};fcnNum=fcnNum+1;
% LONG __stdcall RegUnLoadKeyW ( HKEY , LPCWSTR ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegUnLoadKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall InitiateSystemShutdownW ( LPWSTR , LPWSTR , DWORD , BOOL , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongint32int32Thunk';fcns.name{fcnNum}='InitiateSystemShutdownW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall AbortSystemShutdownW ( LPWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='AbortSystemShutdownW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegRestoreKeyW ( HKEY , LPCWSTR , DWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='RegRestoreKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% LONG __stdcall RegSaveKeyW ( HKEY , LPCWSTR , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegSaveKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegSetValueW ( HKEY , LPCWSTR , DWORD , LPCWSTR , DWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrulongvoidPtrulongThunk';fcns.name{fcnNum}='RegSetValueW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% LONG __stdcall RegQueryValueW ( HKEY , LPCWSTR , LPWSTR , PLONG ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegQueryValueW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'longPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegQueryMultipleValuesW ( HKEY , PVALENT , DWORD , LPWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegQueryMultipleValuesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'value_entPtr', 'ulong', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegQueryValueExW ( HKEY , LPCWSTR , LPDWORD , LPDWORD , LPBYTE , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegQueryValueExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr', 'uint32Ptr', 'uint8Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegReplaceKeyW ( HKEY , LPCWSTR , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegReplaceKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegConnectRegistryW ( LPWSTR , HKEY , PHKEY ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegConnectRegistryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegCreateKeyW ( HKEY , LPCWSTR , PHKEY ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegCreateKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegCreateKeyExW ( HKEY , LPCWSTR , DWORD , LPWSTR , DWORD , REGSAM , LPSECURITY_ATTRIBUTES , PHKEY , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrulongvoidPtrulongulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegCreateKeyExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong', 'uint16Ptr', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr', 'voidPtrPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegDeleteKeyW ( HKEY , LPCWSTR ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegDeleteKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegDeleteValueW ( HKEY , LPCWSTR ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegDeleteValueW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegEnumKeyW ( HKEY , DWORD , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrulongvoidPtrulongThunk';fcns.name{fcnNum}='RegEnumKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% LONG __stdcall RegEnumKeyExW ( HKEY , DWORD , LPWSTR , LPDWORD , LPDWORD , LPWSTR , LPDWORD , PFILETIME ); 
fcns.thunkname{fcnNum}='longvoidPtrulongvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegEnumKeyExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint16Ptr', 'uint32Ptr', 'uint32Ptr', 'uint16Ptr', 'uint32Ptr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegEnumValueW ( HKEY , DWORD , LPWSTR , LPDWORD , LPDWORD , LPDWORD , LPBYTE , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrulongvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegEnumValueW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint16Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint8Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegLoadKeyW ( HKEY , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegLoadKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegOpenKeyW ( HKEY , LPCWSTR , PHKEY ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegOpenKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegOpenKeyExW ( HKEY , LPCWSTR , DWORD , REGSAM , PHKEY ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='RegOpenKeyExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong', 'ulong', 'voidPtrPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegQueryInfoKeyW ( HKEY , LPWSTR , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPDWORD , PFILETIME ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegQueryInfoKeyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% int __stdcall CompareStringW ( LCID , DWORD , LPCWSTR , int , LPCWSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='CompareStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16Ptr', 'int32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall LCMapStringW ( LCID , DWORD , LPCWSTR , int , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='LCMapStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16Ptr', 'int32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetLocaleInfoW ( LCID , LCTYPE , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrint32Thunk';fcns.name{fcnNum}='GetLocaleInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetLocaleInfoW ( LCID , LCTYPE , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrThunk';fcns.name{fcnNum}='SetLocaleInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% int __stdcall GetTimeFormatW ( LCID , DWORD , const SYSTEMTIME *, LPCWSTR , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetTimeFormatW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 's_SYSTEMTIMEPtr', 'uint16Ptr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetDateFormatW ( LCID , DWORD , const SYSTEMTIME *, LPCWSTR , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetDateFormatW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 's_SYSTEMTIMEPtr', 'uint16Ptr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetNumberFormatW ( LCID , DWORD , LPCWSTR , const NUMBERFMT *, LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetNumberFormatW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16Ptr', 's_numberfmtPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetCurrencyFormatW ( LCID , DWORD , LPCWSTR , const CURRENCYFMT *, LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetCurrencyFormatW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16Ptr', 's_currencyfmtPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumCalendarInfoW ( CALINFO_ENUMPROC , LCID , CALID , CALTYPE ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongThunk';fcns.name{fcnNum}='EnumCalendarInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumTimeFormatsW ( TIMEFMT_ENUMPROC , LCID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='EnumTimeFormatsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumDateFormatsW ( DATEFMT_ENUMPROC , LCID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='EnumDateFormatsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetStringTypeExW ( LCID , DWORD , LPCWSTR , int , LPWORD ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetStringTypeExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'uint16Ptr', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetStringTypeW ( DWORD , LPCWSTR , int , LPWORD ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetStringTypeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% int __stdcall FoldStringW ( DWORD , LPCWSTR , int , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='FoldStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'int32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumSystemLocalesW ( LOCALE_ENUMPROC , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='EnumSystemLocalesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumSystemCodePagesW ( CODEPAGE_ENUMPROC , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='EnumSystemCodePagesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall PeekConsoleInputW ( HANDLE , PINPUT_RECORD , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrPINPUT_RECORDulongvoidPtrThunk';fcns.name{fcnNum}='PeekConsoleInputW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'error', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadConsoleInputW ( HANDLE , PINPUT_RECORD , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrPINPUT_RECORDulongvoidPtrThunk';fcns.name{fcnNum}='ReadConsoleInputW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'error', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteConsoleInputW ( HANDLE , const INPUT_RECORD *, DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='WriteConsoleInputW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadConsoleOutputW ( HANDLE , PCHAR_INFO , COORD , COORD , PSMALL_RECT ); 
fcns.thunkname{fcnNum}='int32voidPtrPCHAR_INFOCOORDCOORDvoidPtrThunk';fcns.name{fcnNum}='ReadConsoleOutputW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'error', 's_COORD', 's_COORD', 's_SMALL_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteConsoleOutputW ( HANDLE , const CHAR_INFO *, COORD , COORD , PSMALL_RECT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrCOORDCOORDvoidPtrThunk';fcns.name{fcnNum}='WriteConsoleOutputW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 's_COORD', 's_COORD', 's_SMALL_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadConsoleOutputCharacterW ( HANDLE , LPWSTR , DWORD , COORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongCOORDvoidPtrThunk';fcns.name{fcnNum}='ReadConsoleOutputCharacterW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong', 's_COORD', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteConsoleOutputCharacterW ( HANDLE , LPCWSTR , DWORD , COORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongCOORDvoidPtrThunk';fcns.name{fcnNum}='WriteConsoleOutputCharacterW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong', 's_COORD', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall FillConsoleOutputCharacterW ( HANDLE , WCHAR , DWORD , COORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtruint16ulongCOORDvoidPtrThunk';fcns.name{fcnNum}='FillConsoleOutputCharacterW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'ulong', 's_COORD', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ScrollConsoleScreenBufferW ( HANDLE , const SMALL_RECT *, const SMALL_RECT *, COORD , const CHAR_INFO *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrCOORDvoidPtrThunk';fcns.name{fcnNum}='ScrollConsoleScreenBufferW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_SMALL_RECTPtr', 's_SMALL_RECTPtr', 's_COORD', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetConsoleTitleW ( LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='GetConsoleTitleW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleTitleW ( LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetConsoleTitleW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadConsoleW ( HANDLE , LPVOID , DWORD , LPDWORD , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ReadConsoleW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteConsoleW ( HANDLE , const void *, DWORD , LPDWORD , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteConsoleW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetAddConnectionW ( LPCWSTR , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetAddConnectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetAddConnection2W ( LPNETRESOURCE , LPCWSTR , LPCWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='WNetAddConnection2W'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_NETRESOURCEPtr', 'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetAddConnection3W ( HWND , LPNETRESOURCE , LPCWSTR , LPCWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='WNetAddConnection3W'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 's_NETRESOURCEPtr', 'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetCancelConnectionW ( LPCWSTR , BOOL ); 
fcns.thunkname{fcnNum}='ulongvoidPtrint32Thunk';fcns.name{fcnNum}='WNetCancelConnectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetCancelConnection2W ( LPCWSTR , DWORD , BOOL ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongint32Thunk';fcns.name{fcnNum}='WNetCancelConnection2W'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetConnectionW ( LPCWSTR , LPWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetGetConnectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetUseConnectionW ( HWND , LPNETRESOURCE , LPCWSTR , LPCWSTR , DWORD , LPWSTR , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetUseConnectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 's_NETRESOURCEPtr', 'uint16Ptr', 'uint16Ptr', 'ulong', 'uint16Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetSetConnectionW ( LPCWSTR , DWORD , LPVOID ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='WNetSetConnectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetConnectionDialog1W ( LPCONNECTDLGSTRUCT ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='WNetConnectionDialog1W'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_CONNECTDLGSTRUCTPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetDisconnectDialog1W ( LPDISCDLGSTRUCT ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='WNetDisconnectDialog1W'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_DISCDLGSTRUCTPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetOpenEnumW ( DWORD , DWORD , DWORD , LPNETRESOURCE , LPHANDLE ); 
fcns.thunkname{fcnNum}='ulongulongulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetOpenEnumW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 's_NETRESOURCEPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetEnumResourceW ( HANDLE , LPDWORD , LPVOID , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetEnumResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetUniversalNameW ( LPCWSTR , DWORD , LPVOID , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetGetUniversalNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetUserW ( LPCWSTR , LPWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetGetUserW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetProviderNameW ( DWORD , LPWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetGetProviderNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetNetworkInformationW ( LPCWSTR , LPNETINFOSTRUCT ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetGetNetworkInformationW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 's_NETINFOSTRUCTPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetLastErrorW ( LPDWORD , LPWSTR , DWORD , LPWSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongvoidPtrulongThunk';fcns.name{fcnNum}='WNetGetLastErrorW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint16Ptr', 'ulong', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall MultinetGetConnectionPerformanceW ( LPNETRESOURCE , LPNETCONNECTINFOSTRUCT ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MultinetGetConnectionPerformanceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_NETRESOURCEPtr', 's_NETCONNECTINFOSTRUCTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ChangeServiceConfigW ( SC_HANDLE , DWORD , DWORD , DWORD , LPCWSTR , LPCWSTR , LPDWORD , LPCWSTR , LPCWSTR , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ChangeServiceConfigW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% SC_HANDLE __stdcall CreateServiceW ( SC_HANDLE , LPCWSTR , LPCWSTR , DWORD , DWORD , DWORD , DWORD , LPCWSTR , LPCWSTR , LPDWORD , LPCWSTR , LPCWSTR , LPCWSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrulongulongulongulongvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateServiceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'ulong', 'ulong', 'ulong', 'ulong', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumDependentServicesW ( SC_HANDLE , DWORD , LPENUM_SERVICE_STATUS , DWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EnumDependentServicesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 's_ENUM_SERVICE_STATUSPtr', 'ulong', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumServicesStatusW ( SC_HANDLE , DWORD , DWORD , LPENUM_SERVICE_STATUS , DWORD , LPDWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EnumServicesStatusW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 's_ENUM_SERVICE_STATUSPtr', 'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetServiceKeyNameW ( SC_HANDLE , LPCWSTR , LPWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetServiceKeyNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetServiceDisplayNameW ( SC_HANDLE , LPCWSTR , LPWSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetServiceDisplayNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% SC_HANDLE __stdcall OpenSCManagerW ( LPCWSTR , LPCWSTR , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='OpenSCManagerW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% SC_HANDLE __stdcall OpenServiceW ( SC_HANDLE , LPCWSTR , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='OpenServiceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall QueryServiceConfigW ( SC_HANDLE , LPQUERY_SERVICE_CONFIG , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='QueryServiceConfigW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_QUERY_SERVICE_CONFIGPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall QueryServiceLockStatusW ( SC_HANDLE , LPQUERY_SERVICE_LOCK_STATUS , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='QueryServiceLockStatusW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_QUERY_SERVICE_LOCK_STATUSPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% SERVICE_STATUS_HANDLE __stdcall RegisterServiceCtrlHandlerW ( LPCWSTR , LPHANDLER_FUNCTION ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegisterServiceCtrlHandlerW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'FcnPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall StartServiceCtrlDispatcherW ( LPSERVICE_TABLE_ENTRY ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='StartServiceCtrlDispatcherW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SERVICE_TABLE_ENTRYPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall StartServiceW ( SC_HANDLE , DWORD , LPCWSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='StartServiceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetBinaryTypeA ( LPCSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='GetBinaryTypeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetShortPathNameA ( LPCSTR , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongcstringcstringulongThunk';fcns.name{fcnNum}='GetShortPathNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall FreeEnvironmentStringsA ( LPSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='FreeEnvironmentStringsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall FormatMessageA ( DWORD , LPCVOID , DWORD , DWORD , LPSTR , DWORD , va_list *); 
fcns.name{fcnNum}='FormatMessageA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'voidPtr', 'ulong', 'ulong', 'cstring', 'ulong', 'cstringPtr'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateMailslotA ( LPCSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='voidPtrcstringulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateMailslotA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% int __stdcall lstrcmpA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='lstrcmpA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall lstrcmpiA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='lstrcmpiA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% LPSTR __stdcall lstrcpynA ( LPSTR , LPCSTR , int ); 
fcns.thunkname{fcnNum}='cstringcstringcstringint32Thunk';fcns.name{fcnNum}='lstrcpynA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% LPSTR __stdcall lstrcpyA ( LPSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='cstringcstringcstringThunk';fcns.name{fcnNum}='lstrcpyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% LPSTR __stdcall lstrcatA ( LPSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='cstringcstringcstringThunk';fcns.name{fcnNum}='lstrcatA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall lstrlenA ( LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='lstrlenA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateMutexA ( LPSECURITY_ATTRIBUTES , BOOL , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='CreateMutexA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenMutexA ( DWORD , BOOL , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrulongint32cstringThunk';fcns.name{fcnNum}='OpenMutexA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateEventA ( LPSECURITY_ATTRIBUTES , BOOL , BOOL , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32cstringThunk';fcns.name{fcnNum}='CreateEventA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenEventA ( DWORD , BOOL , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrulongint32cstringThunk';fcns.name{fcnNum}='OpenEventA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateSemaphoreA ( LPSECURITY_ATTRIBUTES , LONG , LONG , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongcstringThunk';fcns.name{fcnNum}='CreateSemaphoreA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenSemaphoreA ( DWORD , BOOL , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrulongint32cstringThunk';fcns.name{fcnNum}='OpenSemaphoreA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateFileMappingA ( HANDLE , LPSECURITY_ATTRIBUTES , DWORD , DWORD , DWORD , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongulongulongcstringThunk';fcns.name{fcnNum}='CreateFileMappingA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'ulong', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenFileMappingA ( DWORD , BOOL , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrulongint32cstringThunk';fcns.name{fcnNum}='OpenFileMappingA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall GetLogicalDriveStringsA ( DWORD , LPSTR ); 
fcns.thunkname{fcnNum}='ulongulongcstringThunk';fcns.name{fcnNum}='GetLogicalDriveStringsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% HINSTANCE __stdcall LoadLibraryA ( LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='LoadLibraryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% HINSTANCE __stdcall LoadLibraryExA ( LPCSTR , HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrcstringvoidPtrulongThunk';fcns.name{fcnNum}='LoadLibraryExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall GetModuleFileNameA ( HINSTANCE , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrcstringulongThunk';fcns.name{fcnNum}='GetModuleFileNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% HMODULE __stdcall GetModuleHandleA ( LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='GetModuleHandleA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% void __stdcall FatalAppExitA ( UINT , LPCSTR ); 
fcns.thunkname{fcnNum}='voiduint32cstringThunk';fcns.name{fcnNum}='FatalAppExitA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32', 'cstring'};fcnNum=fcnNum+1;
% LPSTR __stdcall GetCommandLineA ( void ); 
fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='GetCommandLineA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall GetEnvironmentVariableA ( LPCSTR , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongcstringcstringulongThunk';fcns.name{fcnNum}='GetEnvironmentVariableA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetEnvironmentVariableA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='SetEnvironmentVariableA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall ExpandEnvironmentStringsA ( LPCSTR , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongcstringcstringulongThunk';fcns.name{fcnNum}='ExpandEnvironmentStringsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% void __stdcall OutputDebugStringA ( LPCSTR ); 
fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='OutputDebugStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% HRSRC __stdcall FindResourceA ( HMODULE , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringcstringThunk';fcns.name{fcnNum}='FindResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% HRSRC __stdcall FindResourceExA ( HINSTANCE , LPCSTR , LPCSTR , WORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringcstringuint16Thunk';fcns.name{fcnNum}='FindResourceExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'uint16'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumResourceTypesA ( HINSTANCE , ENUMRESTYPEPROC , LONG ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumResourceTypesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumResourceNamesA ( HINSTANCE , LPCSTR , ENUMRESNAMEPROC , LONG ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrlongThunk';fcns.name{fcnNum}='EnumResourceNamesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumResourceLanguagesA ( HINSTANCE , LPCSTR , LPCSTR , ENUMRESLANGPROC , LONG ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringvoidPtrlongThunk';fcns.name{fcnNum}='EnumResourceLanguagesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% HANDLE __stdcall BeginUpdateResourceA ( LPCSTR , BOOL ); 
fcns.thunkname{fcnNum}='voidPtrcstringint32Thunk';fcns.name{fcnNum}='BeginUpdateResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall UpdateResourceA ( HANDLE , LPCSTR , LPCSTR , WORD , LPVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringuint16voidPtrulongThunk';fcns.name{fcnNum}='UpdateResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'uint16', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EndUpdateResourceA ( HANDLE , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EndUpdateResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% ATOM __stdcall GlobalAddAtomA ( LPCSTR ); 
fcns.thunkname{fcnNum}='uint16cstringThunk';fcns.name{fcnNum}='GlobalAddAtomA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% ATOM __stdcall GlobalFindAtomA ( LPCSTR ); 
fcns.thunkname{fcnNum}='uint16cstringThunk';fcns.name{fcnNum}='GlobalFindAtomA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% UINT __stdcall GlobalGetAtomNameA ( ATOM , LPSTR , int ); 
fcns.thunkname{fcnNum}='uint32uint16cstringint32Thunk';fcns.name{fcnNum}='GlobalGetAtomNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16', 'cstring', 'int32'};fcnNum=fcnNum+1;
% ATOM __stdcall AddAtomA ( LPCSTR ); 
fcns.thunkname{fcnNum}='uint16cstringThunk';fcns.name{fcnNum}='AddAtomA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% ATOM __stdcall FindAtomA ( LPCSTR ); 
fcns.thunkname{fcnNum}='uint16cstringThunk';fcns.name{fcnNum}='FindAtomA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% UINT __stdcall GetAtomNameA ( ATOM , LPSTR , int ); 
fcns.thunkname{fcnNum}='uint32uint16cstringint32Thunk';fcns.name{fcnNum}='GetAtomNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16', 'cstring', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall GetProfileIntA ( LPCSTR , LPCSTR , INT ); 
fcns.thunkname{fcnNum}='uint32cstringcstringint32Thunk';fcns.name{fcnNum}='GetProfileIntA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetProfileStringA ( LPCSTR , LPCSTR , LPCSTR , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongcstringcstringcstringcstringulongThunk';fcns.name{fcnNum}='GetProfileStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteProfileStringA ( LPCSTR , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringcstringThunk';fcns.name{fcnNum}='WriteProfileStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall GetProfileSectionA ( LPCSTR , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongcstringcstringulongThunk';fcns.name{fcnNum}='GetProfileSectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteProfileSectionA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='WriteProfileSectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% UINT __stdcall GetPrivateProfileIntA ( LPCSTR , LPCSTR , INT , LPCSTR ); 
fcns.thunkname{fcnNum}='uint32cstringcstringint32cstringThunk';fcns.name{fcnNum}='GetPrivateProfileIntA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall GetPrivateProfileStringA ( LPCSTR , LPCSTR , LPCSTR , LPSTR , DWORD , LPCSTR ); 
fcns.thunkname{fcnNum}='ulongcstringcstringcstringcstringulongcstringThunk';fcns.name{fcnNum}='GetPrivateProfileStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'cstring', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall WritePrivateProfileStringA ( LPCSTR , LPCSTR , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringcstringcstringThunk';fcns.name{fcnNum}='WritePrivateProfileStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall GetPrivateProfileSectionA ( LPCSTR , LPSTR , DWORD , LPCSTR ); 
fcns.thunkname{fcnNum}='ulongcstringcstringulongcstringThunk';fcns.name{fcnNum}='GetPrivateProfileSectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall WritePrivateProfileSectionA ( LPCSTR , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringcstringThunk';fcns.name{fcnNum}='WritePrivateProfileSectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% UINT __stdcall GetDriveTypeA ( LPCSTR ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='GetDriveTypeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% UINT __stdcall GetSystemDirectoryA ( LPSTR , UINT ); 
fcns.thunkname{fcnNum}='uint32cstringuint32Thunk';fcns.name{fcnNum}='GetSystemDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'uint32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetTempPathA ( DWORD , LPSTR ); 
fcns.thunkname{fcnNum}='ulongulongcstringThunk';fcns.name{fcnNum}='GetTempPathA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% UINT __stdcall GetTempFileNameA ( LPCSTR , LPCSTR , UINT , LPSTR ); 
fcns.thunkname{fcnNum}='uint32cstringcstringuint32cstringThunk';fcns.name{fcnNum}='GetTempFileNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'uint32', 'cstring'};fcnNum=fcnNum+1;
% UINT __stdcall GetWindowsDirectoryA ( LPSTR , UINT ); 
fcns.thunkname{fcnNum}='uint32cstringuint32Thunk';fcns.name{fcnNum}='GetWindowsDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetCurrentDirectoryA ( LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='SetCurrentDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall GetCurrentDirectoryA ( DWORD , LPSTR ); 
fcns.thunkname{fcnNum}='ulongulongcstringThunk';fcns.name{fcnNum}='GetCurrentDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall GetDiskFreeSpaceA ( LPCSTR , LPDWORD , LPDWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDiskFreeSpaceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall CreateDirectoryA ( LPCSTR , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='CreateDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CreateDirectoryExA ( LPCSTR , LPCSTR , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='CreateDirectoryExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall RemoveDirectoryA ( LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='RemoveDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall GetFullPathNameA ( LPCSTR , DWORD , LPSTR , LPSTR *); 
fcns.thunkname{fcnNum}='ulongcstringulongcstringvoidPtrThunk';fcns.name{fcnNum}='GetFullPathNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'cstring', 'cstringPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DefineDosDeviceA ( DWORD , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32ulongcstringcstringThunk';fcns.name{fcnNum}='DefineDosDeviceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall QueryDosDeviceA ( LPCSTR , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongcstringcstringulongThunk';fcns.name{fcnNum}='QueryDosDeviceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateFileA ( LPCSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES , DWORD , DWORD , HANDLE ); 
fcns.thunkname{fcnNum}='voidPtrcstringulongulongvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetFileAttributesA ( LPCSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32cstringulongThunk';fcns.name{fcnNum}='SetFileAttributesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall GetFileAttributesA ( LPCSTR ); 
fcns.thunkname{fcnNum}='ulongcstringThunk';fcns.name{fcnNum}='GetFileAttributesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall GetCompressedFileSizeA ( LPCSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongcstringvoidPtrThunk';fcns.name{fcnNum}='GetCompressedFileSizeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall DeleteFileA ( LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='DeleteFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall SearchPathA ( LPCSTR , LPCSTR , LPCSTR , DWORD , LPSTR , LPSTR *); 
fcns.thunkname{fcnNum}='ulongcstringcstringcstringulongcstringvoidPtrThunk';fcns.name{fcnNum}='SearchPathA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'ulong', 'cstring', 'cstringPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CopyFileA ( LPCSTR , LPCSTR , BOOL ); 
fcns.thunkname{fcnNum}='int32cstringcstringint32Thunk';fcns.name{fcnNum}='CopyFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall MoveFileA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='MoveFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall MoveFileExA ( LPCSTR , LPCSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32cstringcstringulongThunk';fcns.name{fcnNum}='MoveFileExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateNamedPipeA ( LPCSTR , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='voidPtrcstringulongulongulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateNamedPipeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetNamedPipeHandleStateA ( HANDLE , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringulongThunk';fcns.name{fcnNum}='GetNamedPipeHandleStateA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall CallNamedPipeA ( LPCSTR , LPVOID , DWORD , LPVOID , DWORD , LPDWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrulongvoidPtrulongvoidPtrulongThunk';fcns.name{fcnNum}='CallNamedPipeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'voidPtr', 'ulong', 'voidPtr', 'ulong', 'uint32Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall WaitNamedPipeA ( LPCSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32cstringulongThunk';fcns.name{fcnNum}='WaitNamedPipeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetVolumeLabelA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='SetVolumeLabelA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall GetVolumeInformationA ( LPCSTR , LPSTR , DWORD , LPDWORD , LPDWORD , LPDWORD , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32cstringcstringulongvoidPtrvoidPtrvoidPtrcstringulongThunk';fcns.name{fcnNum}='GetVolumeInformationA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall ClearEventLogA ( HANDLE , LPCSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='ClearEventLogA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall BackupEventLogA ( HANDLE , LPCSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='BackupEventLogA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenEventLogA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringcstringThunk';fcns.name{fcnNum}='OpenEventLogA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall RegisterEventSourceA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringcstringThunk';fcns.name{fcnNum}='RegisterEventSourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenBackupEventLogA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringcstringThunk';fcns.name{fcnNum}='OpenBackupEventLogA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadEventLogA ( HANDLE , DWORD , DWORD , LPVOID , DWORD , DWORD *, DWORD *); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ReadEventLogA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'voidPtr', 'ulong', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReportEventA ( HANDLE , WORD , WORD , DWORD , PSID , WORD , DWORD , LPCSTR *, LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16ulongvoidPtruint16ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ReportEventA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'ulong', 's_SIDPtr', 'uint16', 'ulong', 'cstringPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AccessCheckAndAuditAlarmA ( LPCSTR , LPVOID , LPSTR , LPSTR , PSECURITY_DESCRIPTOR , DWORD , PGENERIC_MAPPING , BOOL , LPDWORD , LPBOOL , LPBOOL ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrcstringcstringvoidPtrulongvoidPtrint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AccessCheckAndAuditAlarmA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'voidPtr', 'cstring', 'cstring', 's_SECURITY_DESCRIPTORPtr', 'ulong', 's_GENERIC_MAPPINGPtr', 'int32', 'uint32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ObjectOpenAuditAlarmA ( LPCSTR , LPVOID , LPSTR , LPSTR , PSECURITY_DESCRIPTOR , HANDLE , DWORD , DWORD , PPRIVILEGE_SET , BOOL , BOOL , LPBOOL ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrcstringcstringvoidPtrvoidPtrulongulongvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='ObjectOpenAuditAlarmA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'voidPtr', 'cstring', 'cstring', 's_SECURITY_DESCRIPTORPtr', 'voidPtr', 'ulong', 'ulong', 's_PRIVILEGE_SETPtr', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ObjectPrivilegeAuditAlarmA ( LPCSTR , LPVOID , HANDLE , DWORD , PPRIVILEGE_SET , BOOL ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrvoidPtrulongvoidPtrint32Thunk';fcns.name{fcnNum}='ObjectPrivilegeAuditAlarmA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'voidPtr', 'voidPtr', 'ulong', 's_PRIVILEGE_SETPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ObjectCloseAuditAlarmA ( LPCSTR , LPVOID , BOOL ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrint32Thunk';fcns.name{fcnNum}='ObjectCloseAuditAlarmA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall PrivilegedServiceAuditAlarmA ( LPCSTR , LPCSTR , HANDLE , PPRIVILEGE_SET , BOOL ); 
fcns.thunkname{fcnNum}='int32cstringcstringvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PrivilegedServiceAuditAlarmA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'voidPtr', 's_PRIVILEGE_SETPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetFileSecurityA ( LPCSTR , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR ); 
fcns.thunkname{fcnNum}='int32cstringulongvoidPtrThunk';fcns.name{fcnNum}='SetFileSecurityA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'ulong', 's_SECURITY_DESCRIPTORPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetFileSecurityA ( LPCSTR , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32cstringulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetFileSecurityA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'ulong', 's_SECURITY_DESCRIPTORPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall FindFirstChangeNotificationA ( LPCSTR , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrcstringint32ulongThunk';fcns.name{fcnNum}='FindFirstChangeNotificationA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall IsBadStringPtrA ( LPCSTR , UINT ); 
fcns.thunkname{fcnNum}='int32cstringuint32Thunk';fcns.name{fcnNum}='IsBadStringPtrA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall LookupAccountSidA ( LPCSTR , PSID , LPSTR , LPDWORD , LPSTR , LPDWORD , PSID_NAME_USE ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrcstringvoidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LookupAccountSidA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 's_SIDPtr', 'cstring', 'uint32Ptr', 'cstring', 'uint32Ptr', 'e_SID_NAME_USEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall LookupAccountNameA ( LPCSTR , LPCSTR , PSID , LPDWORD , LPSTR , LPDWORD , PSID_NAME_USE ); 
fcns.thunkname{fcnNum}='int32cstringcstringvoidPtrvoidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LookupAccountNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 's_SIDPtr', 'uint32Ptr', 'cstring', 'uint32Ptr', 'e_SID_NAME_USEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall LookupPrivilegeValueA ( LPCSTR , LPCSTR , PLUID ); 
fcns.thunkname{fcnNum}='int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='LookupPrivilegeValueA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall LookupPrivilegeNameA ( LPCSTR , PLUID , LPSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='LookupPrivilegeNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'voidPtr', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall LookupPrivilegeDisplayNameA ( LPCSTR , LPCSTR , LPSTR , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32cstringcstringcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LookupPrivilegeDisplayNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall BuildCommDCBA ( LPCSTR lpDef , LPDCB lpDCB ); 
fcns.thunkname{fcnNum}='int32cstringLPDCBThunk';fcns.name{fcnNum}='BuildCommDCBA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'error'};fcnNum=fcnNum+1;
% BOOL __stdcall BuildCommDCBAndTimeoutsA ( LPCSTR , LPDCB , LPCOMMTIMEOUTS ); 
fcns.thunkname{fcnNum}='int32cstringLPDCBvoidPtrThunk';fcns.name{fcnNum}='BuildCommDCBAndTimeoutsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'error', 's_COMMTIMEOUTSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CommConfigDialogA ( LPCSTR , HWND , LPCOMMCONFIG ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CommConfigDialogA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'voidPtr', 's_COMM_CONFIGPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetDefaultCommConfigA ( LPCSTR , LPCOMMCONFIG , LPDWORD ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDefaultCommConfigA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 's_COMM_CONFIGPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetDefaultCommConfigA ( LPCSTR , LPCOMMCONFIG , DWORD ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrulongThunk';fcns.name{fcnNum}='SetDefaultCommConfigA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 's_COMM_CONFIGPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetComputerNameA ( LPSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='GetComputerNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetComputerNameA ( LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='SetComputerNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall GetUserNameA ( LPSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='GetUserNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall wvsprintfA ( LPSTR , LPCSTR , va_list arglist ); 
fcns.name{fcnNum}='wvsprintfA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int wsprintfA ( LPSTR , LPCSTR ,...); 
fcns.name{fcnNum}='wsprintfA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'error'};fcnNum=fcnNum+1;
% HKL __stdcall LoadKeyboardLayoutA ( LPCSTR , UINT ); 
fcns.thunkname{fcnNum}='voidPtrcstringuint32Thunk';fcns.name{fcnNum}='LoadKeyboardLayoutA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetKeyboardLayoutNameA ( LPSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='GetKeyboardLayoutNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% HDESK __stdcall CreateDesktopA ( LPSTR , LPSTR , LPDEVMODE , DWORD , DWORD , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='voidPtrcstringcstringvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateDesktopA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'cstring', 's_devicemodePtr', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% HDESK __stdcall OpenDesktopA ( LPSTR , DWORD , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrcstringulongint32ulongThunk';fcns.name{fcnNum}='OpenDesktopA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumDesktopsA ( HWINSTA , DESKTOPENUMPROCA , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumDesktopsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% HWINSTA __stdcall CreateWindowStationA ( LPSTR , DWORD , DWORD , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='voidPtrcstringulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateWindowStationA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% HWINSTA __stdcall OpenWindowStationA ( LPSTR , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrcstringint32ulongThunk';fcns.name{fcnNum}='OpenWindowStationA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumWindowStationsA ( ENUMWINDOWSTATIONPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrlongThunk';fcns.name{fcnNum}='EnumWindowStationsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall GetUserObjectInformationA ( HANDLE , int , PVOID , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetUserObjectInformationA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetUserObjectInformationA ( HANDLE , int , PVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrulongThunk';fcns.name{fcnNum}='SetUserObjectInformationA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% UINT __stdcall RegisterWindowMessageA ( LPCSTR ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='RegisterWindowMessageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall GetMessageA ( LPMSG , HWND , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='GetMessageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagMSGPtr', 'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% LONG __stdcall DispatchMessageA ( const MSG *); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DispatchMessageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'tagMSGPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PeekMessageA ( LPMSG , HWND , UINT , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32uint32uint32Thunk';fcns.name{fcnNum}='PeekMessageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagMSGPtr', 'voidPtr', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% LRESULT __stdcall SendMessageA ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtruint32uint32longThunk';fcns.name{fcnNum}='SendMessageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% LRESULT __stdcall SendMessageTimeoutA ( HWND , UINT , WPARAM , LPARAM , UINT , UINT , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtruint32uint32longuint32uint32voidPtrThunk';fcns.name{fcnNum}='SendMessageTimeoutA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long', 'uint32', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SendNotifyMessageA ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32longThunk';fcns.name{fcnNum}='SendNotifyMessageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall SendMessageCallbackA ( HWND , UINT , WPARAM , LPARAM , SENDASYNCPROC , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32longvoidPtrulongThunk';fcns.name{fcnNum}='SendMessageCallbackA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long', 'FcnPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall PostMessageA ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32longThunk';fcns.name{fcnNum}='PostMessageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall PostThreadMessageA ( DWORD , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='int32ulonguint32uint32longThunk';fcns.name{fcnNum}='PostThreadMessageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% LRESULT __stdcall DefWindowProcA ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtruint32uint32longThunk';fcns.name{fcnNum}='DefWindowProcA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% LRESULT __stdcall CallWindowProcA ( WNDPROC , HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtruint32uint32longThunk';fcns.name{fcnNum}='CallWindowProcA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'FcnPtr', 'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% ATOM __stdcall RegisterClassA ( const WNDCLASS *); 
fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='RegisterClassA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'s_WNDCLASSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall UnregisterClassA ( LPCSTR , HINSTANCE ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='UnregisterClassA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetClassInfoA ( HINSTANCE , LPCSTR , LPWNDCLASS ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='GetClassInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 's_WNDCLASSPtr'};fcnNum=fcnNum+1;
% ATOM __stdcall RegisterClassExA ( const WNDCLASSEX *); 
fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='RegisterClassExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'s_WNDCLASSEXPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetClassInfoExA ( HINSTANCE , LPCSTR , LPWNDCLASSEX ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='GetClassInfoExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 's_WNDCLASSEXPtr'};fcnNum=fcnNum+1;
% HWND __stdcall CreateWindowExA ( DWORD , LPCSTR , LPCSTR , DWORD , int , int , int , int , HWND , HMENU , HINSTANCE , LPVOID ); 
fcns.thunkname{fcnNum}='voidPtrulongcstringcstringulongint32int32int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateWindowExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% HWND __stdcall CreateDialogParamA ( HINSTANCE , LPCSTR , HWND , DLGPROC , LPARAM ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='CreateDialogParamA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% HWND __stdcall CreateDialogIndirectParamA ( HINSTANCE , LPCDLGTEMPLATE , HWND , DLGPROC , LPARAM ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='CreateDialogIndirectParamA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'DLGTEMPLATEPtr', 'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% int __stdcall DialogBoxParamA ( HINSTANCE , LPCSTR , HWND , DLGPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='DialogBoxParamA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% int __stdcall DialogBoxIndirectParamA ( HINSTANCE , LPCDLGTEMPLATE , HWND , DLGPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='DialogBoxIndirectParamA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'DLGTEMPLATEPtr', 'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall SetDlgItemTextA ( HWND , int , LPCSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='SetDlgItemTextA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% UINT __stdcall GetDlgItemTextA ( HWND , int , LPSTR , int ); 
fcns.thunkname{fcnNum}='uint32voidPtrint32cstringint32Thunk';fcns.name{fcnNum}='GetDlgItemTextA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% LONG __stdcall SendDlgItemMessageA ( HWND , int , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtrint32uint32uint32longThunk';fcns.name{fcnNum}='SendDlgItemMessageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% LRESULT __stdcall DefDlgProcA ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtruint32uint32longThunk';fcns.name{fcnNum}='DefDlgProcA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall CallMsgFilterA ( LPMSG , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CallMsgFilterA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagMSGPtr', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall RegisterClipboardFormatA ( LPCSTR ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='RegisterClipboardFormatA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int __stdcall GetClipboardFormatNameA ( UINT , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32uint32cstringint32Thunk';fcns.name{fcnNum}='GetClipboardFormatNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall CharToOemA ( LPCSTR , LPSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='CharToOemA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall OemToCharA ( LPCSTR , LPSTR ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='OemToCharA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall CharToOemBuffA ( LPCSTR , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32cstringcstringulongThunk';fcns.name{fcnNum}='CharToOemBuffA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall OemToCharBuffA ( LPCSTR , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='int32cstringcstringulongThunk';fcns.name{fcnNum}='OemToCharBuffA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% LPSTR __stdcall CharUpperA ( LPSTR ); 
fcns.thunkname{fcnNum}='cstringcstringThunk';fcns.name{fcnNum}='CharUpperA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall CharUpperBuffA ( LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongcstringulongThunk';fcns.name{fcnNum}='CharUpperBuffA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% LPSTR __stdcall CharLowerA ( LPSTR ); 
fcns.thunkname{fcnNum}='cstringcstringThunk';fcns.name{fcnNum}='CharLowerA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall CharLowerBuffA ( LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongcstringulongThunk';fcns.name{fcnNum}='CharLowerBuffA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% LPSTR __stdcall CharNextA ( LPCSTR ); 
fcns.thunkname{fcnNum}='cstringcstringThunk';fcns.name{fcnNum}='CharNextA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% LPSTR __stdcall CharPrevA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='cstringcstringcstringThunk';fcns.name{fcnNum}='CharPrevA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall IsCharAlphaA ( CHAR ch ); 
fcns.thunkname{fcnNum}='int32int8Thunk';fcns.name{fcnNum}='IsCharAlphaA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8'};fcnNum=fcnNum+1;
% BOOL __stdcall IsCharAlphaNumericA ( CHAR ); 
fcns.thunkname{fcnNum}='int32int8Thunk';fcns.name{fcnNum}='IsCharAlphaNumericA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8'};fcnNum=fcnNum+1;
% BOOL __stdcall IsCharUpperA ( CHAR ); 
fcns.thunkname{fcnNum}='int32int8Thunk';fcns.name{fcnNum}='IsCharUpperA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8'};fcnNum=fcnNum+1;
% BOOL __stdcall IsCharLowerA ( CHAR ); 
fcns.thunkname{fcnNum}='int32int8Thunk';fcns.name{fcnNum}='IsCharLowerA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8'};fcnNum=fcnNum+1;
% int __stdcall GetKeyNameTextA ( LONG , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='GetKeyNameTextA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% SHORT __stdcall VkKeyScanA ( CHAR ); 
fcns.thunkname{fcnNum}='int16int8Thunk';fcns.name{fcnNum}='VkKeyScanA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int8'};fcnNum=fcnNum+1;
% SHORT __stdcall VkKeyScanExA ( CHAR , HKL ); 
fcns.thunkname{fcnNum}='int16int8voidPtrThunk';fcns.name{fcnNum}='VkKeyScanExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int8', 'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall MapVirtualKeyA ( UINT , UINT ); 
fcns.thunkname{fcnNum}='uint32uint32uint32Thunk';fcns.name{fcnNum}='MapVirtualKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% UINT __stdcall MapVirtualKeyExA ( UINT , UINT , HKL ); 
fcns.thunkname{fcnNum}='uint32uint32uint32voidPtrThunk';fcns.name{fcnNum}='MapVirtualKeyExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% HACCEL __stdcall LoadAcceleratorsA ( HINSTANCE , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='LoadAcceleratorsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% HACCEL __stdcall CreateAcceleratorTableA ( LPACCEL , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CreateAcceleratorTableA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagACCELPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall CopyAcceleratorTableA ( HACCEL , LPACCEL , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CopyAcceleratorTableA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagACCELPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall TranslateAcceleratorA ( HWND , HACCEL , LPMSG ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='TranslateAcceleratorA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'tagMSGPtr'};fcnNum=fcnNum+1;
% HMENU __stdcall LoadMenuA ( HINSTANCE , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='LoadMenuA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% HMENU __stdcall LoadMenuIndirectA ( const MENUTEMPLATE *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadMenuIndirectA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ChangeMenuA ( HMENU , UINT , LPCSTR , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32cstringuint32uint32Thunk';fcns.name{fcnNum}='ChangeMenuA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'cstring', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall GetMenuStringA ( HMENU , UINT , LPSTR , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32cstringint32uint32Thunk';fcns.name{fcnNum}='GetMenuStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'cstring', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall InsertMenuA ( HMENU , UINT , UINT , UINT , LPCSTR ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32uint32cstringThunk';fcns.name{fcnNum}='InsertMenuA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'uint32', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall AppendMenuA ( HMENU , UINT , UINT , LPCSTR ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32cstringThunk';fcns.name{fcnNum}='AppendMenuA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall ModifyMenuA ( HMENU , UINT , UINT , UINT , LPCSTR ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32uint32cstringThunk';fcns.name{fcnNum}='ModifyMenuA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'uint32', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall InsertMenuItemA ( HMENU , UINT , BOOL , LPCMENUITEMINFO ); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32voidPtrThunk';fcns.name{fcnNum}='InsertMenuItemA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'int32', 'tagMENUITEMINFOPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetMenuItemInfoA ( HMENU , UINT , BOOL , LPMENUITEMINFO ); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32voidPtrThunk';fcns.name{fcnNum}='GetMenuItemInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'int32', 'tagMENUITEMINFOPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetMenuItemInfoA ( HMENU , UINT , BOOL , LPCMENUITEMINFO ); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32voidPtrThunk';fcns.name{fcnNum}='SetMenuItemInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'int32', 'tagMENUITEMINFOPtr'};fcnNum=fcnNum+1;
% int __stdcall DrawTextA ( HDC , LPCSTR , int , LPRECT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32voidPtruint32Thunk';fcns.name{fcnNum}='DrawTextA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 's_RECTPtr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall DrawTextExA ( HDC , LPSTR , int , LPRECT , UINT , LPDRAWTEXTPARAMS ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='DrawTextExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 's_RECTPtr', 'uint32', 'DRAWTEXTPARAMSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GrayStringA ( HDC , HBRUSH , GRAYSTRINGPROC , LPARAM , int , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongint32int32int32int32int32Thunk';fcns.name{fcnNum}='GrayStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'FcnPtr', 'long', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall DrawStateA ( HDC , HBRUSH , DRAWSTATEPROC , LPARAM , WPARAM , int , int , int , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlonguint32int32int32int32int32uint32Thunk';fcns.name{fcnNum}='DrawStateA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'FcnPtr', 'long', 'uint32', 'int32', 'int32', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% LONG __stdcall TabbedTextOutA ( HDC , int , int , LPCSTR , int , int , LPINT , int ); 
fcns.thunkname{fcnNum}='longvoidPtrint32int32cstringint32int32voidPtrint32Thunk';fcns.name{fcnNum}='TabbedTextOutA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'cstring', 'int32', 'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetTabbedTextExtentA ( HDC , LPCSTR , int , int , LPINT ); 
fcns.thunkname{fcnNum}='ulongvoidPtrcstringint32int32voidPtrThunk';fcns.name{fcnNum}='GetTabbedTextExtentA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetPropA ( HWND , LPCSTR , HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='SetPropA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'voidPtr'};fcnNum=fcnNum+1;
% HANDLE __stdcall GetPropA ( HWND , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='GetPropA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall RemovePropA ( HWND , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='RemovePropA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall EnumPropsExA ( HWND , PROPENUMPROCEX , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumPropsExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% int __stdcall EnumPropsA ( HWND , PROPENUMPROC ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EnumPropsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetWindowTextA ( HWND , LPCSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='SetWindowTextA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall GetWindowTextA ( HWND , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='GetWindowTextA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetWindowTextLengthA ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetWindowTextLengthA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall MessageBoxA ( HWND , LPCSTR , LPCSTR , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringuint32Thunk';fcns.name{fcnNum}='MessageBoxA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall MessageBoxExA ( HWND , LPCSTR , LPCSTR , UINT , WORD ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringuint32uint16Thunk';fcns.name{fcnNum}='MessageBoxExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'uint32', 'uint16'};fcnNum=fcnNum+1;
% int __stdcall MessageBoxIndirectA ( LPMSGBOXPARAMS ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MessageBoxIndirectA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MSGBOXPARAMSPtr'};fcnNum=fcnNum+1;
% LONG __stdcall GetWindowLongA ( HWND , int ); 
fcns.thunkname{fcnNum}='longvoidPtrint32Thunk';fcns.name{fcnNum}='GetWindowLongA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% LONG __stdcall SetWindowLongA ( HWND , int , LONG ); 
fcns.thunkname{fcnNum}='longvoidPtrint32longThunk';fcns.name{fcnNum}='SetWindowLongA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'long'};fcnNum=fcnNum+1;
% DWORD __stdcall GetClassLongA ( HWND , int ); 
fcns.thunkname{fcnNum}='ulongvoidPtrint32Thunk';fcns.name{fcnNum}='GetClassLongA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall SetClassLongA ( HWND , int , LONG ); 
fcns.thunkname{fcnNum}='ulongvoidPtrint32longThunk';fcns.name{fcnNum}='SetClassLongA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'long'};fcnNum=fcnNum+1;
% HWND __stdcall FindWindowA ( LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringcstringThunk';fcns.name{fcnNum}='FindWindowA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% HWND __stdcall FindWindowExA ( HWND , HWND , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrcstringcstringThunk';fcns.name{fcnNum}='FindWindowExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall GetClassNameA ( HWND , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='GetClassNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% HHOOK __stdcall SetWindowsHookExA ( int , HOOKPROC , HINSTANCE , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrint32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='SetWindowsHookExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'FcnPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% HOOKPROC __stdcall SetWindowsHookA ( int , HOOKPROC ); 
fcns.thunkname{fcnNum}='voidPtrint32voidPtrThunk';fcns.name{fcnNum}='SetWindowsHookA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'int32', 'FcnPtr'};fcnNum=fcnNum+1;
% HBITMAP __stdcall LoadBitmapA ( HINSTANCE , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='LoadBitmapA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% HCURSOR __stdcall LoadCursorA ( HINSTANCE , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='LoadCursorA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% HCURSOR __stdcall LoadCursorFromFileA ( LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='LoadCursorFromFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% HICON __stdcall LoadIconA ( HINSTANCE , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='LoadIconA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% HANDLE __stdcall LoadImageA ( HINSTANCE , LPCSTR , UINT , int , int , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringuint32int32int32uint32Thunk';fcns.name{fcnNum}='LoadImageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint32', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall LoadStringA ( HINSTANCE , UINT , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32voidPtruint32cstringint32Thunk';fcns.name{fcnNum}='LoadStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsDialogMessageA ( HWND , LPMSG ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='IsDialogMessageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagMSGPtr'};fcnNum=fcnNum+1;
% int __stdcall DlgDirListA ( HWND , LPSTR , int , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32int32uint32Thunk';fcns.name{fcnNum}='DlgDirListA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DlgDirSelectExA ( HWND , LPSTR , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32int32Thunk';fcns.name{fcnNum}='DlgDirSelectExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% int __stdcall DlgDirListComboBoxA ( HWND , LPSTR , int , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32int32uint32Thunk';fcns.name{fcnNum}='DlgDirListComboBoxA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DlgDirSelectComboBoxExA ( HWND , LPSTR , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32int32Thunk';fcns.name{fcnNum}='DlgDirSelectComboBoxExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% LRESULT __stdcall DefFrameProcA ( HWND , HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtruint32uint32longThunk';fcns.name{fcnNum}='DefFrameProcA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% LRESULT __stdcall DefMDIChildProcA ( HWND , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtruint32uint32longThunk';fcns.name{fcnNum}='DefMDIChildProcA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% HWND __stdcall CreateMDIWindowA ( LPSTR , LPSTR , DWORD , int , int , int , int , HWND , HINSTANCE , LPARAM ); 
fcns.thunkname{fcnNum}='voidPtrcstringcstringulongint32int32int32int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='CreateMDIWindowA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall WinHelpA ( HWND , LPCSTR , UINT , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringuint32ulongThunk';fcns.name{fcnNum}='WinHelpA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint32', 'ulong'};fcnNum=fcnNum+1;
% LONG __stdcall ChangeDisplaySettingsA ( LPDEVMODE , DWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrulongThunk';fcns.name{fcnNum}='ChangeDisplaySettingsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'s_devicemodePtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumDisplaySettingsA ( LPCSTR , DWORD , LPDEVMODE ); 
fcns.thunkname{fcnNum}='int32cstringulongvoidPtrThunk';fcns.name{fcnNum}='EnumDisplaySettingsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'ulong', 's_devicemodePtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SystemParametersInfoA ( UINT , UINT , PVOID , UINT ); 
fcns.thunkname{fcnNum}='int32uint32uint32voidPtruint32Thunk';fcns.name{fcnNum}='SystemParametersInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall AddFontResourceA ( LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='AddFontResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int __stdcall ChoosePixelFormat ( HDC , PIXELFORMATDESCRIPTOR *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ChoosePixelFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPIXELFORMATDESCRIPTORPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetPixelFormat ( HDC , int , PIXELFORMATDESCRIPTOR *); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='SetPixelFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'tagPIXELFORMATDESCRIPTORPtr'};fcnNum=fcnNum+1;
% HMETAFILE __stdcall CopyMetaFileA ( HMETAFILE , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='CopyMetaFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% HFONT __stdcall CreateFontIndirectA ( const LOGFONT *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateFontIndirectA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagLOGFONTPtr'};fcnNum=fcnNum+1;
% HDC __stdcall CreateICA ( LPCSTR , LPCSTR , LPCSTR , const DEVMODE *); 
fcns.thunkname{fcnNum}='voidPtrcstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='CreateICA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 's_devicemodePtr'};fcnNum=fcnNum+1;
% HDC __stdcall CreateMetaFileA ( LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='CreateMetaFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall CreateScalableFontResourceA ( DWORD , LPCSTR , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32ulongcstringcstringcstringThunk';fcns.name{fcnNum}='CreateScalableFontResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall DeviceCapabilitiesA ( LPCSTR , LPCSTR , WORD , LPSTR , const DEVMODE *); 
fcns.thunkname{fcnNum}='int32cstringcstringuint16cstringvoidPtrThunk';fcns.name{fcnNum}='DeviceCapabilitiesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'uint16', 'cstring', 's_devicemodePtr'};fcnNum=fcnNum+1;
% int __stdcall EnumFontFamiliesExA ( HDC , LPLOGFONT , FONTENUMEXPROC , LPARAM , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongulongThunk';fcns.name{fcnNum}='EnumFontFamiliesExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagLOGFONTPtr', 'FcnPtr', 'long', 'ulong'};fcnNum=fcnNum+1;
% int __stdcall EnumFontFamiliesA ( HDC , LPCSTR , FONTENUMPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrlongThunk';fcns.name{fcnNum}='EnumFontFamiliesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% int __stdcall EnumFontsA ( HDC , LPCSTR , ENUMFONTSPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrlongThunk';fcns.name{fcnNum}='EnumFontsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCharWidthA ( HDC , UINT , UINT , LPINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetCharWidthA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCharWidth32A ( HDC , UINT , UINT , LPINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetCharWidth32A'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCharWidthFloatA ( HDC , UINT , UINT , PFLOAT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetCharWidthFloatA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'singlePtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCharABCWidthsA ( HDC , UINT , UINT , LPABC ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetCharABCWidthsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 's_ABCPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCharABCWidthsFloatA ( HDC , UINT , UINT , LPABCFLOAT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetCharABCWidthsFloatA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 's_ABCFLOATPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetGlyphOutlineA ( HDC , UINT , UINT , LPGLYPHMETRICS , DWORD , LPVOID , const MAT2 *); 
fcns.thunkname{fcnNum}='ulongvoidPtruint32uint32voidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetGlyphOutlineA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 's_GLYPHMETRICSPtr', 'ulong', 'voidPtr', 's_MAT2Ptr'};fcnNum=fcnNum+1;
% HMETAFILE __stdcall GetMetaFileA ( LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='GetMetaFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% UINT __stdcall GetOutlineTextMetricsA ( HDC , UINT , LPOUTLINETEXTMETRIC ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetOutlineTextMetricsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 's_OUTLINETEXTMETRICPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetTextExtentPointA ( HDC , LPCSTR , int , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32voidPtrThunk';fcns.name{fcnNum}='GetTextExtentPointA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetTextExtentPoint32A ( HDC , LPCSTR , int , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32voidPtrThunk';fcns.name{fcnNum}='GetTextExtentPoint32A'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetTextExtentExPointA ( HDC , LPCSTR , int , int , LPINT , LPINT , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTextExtentExPointA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 'int32', 'int32Ptr', 'int32Ptr', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetCharacterPlacementA ( HDC , LPCSTR , int , int , LPGCP_RESULTS , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrcstringint32int32voidPtrulongThunk';fcns.name{fcnNum}='GetCharacterPlacementA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 'int32', 'tagGCP_RESULTSPtr', 'ulong'};fcnNum=fcnNum+1;
% HDC __stdcall ResetDCA ( HDC , const DEVMODE *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ResetDCA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 's_devicemodePtr'};fcnNum=fcnNum+1;
% BOOL __stdcall RemoveFontResourceA ( LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='RemoveFontResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% HENHMETAFILE __stdcall CopyEnhMetaFileA ( HENHMETAFILE , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='CopyEnhMetaFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% HDC __stdcall CreateEnhMetaFileA ( HDC , LPCSTR , const RECT *, LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringvoidPtrcstringThunk';fcns.name{fcnNum}='CreateEnhMetaFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 's_RECTPtr', 'cstring'};fcnNum=fcnNum+1;
% HENHMETAFILE __stdcall GetEnhMetaFileA ( LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='GetEnhMetaFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% UINT __stdcall GetEnhMetaFileDescriptionA ( HENHMETAFILE , UINT , LPSTR ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32cstringThunk';fcns.name{fcnNum}='GetEnhMetaFileDescriptionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall GetTextMetricsA ( HDC , LPTEXTMETRIC ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTextMetricsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagTEXTMETRICPtr'};fcnNum=fcnNum+1;
% int __stdcall StartDocA ( HDC , const DOCINFO *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='StartDocA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'DOCINFOPtr'};fcnNum=fcnNum+1;
% int __stdcall GetObjectA ( HGDIOBJ , int , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetObjectA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall TextOutA ( HDC , int , int , LPCSTR , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32cstringint32Thunk';fcns.name{fcnNum}='TextOutA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ExtTextOutA ( HDC , int , int , UINT , const RECT *, LPCSTR , UINT , const INT *); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32uint32voidPtrcstringuint32voidPtrThunk';fcns.name{fcnNum}='ExtTextOutA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'uint32', 's_RECTPtr', 'cstring', 'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall PolyTextOutA ( HDC , const POLYTEXT *, int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PolyTextOutA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_POLYTEXTPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetTextFaceA ( HDC , int , LPSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='GetTextFaceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall GetKerningPairsA ( HDC , DWORD , LPKERNINGPAIR ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetKerningPairsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'tagKERNINGPAIRPtr'};fcnNum=fcnNum+1;
% HCOLORSPACE __stdcall CreateColorSpaceA ( LPLOGCOLORSPACE ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateColorSpaceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagLOGCOLORSPACEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetLogColorSpaceA ( HCOLORSPACE , LPLOGCOLORSPACE , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetLogColorSpaceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagLOGCOLORSPACEPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetICMProfileA ( HDC , DWORD , LPSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrulongcstringThunk';fcns.name{fcnNum}='GetICMProfileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall SetICMProfileA ( HDC , LPSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='SetICMProfileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall UpdateICMRegKeyA ( DWORD , DWORD , LPSTR , UINT ); 
fcns.thunkname{fcnNum}='int32ulongulongcstringuint32Thunk';fcns.name{fcnNum}='UpdateICMRegKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall EnumICMProfilesA ( HDC , ICMENUMPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumICMProfilesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% int __stdcall PropertySheetA ( LPCPROPSHEETHEADER ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PropertySheetA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HIMAGELIST __stdcall ImageList_LoadImageA ( HINSTANCE , LPCSTR , int , int , COLORREF , UINT , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringint32int32ulonguint32uint32Thunk';fcns.name{fcnNum}='ImageList_LoadImageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32', 'int32', 'ulong', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% HWND __stdcall CreateStatusWindowA ( LONG , LPCSTR , HWND , UINT ); 
fcns.thunkname{fcnNum}='voidPtrlongcstringvoidPtruint32Thunk';fcns.name{fcnNum}='CreateStatusWindowA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'long', 'cstring', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% void __stdcall DrawStatusTextA ( HDC , LPRECT , LPCSTR , UINT ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrcstringuint32Thunk';fcns.name{fcnNum}='DrawStatusTextA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'cstring', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetOpenFileNameA ( LPOPENFILENAME ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetOpenFileNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagOFNPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetSaveFileNameA ( LPOPENFILENAME ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetSaveFileNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagOFNPtr'};fcnNum=fcnNum+1;
% short __stdcall GetFileTitleA ( LPCSTR , LPSTR , WORD ); 
fcns.thunkname{fcnNum}='int16cstringcstringuint16Thunk';fcns.name{fcnNum}='GetFileTitleA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'uint16'};fcnNum=fcnNum+1;
% BOOL __stdcall ChooseColorA ( LPCHOOSECOLOR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ChooseColorA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'CHOOSECOLORPtr'};fcnNum=fcnNum+1;
% HWND __stdcall FindTextA ( LPFINDREPLACE ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='FindTextA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'FINDREPLACEPtr'};fcnNum=fcnNum+1;
% HWND __stdcall ReplaceTextA ( LPFINDREPLACE ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ReplaceTextA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'FINDREPLACEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ChooseFontA ( LPCHOOSEFONT ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ChooseFontA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'CHOOSEFONTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PrintDlgA ( LPPRINTDLG ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PrintDlgA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagPDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PageSetupDlgA ( LPPAGESETUPDLG ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PageSetupDlgA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagPSDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CreateProcessA ( LPCSTR , LPSTR , LPSECURITY_ATTRIBUTES , LPSECURITY_ATTRIBUTES , BOOL , DWORD , LPVOID , LPCSTR , LPSTARTUPINFO , LPPROCESS_INFORMATION ); 
fcns.thunkname{fcnNum}='int32cstringcstringvoidPtrvoidPtrint32ulongvoidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateProcessA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 's_SECURITY_ATTRIBUTESPtr', 's_SECURITY_ATTRIBUTESPtr', 'int32', 'ulong', 'voidPtr', 'cstring', 's_STARTUPINFOPtr', 's_PROCESS_INFORMATIONPtr'};fcnNum=fcnNum+1;
% void __stdcall GetStartupInfoA ( LPSTARTUPINFO ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GetStartupInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_STARTUPINFOPtr'};fcnNum=fcnNum+1;
% HANDLE __stdcall FindFirstFileA ( LPCSTR , LPWIN32_FIND_DATA ); 
fcns.thunkname{fcnNum}='voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='FindFirstFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 's_WIN32_FIND_DATAPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FindNextFileA ( HANDLE , LPWIN32_FIND_DATA ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FindNextFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_WIN32_FIND_DATAPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetVersionExA ( LPOSVERSIONINFO ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetVersionExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_OSVERSIONINFOPtr'};fcnNum=fcnNum+1;
% HDC __stdcall CreateDCA ( LPCSTR , LPCSTR , LPCSTR , const DEVMODE *); 
fcns.thunkname{fcnNum}='voidPtrcstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='CreateDCA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 's_devicemodePtr'};fcnNum=fcnNum+1;
% DWORD __stdcall VerInstallFileA ( DWORD , LPSTR , LPSTR , LPSTR , LPSTR , LPSTR , LPSTR , PUINT ); 
fcns.thunkname{fcnNum}='ulongulongcstringcstringcstringcstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='VerInstallFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'cstring', 'cstring', 'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetFileVersionInfoSizeA ( LPSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongcstringvoidPtrThunk';fcns.name{fcnNum}='GetFileVersionInfoSizeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetFileVersionInfoA ( LPSTR , DWORD , DWORD , LPVOID ); 
fcns.thunkname{fcnNum}='int32cstringulongulongvoidPtrThunk';fcns.name{fcnNum}='GetFileVersionInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall VerLanguageNameA ( DWORD , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongcstringulongThunk';fcns.name{fcnNum}='VerLanguageNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall VerFindFileA ( DWORD , LPSTR , LPSTR , LPSTR , LPSTR , PUINT , LPSTR , PUINT ); 
fcns.thunkname{fcnNum}='ulongulongcstringcstringcstringcstringvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='VerFindFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'cstring', 'cstring', 'uint32Ptr', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegConnectRegistryA ( LPSTR , HKEY , PHKEY ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegConnectRegistryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'voidPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegCreateKeyA ( HKEY , LPCSTR , PHKEY ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='RegCreateKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'voidPtrPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegCreateKeyExA ( HKEY , LPCSTR , DWORD , LPSTR , DWORD , REGSAM , LPSECURITY_ATTRIBUTES , PHKEY , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringulongcstringulongulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegCreateKeyExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong', 'cstring', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr', 'voidPtrPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegDeleteKeyA ( HKEY , LPCSTR ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='RegDeleteKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% LONG __stdcall RegDeleteValueA ( HKEY , LPCSTR ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='RegDeleteValueA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% LONG __stdcall RegEnumKeyA ( HKEY , DWORD , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrulongcstringulongThunk';fcns.name{fcnNum}='RegEnumKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% LONG __stdcall RegEnumKeyExA ( HKEY , DWORD , LPSTR , LPDWORD , LPDWORD , LPSTR , LPDWORD , PFILETIME ); 
fcns.thunkname{fcnNum}='longvoidPtrulongcstringvoidPtrvoidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegEnumKeyExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'cstring', 'uint32Ptr', 'uint32Ptr', 'cstring', 'uint32Ptr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegEnumValueA ( HKEY , DWORD , LPSTR , LPDWORD , LPDWORD , LPDWORD , LPBYTE , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrulongcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegEnumValueA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'cstring', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint8Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegLoadKeyA ( HKEY , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringThunk';fcns.name{fcnNum}='RegLoadKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% LONG __stdcall RegOpenKeyA ( HKEY , LPCSTR , PHKEY ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='RegOpenKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'voidPtrPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegOpenKeyExA ( HKEY , LPCSTR , DWORD , REGSAM , PHKEY ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringulongulongvoidPtrThunk';fcns.name{fcnNum}='RegOpenKeyExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong', 'ulong', 'voidPtrPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegQueryInfoKeyA ( HKEY , LPSTR , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPDWORD , LPDWORD , PFILETIME ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegQueryInfoKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegQueryValueA ( HKEY , LPCSTR , LPSTR , PLONG ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringvoidPtrThunk';fcns.name{fcnNum}='RegQueryValueA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegQueryMultipleValuesA ( HKEY , PVALENT , DWORD , LPSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrulongcstringvoidPtrThunk';fcns.name{fcnNum}='RegQueryMultipleValuesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'value_entPtr', 'ulong', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegQueryValueExA ( HKEY , LPCSTR , LPDWORD , LPDWORD , LPBYTE , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegQueryValueExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint32Ptr', 'uint32Ptr', 'uint8Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegReplaceKeyA ( HKEY , LPCSTR , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringcstringThunk';fcns.name{fcnNum}='RegReplaceKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% LONG __stdcall RegRestoreKeyA ( HKEY , LPCSTR , DWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringulongThunk';fcns.name{fcnNum}='RegRestoreKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% LONG __stdcall RegSaveKeyA ( HKEY , LPCSTR , LPSECURITY_ATTRIBUTES ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='RegSaveKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegSetValueA ( HKEY , LPCSTR , DWORD , LPCSTR , DWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringulongcstringulongThunk';fcns.name{fcnNum}='RegSetValueA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% LONG __stdcall RegSetValueExA ( HKEY , LPCSTR , DWORD , DWORD , const BYTE *, DWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringulongulongvoidPtrulongThunk';fcns.name{fcnNum}='RegSetValueExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong', 'ulong', 'uint8Ptr', 'ulong'};fcnNum=fcnNum+1;
% LONG __stdcall RegUnLoadKeyA ( HKEY , LPCSTR ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='RegUnLoadKeyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall InitiateSystemShutdownA ( LPSTR , LPSTR , DWORD , BOOL , BOOL ); 
fcns.thunkname{fcnNum}='int32cstringcstringulongint32int32Thunk';fcns.name{fcnNum}='InitiateSystemShutdownA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall AbortSystemShutdownA ( LPSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='AbortSystemShutdownA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int __stdcall CompareStringA ( LCID , DWORD , LPCSTR , int , LPCSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongcstringint32cstringint32Thunk';fcns.name{fcnNum}='CompareStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int __stdcall LCMapStringA ( LCID , DWORD , LPCSTR , int , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongcstringint32cstringint32Thunk';fcns.name{fcnNum}='LCMapStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetLocaleInfoA ( LCID , LCTYPE , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongcstringint32Thunk';fcns.name{fcnNum}='GetLocaleInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetLocaleInfoA ( LCID , LCTYPE , LPCSTR ); 
fcns.thunkname{fcnNum}='int32ulongulongcstringThunk';fcns.name{fcnNum}='SetLocaleInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall GetTimeFormatA ( LCID , DWORD , const SYSTEMTIME *, LPCSTR , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrcstringcstringint32Thunk';fcns.name{fcnNum}='GetTimeFormatA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 's_SYSTEMTIMEPtr', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetDateFormatA ( LCID , DWORD , const SYSTEMTIME *, LPCSTR , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongvoidPtrcstringcstringint32Thunk';fcns.name{fcnNum}='GetDateFormatA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 's_SYSTEMTIMEPtr', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetNumberFormatA ( LCID , DWORD , LPCSTR , const NUMBERFMT *, LPSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongcstringvoidPtrcstringint32Thunk';fcns.name{fcnNum}='GetNumberFormatA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 's_numberfmtPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetCurrencyFormatA ( LCID , DWORD , LPCSTR , const CURRENCYFMT *, LPSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongulongcstringvoidPtrcstringint32Thunk';fcns.name{fcnNum}='GetCurrencyFormatA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 's_currencyfmtPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumCalendarInfoA ( CALINFO_ENUMPROC , LCID , CALID , CALTYPE ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongThunk';fcns.name{fcnNum}='EnumCalendarInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumTimeFormatsA ( TIMEFMT_ENUMPROC , LCID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='EnumTimeFormatsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumDateFormatsA ( DATEFMT_ENUMPROC , LCID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='EnumDateFormatsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetStringTypeExA ( LCID , DWORD , LPCSTR , int , LPWORD ); 
fcns.thunkname{fcnNum}='int32ulongulongcstringint32voidPtrThunk';fcns.name{fcnNum}='GetStringTypeExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetStringTypeA ( LCID , DWORD , LPCSTR , int , LPWORD ); 
fcns.thunkname{fcnNum}='int32ulongulongcstringint32voidPtrThunk';fcns.name{fcnNum}='GetStringTypeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% int __stdcall FoldStringA ( DWORD , LPCSTR , int , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32ulongcstringint32cstringint32Thunk';fcns.name{fcnNum}='FoldStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumSystemLocalesA ( LOCALE_ENUMPROC , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='EnumSystemLocalesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumSystemCodePagesA ( CODEPAGE_ENUMPROC , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='EnumSystemCodePagesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall PeekConsoleInputA ( HANDLE , PINPUT_RECORD , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrPINPUT_RECORDulongvoidPtrThunk';fcns.name{fcnNum}='PeekConsoleInputA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'error', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadConsoleInputA ( HANDLE , PINPUT_RECORD , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrPINPUT_RECORDulongvoidPtrThunk';fcns.name{fcnNum}='ReadConsoleInputA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'error', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteConsoleInputA ( HANDLE , const INPUT_RECORD *, DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='WriteConsoleInputA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadConsoleOutputA ( HANDLE , PCHAR_INFO , COORD , COORD , PSMALL_RECT ); 
fcns.thunkname{fcnNum}='int32voidPtrPCHAR_INFOCOORDCOORDvoidPtrThunk';fcns.name{fcnNum}='ReadConsoleOutputA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'error', 's_COORD', 's_COORD', 's_SMALL_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteConsoleOutputA ( HANDLE , const CHAR_INFO *, COORD , COORD , PSMALL_RECT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrCOORDCOORDvoidPtrThunk';fcns.name{fcnNum}='WriteConsoleOutputA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 's_COORD', 's_COORD', 's_SMALL_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadConsoleOutputCharacterA ( HANDLE , LPSTR , DWORD , COORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringulongCOORDvoidPtrThunk';fcns.name{fcnNum}='ReadConsoleOutputCharacterA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong', 's_COORD', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteConsoleOutputCharacterA ( HANDLE , LPCSTR , DWORD , COORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringulongCOORDvoidPtrThunk';fcns.name{fcnNum}='WriteConsoleOutputCharacterA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong', 's_COORD', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall FillConsoleOutputCharacterA ( HANDLE , CHAR , DWORD , COORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint8ulongCOORDvoidPtrThunk';fcns.name{fcnNum}='FillConsoleOutputCharacterA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int8', 'ulong', 's_COORD', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ScrollConsoleScreenBufferA ( HANDLE , const SMALL_RECT *, const SMALL_RECT *, COORD , const CHAR_INFO *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrCOORDvoidPtrThunk';fcns.name{fcnNum}='ScrollConsoleScreenBufferA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_SMALL_RECTPtr', 's_SMALL_RECTPtr', 's_COORD', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetConsoleTitleA ( LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongcstringulongThunk';fcns.name{fcnNum}='GetConsoleTitleA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleTitleA ( LPCSTR ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='SetConsoleTitleA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadConsoleA ( HANDLE , LPVOID , DWORD , LPDWORD , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ReadConsoleA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteConsoleA ( HANDLE , const void *, DWORD , LPDWORD , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteConsoleA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetAddConnectionA ( LPCSTR , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='ulongcstringcstringcstringThunk';fcns.name{fcnNum}='WNetAddConnectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetAddConnection2A ( LPNETRESOURCE , LPCSTR , LPCSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrcstringcstringulongThunk';fcns.name{fcnNum}='WNetAddConnection2A'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_NETRESOURCEPtr', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetAddConnection3A ( HWND , LPNETRESOURCE , LPCSTR , LPCSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrcstringcstringulongThunk';fcns.name{fcnNum}='WNetAddConnection3A'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 's_NETRESOURCEPtr', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetCancelConnectionA ( LPCSTR , BOOL ); 
fcns.thunkname{fcnNum}='ulongcstringint32Thunk';fcns.name{fcnNum}='WNetCancelConnectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetCancelConnection2A ( LPCSTR , DWORD , BOOL ); 
fcns.thunkname{fcnNum}='ulongcstringulongint32Thunk';fcns.name{fcnNum}='WNetCancelConnection2A'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetConnectionA ( LPCSTR , LPSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongcstringcstringvoidPtrThunk';fcns.name{fcnNum}='WNetGetConnectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetUseConnectionA ( HWND , LPNETRESOURCE , LPCSTR , LPCSTR , DWORD , LPSTR , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrcstringcstringulongcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetUseConnectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 's_NETRESOURCEPtr', 'cstring', 'cstring', 'ulong', 'cstring', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetSetConnectionA ( LPCSTR , DWORD , LPVOID ); 
fcns.thunkname{fcnNum}='ulongcstringulongvoidPtrThunk';fcns.name{fcnNum}='WNetSetConnectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetConnectionDialog1A ( LPCONNECTDLGSTRUCT ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='WNetConnectionDialog1A'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_CONNECTDLGSTRUCTPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetDisconnectDialog1A ( LPDISCDLGSTRUCT ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='WNetDisconnectDialog1A'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_DISCDLGSTRUCTPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetOpenEnumA ( DWORD , DWORD , DWORD , LPNETRESOURCE , LPHANDLE ); 
fcns.thunkname{fcnNum}='ulongulongulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetOpenEnumA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 's_NETRESOURCEPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetEnumResourceA ( HANDLE , LPDWORD , LPVOID , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetEnumResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetUniversalNameA ( LPCSTR , DWORD , LPVOID , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongcstringulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WNetGetUniversalNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'ulong', 'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetUserA ( LPCSTR , LPSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongcstringcstringvoidPtrThunk';fcns.name{fcnNum}='WNetGetUserA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetProviderNameA ( DWORD , LPSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongulongcstringvoidPtrThunk';fcns.name{fcnNum}='WNetGetProviderNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetNetworkInformationA ( LPCSTR , LPNETINFOSTRUCT ); 
fcns.thunkname{fcnNum}='ulongcstringvoidPtrThunk';fcns.name{fcnNum}='WNetGetNetworkInformationA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 's_NETINFOSTRUCTPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetGetLastErrorA ( LPDWORD , LPSTR , DWORD , LPSTR , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrcstringulongcstringulongThunk';fcns.name{fcnNum}='WNetGetLastErrorA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint32Ptr', 'cstring', 'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall MultinetGetConnectionPerformanceA ( LPNETRESOURCE , LPNETCONNECTINFOSTRUCT ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MultinetGetConnectionPerformanceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_NETRESOURCEPtr', 's_NETCONNECTINFOSTRUCTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ChangeServiceConfigA ( SC_HANDLE , DWORD , DWORD , DWORD , LPCSTR , LPCSTR , LPDWORD , LPCSTR , LPCSTR , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongcstringcstringvoidPtrcstringcstringcstringcstringThunk';fcns.name{fcnNum}='ChangeServiceConfigA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'cstring', 'cstring', 'uint32Ptr', 'cstring', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% SC_HANDLE __stdcall CreateServiceA ( SC_HANDLE , LPCSTR , LPCSTR , DWORD , DWORD , DWORD , DWORD , LPCSTR , LPCSTR , LPDWORD , LPCSTR , LPCSTR , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringcstringulongulongulongulongcstringcstringvoidPtrcstringcstringcstringThunk';fcns.name{fcnNum}='CreateServiceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'ulong', 'ulong', 'ulong', 'ulong', 'cstring', 'cstring', 'uint32Ptr', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumDependentServicesA ( SC_HANDLE , DWORD , LPENUM_SERVICE_STATUS , DWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EnumDependentServicesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 's_ENUM_SERVICE_STATUSPtr', 'ulong', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumServicesStatusA ( SC_HANDLE , DWORD , DWORD , LPENUM_SERVICE_STATUS , DWORD , LPDWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EnumServicesStatusA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 's_ENUM_SERVICE_STATUSPtr', 'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetServiceKeyNameA ( SC_HANDLE , LPCSTR , LPSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringvoidPtrThunk';fcns.name{fcnNum}='GetServiceKeyNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetServiceDisplayNameA ( SC_HANDLE , LPCSTR , LPSTR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringvoidPtrThunk';fcns.name{fcnNum}='GetServiceDisplayNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% SC_HANDLE __stdcall OpenSCManagerA ( LPCSTR , LPCSTR , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrcstringcstringulongThunk';fcns.name{fcnNum}='OpenSCManagerA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% SC_HANDLE __stdcall OpenServiceA ( SC_HANDLE , LPCSTR , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringulongThunk';fcns.name{fcnNum}='OpenServiceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall QueryServiceConfigA ( SC_HANDLE , LPQUERY_SERVICE_CONFIG , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='QueryServiceConfigA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_QUERY_SERVICE_CONFIGPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall QueryServiceLockStatusA ( SC_HANDLE , LPQUERY_SERVICE_LOCK_STATUS , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='QueryServiceLockStatusA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_QUERY_SERVICE_LOCK_STATUSPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% SERVICE_STATUS_HANDLE __stdcall RegisterServiceCtrlHandlerA ( LPCSTR , LPHANDLER_FUNCTION ); 
fcns.thunkname{fcnNum}='ulongcstringvoidPtrThunk';fcns.name{fcnNum}='RegisterServiceCtrlHandlerA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'FcnPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall StartServiceCtrlDispatcherA ( LPSERVICE_TABLE_ENTRY ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='StartServiceCtrlDispatcherA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SERVICE_TABLE_ENTRYPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall StartServiceA ( SC_HANDLE , DWORD , LPCSTR *); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='StartServiceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'cstringPtr'};fcnNum=fcnNum+1;
% BOOL AbnormalTermination ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='AbnormalTermination'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int __stdcall AbortDoc ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='AbortDoc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL AbortPrinter ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='AbortPrinter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AbortProc ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='AbortProc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% LONG __stdcall InterlockedIncrement ( LPLONG ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='InterlockedIncrement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% LONG __stdcall InterlockedDecrement ( LPLONG ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='InterlockedDecrement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% LONG __stdcall InterlockedExchange ( LPLONG , LONG ); 
fcns.thunkname{fcnNum}='longvoidPtrlongThunk';fcns.name{fcnNum}='InterlockedExchange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall FreeResource ( HGLOBAL ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FreeResource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% LPVOID __stdcall LockResource ( HGLOBAL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LockResource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall WinMain ( HINSTANCE , HINSTANCE , LPSTR , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='WinMain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall FreeLibrary ( HINSTANCE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FreeLibrary'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void __stdcall FreeLibraryAndExitThread ( HMODULE , DWORD ); 
fcns.thunkname{fcnNum}='voidvoidPtrulongThunk';fcns.name{fcnNum}='FreeLibraryAndExitThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall DisableThreadLibraryCalls ( HMODULE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DisableThreadLibraryCalls'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% FARPROC __stdcall GetProcAddress ( HINSTANCE , LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='GetProcAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% DWORD __stdcall GetVersion ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HGLOBAL __stdcall GlobalAlloc ( UINT , DWORD ); 
fcns.thunkname{fcnNum}='voidPtruint32ulongThunk';fcns.name{fcnNum}='GlobalAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint32', 'ulong'};fcnNum=fcnNum+1;
% HGLOBAL GlobalDiscard ( HGLOBAL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GlobalDiscard'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HGLOBAL __stdcall GlobalReAlloc ( HGLOBAL , DWORD , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulonguint32Thunk';fcns.name{fcnNum}='GlobalReAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint32'};fcnNum=fcnNum+1;
% DWORD __stdcall GlobalSize ( HGLOBAL ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GlobalSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GlobalFlags ( HGLOBAL ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GlobalFlags'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% LPVOID __stdcall GlobalLock ( HGLOBAL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GlobalLock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HGLOBAL __stdcall GlobalHandle ( LPCVOID ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GlobalHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GlobalUnlock ( HGLOBAL ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GlobalUnlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HGLOBAL __stdcall GlobalFree ( HGLOBAL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GlobalFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GlobalCompact ( DWORD ); 
fcns.thunkname{fcnNum}='uint32ulongThunk';fcns.name{fcnNum}='GlobalCompact'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% void __stdcall GlobalFix ( HGLOBAL ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GlobalFix'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void __stdcall GlobalUnfix ( HGLOBAL ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GlobalUnfix'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% LPVOID __stdcall GlobalWire ( HGLOBAL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GlobalWire'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GlobalUnWire ( HGLOBAL ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GlobalUnWire'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void __stdcall GlobalMemoryStatus ( LPMEMORYSTATUS ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GlobalMemoryStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_MEMORYSTATUSPtr'};fcnNum=fcnNum+1;
% HLOCAL __stdcall LocalAlloc ( UINT , UINT ); 
fcns.thunkname{fcnNum}='voidPtruint32uint32Thunk';fcns.name{fcnNum}='LocalAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% HLOCAL LocalDiscard ( HLOCAL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LocalDiscard'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HLOCAL __stdcall LocalReAlloc ( HLOCAL , UINT , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='LocalReAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% LPVOID __stdcall LocalLock ( HLOCAL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LocalLock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HLOCAL __stdcall LocalHandle ( LPCVOID ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LocalHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall LocalUnlock ( HLOCAL ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='LocalUnlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall LocalSize ( HLOCAL ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='LocalSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall LocalFlags ( HLOCAL ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='LocalFlags'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HLOCAL __stdcall LocalFree ( HLOCAL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LocalFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall LocalShrink ( HLOCAL , UINT ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='LocalShrink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% UINT __stdcall LocalCompact ( UINT ); 
fcns.thunkname{fcnNum}='uint32uint32Thunk';fcns.name{fcnNum}='LocalCompact'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall FlushInstructionCache ( HANDLE , LPCVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='FlushInstructionCache'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% LPVOID __stdcall VirtualAlloc ( LPVOID , DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongulongThunk';fcns.name{fcnNum}='VirtualAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall VirtualFree ( LPVOID , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='VirtualFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall VirtualProtect ( LPVOID , DWORD , DWORD , PDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='VirtualProtect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall VirtualQuery ( LPCVOID , PMEMORY_BASIC_INFORMATION , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='VirtualQuery'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 's_MEMORY_BASIC_INFORMATIONPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall VirtualProtectEx ( HANDLE , LPVOID , DWORD , DWORD , PDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='VirtualProtectEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall VirtualQueryEx ( HANDLE , LPCVOID , PMEMORY_BASIC_INFORMATION , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='VirtualQueryEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 's_MEMORY_BASIC_INFORMATIONPtr', 'ulong'};fcnNum=fcnNum+1;
% HANDLE __stdcall HeapCreate ( DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrulongulongulongThunk';fcns.name{fcnNum}='HeapCreate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall HeapDestroy ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='HeapDestroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% LPVOID __stdcall HeapAlloc ( HANDLE , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='HeapAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% LPVOID __stdcall HeapReAlloc ( HANDLE , DWORD , LPVOID , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongvoidPtrulongThunk';fcns.name{fcnNum}='HeapReAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall HeapFree ( HANDLE , DWORD , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='HeapFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall HeapSize ( HANDLE , DWORD , LPCVOID ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='HeapSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall HeapValidate ( HANDLE , DWORD , LPCVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='HeapValidate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall HeapCompact ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='HeapCompact'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% HANDLE __stdcall GetProcessHeap ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetProcessHeap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall GetProcessHeaps ( DWORD , PHANDLE ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetProcessHeaps'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'voidPtrPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetProcessVersion ( DWORD ); 
fcns.thunkname{fcnNum}='ulongulongThunk';fcns.name{fcnNum}='GetProcessVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall HeapLock ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='HeapLock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall HeapUnlock ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='HeapUnlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall HeapWalk ( HANDLE , LPPROCESS_HEAP_ENTRY ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='HeapWalk'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_PROCESS_HEAP_ENTRYPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetProcessAffinityMask ( HANDLE , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessAffinityMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetProcessTimes ( HANDLE , LPFILETIME , LPFILETIME , LPFILETIME , LPFILETIME ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetProcessWorkingSetSize ( HANDLE , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessWorkingSetSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetProcessWorkingSetSize ( HANDLE , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='SetProcessWorkingSetSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% HANDLE __stdcall OpenProcess ( DWORD , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrulongint32ulongThunk';fcns.name{fcnNum}='OpenProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
% HANDLE __stdcall GetCurrentProcess ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetCurrentProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall GetCurrentProcessId ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetCurrentProcessId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void __stdcall ExitProcess ( UINT ); 
fcns.thunkname{fcnNum}='voiduint32Thunk';fcns.name{fcnNum}='ExitProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall TerminateProcess ( HANDLE , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='TerminateProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetExitCodeProcess ( HANDLE , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetExitCodeProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% void __stdcall FatalExit ( int ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='FatalExit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% LPTSTR __stdcall GetEnvironmentStringsA ( void ); 
fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='GetEnvironmentStringsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void __stdcall RaiseException ( DWORD , DWORD , DWORD , const DWORD *); 
fcns.thunkname{fcnNum}='voidulongulongulongvoidPtrThunk';fcns.name{fcnNum}='RaiseException'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall UnhandledExceptionFilter ( struct _EXCEPTION_POINTERS *); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='UnhandledExceptionFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'s_EXCEPTION_POINTERSPtr'};fcnNum=fcnNum+1;
% LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter ( LPTOP_LEVEL_EXCEPTION_FILTER ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetUnhandledExceptionFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateThread ( LPSECURITY_ATTRIBUTES , DWORD , LPTHREAD_START_ROUTINE , LPVOID , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='CreateThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'ulong', 'FcnPtr', 'voidPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateRemoteThread ( HANDLE , LPSECURITY_ATTRIBUTES , DWORD , LPTHREAD_START_ROUTINE , LPVOID , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='CreateRemoteThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'FcnPtr', 'voidPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall GetCurrentThread ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetCurrentThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall GetCurrentThreadId ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetCurrentThreadId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall SetThreadAffinityMask ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='SetThreadAffinityMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetThreadPriority ( HANDLE , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetThreadPriority'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetThreadPriority ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetThreadPriority'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetThreadTimes ( HANDLE , LPFILETIME , LPFILETIME , LPFILETIME , LPFILETIME ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetThreadTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% void __stdcall ExitThread ( DWORD ); 
fcns.thunkname{fcnNum}='voidulongThunk';fcns.name{fcnNum}='ExitThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall TerminateThread ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='TerminateThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetExitCodeThread ( HANDLE , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetExitCodeThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetThreadSelectorEntry ( HANDLE , DWORD , LPLDT_ENTRY ); 
fcns.thunkname{fcnNum}='int32voidPtrulongLPLDT_ENTRYThunk';fcns.name{fcnNum}='GetThreadSelectorEntry'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'error'};fcnNum=fcnNum+1;
% DWORD __stdcall GetLastError ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetLastError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void __stdcall SetLastError ( DWORD ); 
fcns.thunkname{fcnNum}='voidulongThunk';fcns.name{fcnNum}='SetLastError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetOverlappedResult ( HANDLE , LPOVERLAPPED , LPDWORD , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetOverlappedResult'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_OVERLAPPEDPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% HANDLE __stdcall CreateIoCompletionPort ( HANDLE , HANDLE , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='CreateIoCompletionPort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetQueuedCompletionStatus ( HANDLE , LPDWORD , LPDWORD , LPOVERLAPPED *, DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetQueuedCompletionStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 's_OVERLAPPEDPtrPtr', 'ulong'};fcnNum=fcnNum+1;
% UINT __stdcall SetErrorMode ( UINT ); 
fcns.thunkname{fcnNum}='uint32uint32Thunk';fcns.name{fcnNum}='SetErrorMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadProcessMemory ( HANDLE , LPCVOID , LPVOID , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='ReadProcessMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteProcessMemory ( HANDLE , LPVOID , LPVOID , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='WriteProcessMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetThreadContext ( HANDLE , LPCONTEXT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetThreadContext'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_CONTEXTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetThreadContext ( HANDLE , const CONTEXT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetThreadContext'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_CONTEXTPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall SuspendThread ( HANDLE ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='SuspendThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall ResumeThread ( HANDLE ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='ResumeThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void __stdcall DebugBreak ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DebugBreak'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall WaitForDebugEvent ( LPDEBUG_EVENT , DWORD ); 
fcns.thunkname{fcnNum}='int32LPDEBUG_EVENTulongThunk';fcns.name{fcnNum}='WaitForDebugEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall ContinueDebugEvent ( DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32ulongulongulongThunk';fcns.name{fcnNum}='ContinueDebugEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall DebugActiveProcess ( DWORD ); 
fcns.thunkname{fcnNum}='int32ulongThunk';fcns.name{fcnNum}='DebugActiveProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% void __stdcall InitializeCriticalSection ( LPCRITICAL_SECTION ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='InitializeCriticalSection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_CRITICAL_SECTIONPtr'};fcnNum=fcnNum+1;
% void __stdcall EnterCriticalSection ( LPCRITICAL_SECTION ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='EnterCriticalSection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_CRITICAL_SECTIONPtr'};fcnNum=fcnNum+1;
% void __stdcall LeaveCriticalSection ( LPCRITICAL_SECTION ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='LeaveCriticalSection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_CRITICAL_SECTIONPtr'};fcnNum=fcnNum+1;
% void __stdcall DeleteCriticalSection ( LPCRITICAL_SECTION ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DeleteCriticalSection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_CRITICAL_SECTIONPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetEvent ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ResetEvent ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ResetEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PulseEvent ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PulseEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReleaseSemaphore ( HANDLE , LONG , LPLONG ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ReleaseSemaphore'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'longPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReleaseMutex ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ReleaseMutex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall WaitForSingleObject ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='WaitForSingleObject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall WaitForMultipleObjects ( DWORD , const HANDLE *, BOOL , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrint32ulongThunk';fcns.name{fcnNum}='WaitForMultipleObjects'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'voidPtrPtr', 'int32', 'ulong'};fcnNum=fcnNum+1;
% void __stdcall Sleep ( DWORD ); 
fcns.thunkname{fcnNum}='voidulongThunk';fcns.name{fcnNum}='Sleep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% HGLOBAL __stdcall LoadResource ( HINSTANCE , HRSRC ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadResource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall SizeofResource ( HINSTANCE , HRSRC ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SizeofResource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% ATOM __stdcall GlobalDeleteAtom ( ATOM ); 
fcns.thunkname{fcnNum}='uint16uint16Thunk';fcns.name{fcnNum}='GlobalDeleteAtom'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% BOOL __stdcall InitAtomTable ( DWORD ); 
fcns.thunkname{fcnNum}='int32ulongThunk';fcns.name{fcnNum}='InitAtomTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% ATOM __stdcall DeleteAtom ( ATOM ); 
fcns.thunkname{fcnNum}='uint16uint16Thunk';fcns.name{fcnNum}='DeleteAtom'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% UINT __stdcall SetHandleCount ( UINT ); 
fcns.thunkname{fcnNum}='uint32uint32Thunk';fcns.name{fcnNum}='SetHandleCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetLogicalDrives ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetLogicalDrives'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall LockFile ( HANDLE , DWORD , DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongulongThunk';fcns.name{fcnNum}='LockFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall UnlockFile ( HANDLE , DWORD , DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongulongThunk';fcns.name{fcnNum}='UnlockFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall LockFileEx ( HANDLE , DWORD , DWORD , DWORD , DWORD , LPOVERLAPPED ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='LockFileEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall UnlockFileEx ( HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongvoidPtrThunk';fcns.name{fcnNum}='UnlockFileEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetFileInformationByHandle ( HANDLE , LPBY_HANDLE_FILE_INFORMATION ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFileInformationByHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_BY_HANDLE_FILE_INFORMATIONPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetFileType ( HANDLE ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetFileType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetFileSize ( HANDLE , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFileSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% HANDLE __stdcall GetStdHandle ( DWORD ); 
fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='GetStdHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetStdHandle ( DWORD , HANDLE ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrThunk';fcns.name{fcnNum}='SetStdHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteFile ( HANDLE , LPCVOID , DWORD , LPDWORD , LPOVERLAPPED ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadFile ( HANDLE , LPVOID , DWORD , LPDWORD , LPOVERLAPPED ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ReadFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FlushFileBuffers ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FlushFileBuffers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DeviceIoControl ( HANDLE , DWORD , LPVOID , DWORD , LPVOID , DWORD , LPDWORD , LPOVERLAPPED ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DeviceIoControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'ulong', 'voidPtr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetEndOfFile ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetEndOfFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall SetFilePointer ( HANDLE , LONG , PLONG , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrlongvoidPtrulongThunk';fcns.name{fcnNum}='SetFilePointer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall FindClose ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FindClose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetFileTime ( HANDLE , LPFILETIME , LPFILETIME , LPFILETIME ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetFileTime ( HANDLE , const FILETIME *, const FILETIME *, const FILETIME *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SetFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CloseHandle ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CloseHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DuplicateHandle ( HANDLE , HANDLE , HANDLE , LPHANDLE , DWORD , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrulongint32ulongThunk';fcns.name{fcnNum}='DuplicateHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'voidPtrPtr', 'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetHandleInformation ( HANDLE , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetHandleInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetHandleInformation ( HANDLE , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='SetHandleInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall LoadModule ( LPCSTR , LPVOID ); 
fcns.thunkname{fcnNum}='ulongcstringvoidPtrThunk';fcns.name{fcnNum}='LoadModule'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'cstring', 'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall WinExec ( LPCSTR , UINT ); 
fcns.thunkname{fcnNum}='uint32cstringuint32Thunk';fcns.name{fcnNum}='WinExec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall ClearCommBreak ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ClearCommBreak'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ClearCommError ( HANDLE , LPDWORD , LPCOMSTAT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrLPCOMSTATThunk';fcns.name{fcnNum}='ClearCommError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'error'};fcnNum=fcnNum+1;
% BOOL __stdcall SetupComm ( HANDLE , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='SetupComm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EscapeCommFunction ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='EscapeCommFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCommConfig ( HANDLE , LPCOMMCONFIG , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCommConfig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_COMM_CONFIGPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCommMask ( HANDLE , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCommMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCommProperties ( HANDLE , LPCOMMPROP ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCommProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_COMMPROPPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCommModemStatus ( HANDLE , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCommModemStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCommState ( HANDLE , LPDCB ); 
fcns.thunkname{fcnNum}='int32voidPtrLPDCBThunk';fcns.name{fcnNum}='GetCommState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'error'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCommTimeouts ( HANDLE , LPCOMMTIMEOUTS ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCommTimeouts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_COMMTIMEOUTSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PurgeComm ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='PurgeComm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetCommBreak ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetCommBreak'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetCommConfig ( HANDLE , LPCOMMCONFIG , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='SetCommConfig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_COMM_CONFIGPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetCommMask ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetCommMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetCommState ( HANDLE , LPDCB ); 
fcns.thunkname{fcnNum}='int32voidPtrLPDCBThunk';fcns.name{fcnNum}='SetCommState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'error'};fcnNum=fcnNum+1;
% BOOL __stdcall SetCommTimeouts ( HANDLE , LPCOMMTIMEOUTS ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetCommTimeouts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_COMMTIMEOUTSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall TransmitCommChar ( HANDLE , char ); 
fcns.thunkname{fcnNum}='int32voidPtrint8Thunk';fcns.name{fcnNum}='TransmitCommChar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int8'};fcnNum=fcnNum+1;
% BOOL __stdcall WaitCommEvent ( HANDLE , LPDWORD , LPOVERLAPPED ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WaitCommEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall SetTapePosition ( HANDLE , DWORD , DWORD , DWORD , DWORD , BOOL ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongulongulongulongint32Thunk';fcns.name{fcnNum}='SetTapePosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetTapePosition ( HANDLE , DWORD , LPDWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTapePosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall PrepareTape ( HANDLE , DWORD , BOOL ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongint32Thunk';fcns.name{fcnNum}='PrepareTape'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall EraseTape ( HANDLE , DWORD , BOOL ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongint32Thunk';fcns.name{fcnNum}='EraseTape'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall CreateTapePartition ( HANDLE , DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongulongulongThunk';fcns.name{fcnNum}='CreateTapePartition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall WriteTapemark ( HANDLE , DWORD , DWORD , BOOL ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongulongint32Thunk';fcns.name{fcnNum}='WriteTapemark'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetTapeStatus ( HANDLE ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetTapeStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetTapeParameters ( HANDLE , DWORD , LPDWORD , LPVOID ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTapeParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall SetTapeParameters ( HANDLE , DWORD , LPVOID ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='SetTapeParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall Beep ( DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32ulongulongThunk';fcns.name{fcnNum}='Beep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% void __stdcall OpenSound ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='OpenSound'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void __stdcall CloseSound ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CloseSound'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void __stdcall StartSound ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='StartSound'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void __stdcall StopSound ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='StopSound'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall WaitSoundState ( DWORD ); 
fcns.thunkname{fcnNum}='ulongulongThunk';fcns.name{fcnNum}='WaitSoundState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall SyncAllVoices ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='SyncAllVoices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall CountVoiceNotes ( DWORD nVoice ); 
fcns.thunkname{fcnNum}='ulongulongThunk';fcns.name{fcnNum}='CountVoiceNotes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% LPDWORD __stdcall GetThresholdEvent ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetThresholdEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall GetThresholdStatus ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetThresholdStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall SetSoundNoise ( DWORD , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongulongThunk';fcns.name{fcnNum}='SetSoundNoise'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall SetVoiceAccent ( DWORD , DWORD , DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongulongulongulongulongThunk';fcns.name{fcnNum}='SetVoiceAccent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall SetVoiceEnvelope ( DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongulongulongThunk';fcns.name{fcnNum}='SetVoiceEnvelope'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall SetVoiceNote ( DWORD , DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongulongulongulongThunk';fcns.name{fcnNum}='SetVoiceNote'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall SetVoiceQueueSize ( DWORD , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongulongThunk';fcns.name{fcnNum}='SetVoiceQueueSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall SetVoiceSound ( DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongulongulongThunk';fcns.name{fcnNum}='SetVoiceSound'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall SetVoiceThreshold ( DWORD , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongulongThunk';fcns.name{fcnNum}='SetVoiceThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int __stdcall MulDiv ( int , int , int ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='MulDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void __stdcall GetSystemTime ( LPSYSTEMTIME ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GetSystemTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetSystemTime ( const SYSTEMTIME *); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetSystemTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% void __stdcall GetLocalTime ( LPSYSTEMTIME ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GetLocalTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetLocalTime ( const SYSTEMTIME *); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetLocalTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% void __stdcall GetSystemInfo ( LPSYSTEM_INFO ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GetSystemInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_SYSTEM_INFOPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SystemTimeToTzSpecificLocalTime ( LPTIME_ZONE_INFORMATION , LPSYSTEMTIME , LPSYSTEMTIME ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SystemTimeToTzSpecificLocalTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_TIME_ZONE_INFORMATIONPtr', 's_SYSTEMTIMEPtr', 's_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetTimeZoneInformation ( LPTIME_ZONE_INFORMATION ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetTimeZoneInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_TIME_ZONE_INFORMATIONPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetTimeZoneInformation ( const TIME_ZONE_INFORMATION *); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetTimeZoneInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_TIME_ZONE_INFORMATIONPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SystemTimeToFileTime ( const SYSTEMTIME *, LPFILETIME ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SystemTimeToFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FileTimeToLocalFileTime ( FILETIME *, LPFILETIME ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FileTimeToLocalFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall LocalFileTimeToFileTime ( const FILETIME *, LPFILETIME ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='LocalFileTimeToFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FileTimeToSystemTime ( const FILETIME *, LPSYSTEMTIME ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FileTimeToSystemTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 's_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% LONG __stdcall CompareFileTime ( const FILETIME *, const FILETIME *); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CompareFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FileTimeToDosDateTime ( const FILETIME *, LPWORD , LPWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FileTimeToDosDateTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall DosDateTimeToFileTime ( WORD , WORD , LPFILETIME ); 
fcns.thunkname{fcnNum}='int32uint16uint16voidPtrThunk';fcns.name{fcnNum}='DosDateTimeToFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16', 'uint16', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetTickCount ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetTickCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall SetSystemTimeAdjustment ( DWORD , BOOL ); 
fcns.thunkname{fcnNum}='int32ulongint32Thunk';fcns.name{fcnNum}='SetSystemTimeAdjustment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetSystemTimeAdjustment ( PDWORD , PDWORD , PWINBOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSystemTimeAdjustment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall CreatePipe ( PHANDLE , PHANDLE , LPSECURITY_ATTRIBUTES , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='CreatePipe'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'voidPtrPtr', 's_SECURITY_ATTRIBUTESPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall ConnectNamedPipe ( HANDLE , LPOVERLAPPED ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ConnectNamedPipe'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DisconnectNamedPipe ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DisconnectNamedPipe'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetNamedPipeHandleState ( HANDLE , LPDWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SetNamedPipeHandleState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetNamedPipeInfo ( HANDLE , LPDWORD , LPDWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetNamedPipeInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall PeekNamedPipe ( HANDLE , LPVOID , DWORD , LPDWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PeekNamedPipe'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall TransactNamedPipe ( HANDLE , LPVOID , DWORD , LPVOID , DWORD , LPDWORD , LPOVERLAPPED ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='TransactNamedPipe'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'voidPtr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetMailslotInfo ( HANDLE , LPDWORD , LPDWORD , LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetMailslotInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetMailslotInfo ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetMailslotInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% LPVOID __stdcall MapViewOfFile ( HANDLE , DWORD , DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongulongulongThunk';fcns.name{fcnNum}='MapViewOfFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall FlushViewOfFile ( LPCVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='FlushViewOfFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall UnmapViewOfFile ( LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='UnmapViewOfFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HFILE __stdcall OpenFile ( LPCSTR , LPOFSTRUCT , UINT ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtruint32Thunk';fcns.name{fcnNum}='OpenFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 's_OFSTRUCTPtr', 'uint32'};fcnNum=fcnNum+1;
% HFILE __stdcall _lopen ( LPCSTR , int ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='_lopen'; fcns.alias{fcnNum}='lopen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% HFILE __stdcall _lcreat ( LPCSTR , int ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='_lcreat'; fcns.alias{fcnNum}='lcreat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall _lread ( HFILE , LPVOID , UINT ); 
fcns.thunkname{fcnNum}='uint32int32voidPtruint32Thunk';fcns.name{fcnNum}='_lread'; fcns.alias{fcnNum}='lread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% UINT __stdcall _lwrite ( HFILE , LPCSTR , UINT ); 
fcns.thunkname{fcnNum}='uint32int32cstringuint32Thunk';fcns.name{fcnNum}='_lwrite'; fcns.alias{fcnNum}='lwrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32'};fcnNum=fcnNum+1;
% long __stdcall _hread ( HFILE , LPVOID , long ); 
fcns.thunkname{fcnNum}='longint32voidPtrlongThunk';fcns.name{fcnNum}='_hread'; fcns.alias{fcnNum}='hread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% long __stdcall _hwrite ( HFILE , LPCSTR , long ); 
fcns.thunkname{fcnNum}='longint32cstringlongThunk';fcns.name{fcnNum}='_hwrite'; fcns.alias{fcnNum}='hwrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'int32', 'cstring', 'long'};fcnNum=fcnNum+1;
% HFILE __stdcall _lclose ( HFILE ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='_lclose'; fcns.alias{fcnNum}='lclose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% LONG __stdcall _llseek ( HFILE , LONG , int ); 
fcns.thunkname{fcnNum}='longint32longint32Thunk';fcns.name{fcnNum}='_llseek'; fcns.alias{fcnNum}='llseek'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'int32', 'long', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsTextUnicode ( const LPVOID , int , LPINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='IsTextUnicode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% DWORD __stdcall TlsAlloc ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='TlsAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% LPVOID __stdcall TlsGetValue ( DWORD ); 
fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='TlsGetValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall TlsSetValue ( DWORD , LPVOID ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrThunk';fcns.name{fcnNum}='TlsSetValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall TlsFree ( DWORD ); 
fcns.thunkname{fcnNum}='int32ulongThunk';fcns.name{fcnNum}='TlsFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall SleepEx ( DWORD , BOOL ); 
fcns.thunkname{fcnNum}='ulongulongint32Thunk';fcns.name{fcnNum}='SleepEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall WaitForSingleObjectEx ( HANDLE , DWORD , BOOL ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongint32Thunk';fcns.name{fcnNum}='WaitForSingleObjectEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall WaitForMultipleObjectsEx ( DWORD , const HANDLE *, BOOL , DWORD , BOOL ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrint32ulongint32Thunk';fcns.name{fcnNum}='WaitForMultipleObjectsEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'voidPtrPtr', 'int32', 'ulong', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ReadFileEx ( HANDLE , LPVOID , DWORD , LPOVERLAPPED , LPOVERLAPPED_COMPLETION_ROUTINE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ReadFileEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 's_OVERLAPPEDPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteFileEx ( HANDLE , LPCVOID , DWORD , LPOVERLAPPED , LPOVERLAPPED_COMPLETION_ROUTINE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteFileEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 's_OVERLAPPEDPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall BackupRead ( HANDLE , LPBYTE , DWORD , LPDWORD , BOOL , BOOL , LPVOID *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='BackupRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'ulong', 'uint32Ptr', 'int32', 'int32', 'voidPtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall BackupSeek ( HANDLE , DWORD , DWORD , LPDWORD , LPDWORD , LPVOID *); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='BackupSeek'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'uint32Ptr', 'uint32Ptr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall BackupWrite ( HANDLE , LPBYTE , DWORD , LPDWORD , BOOL , BOOL , LPVOID *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='BackupWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'ulong', 'uint32Ptr', 'int32', 'int32', 'voidPtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetProcessShutdownParameters ( DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32ulongulongThunk';fcns.name{fcnNum}='SetProcessShutdownParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetProcessShutdownParameters ( LPDWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessShutdownParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% void __stdcall SetFileApisToOEM ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='SetFileApisToOEM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void __stdcall SetFileApisToANSI ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='SetFileApisToANSI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall AreFileApisANSI ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='AreFileApisANSI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall CloseEventLog ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CloseEventLog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DeregisterEventSource ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeregisterEventSource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall NotifyChangeEventLog ( HANDLE , HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='NotifyChangeEventLog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetNumberOfEventLogRecords ( HANDLE , PDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetNumberOfEventLogRecords'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetOldestEventLogRecord ( HANDLE , PDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetOldestEventLogRecord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall DuplicateToken ( HANDLE , SECURITY_IMPERSONATION_LEVEL , PHANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrSECURITY_IMPERSONATION_LEVELvoidPtrThunk';fcns.name{fcnNum}='DuplicateToken'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'e_SECURITY_IMPERSONATION_LEVEL', 'voidPtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetKernelObjectSecurity ( HANDLE , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetKernelObjectSecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 's_SECURITY_DESCRIPTORPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ImpersonateNamedPipeClient ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ImpersonateNamedPipeClient'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ImpersonateSelf ( SECURITY_IMPERSONATION_LEVEL ); 
fcns.thunkname{fcnNum}='int32SECURITY_IMPERSONATION_LEVELThunk';fcns.name{fcnNum}='ImpersonateSelf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'e_SECURITY_IMPERSONATION_LEVEL'};fcnNum=fcnNum+1;
% BOOL __stdcall RevertToSelf ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='RevertToSelf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall SetThreadToken ( PHANDLE , HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetThreadToken'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AccessCheck ( PSECURITY_DESCRIPTOR , HANDLE , DWORD , PGENERIC_MAPPING , PPRIVILEGE_SET , LPDWORD , LPDWORD , LPBOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AccessCheck'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 'voidPtr', 'ulong', 's_GENERIC_MAPPINGPtr', 's_PRIVILEGE_SETPtr', 'uint32Ptr', 'uint32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall OpenProcessToken ( HANDLE , DWORD , PHANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='OpenProcessToken'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall OpenThreadToken ( HANDLE , DWORD , BOOL , PHANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenThreadToken'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'int32', 'voidPtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetTokenInformation ( HANDLE , TOKEN_INFORMATION_CLASS , LPVOID , DWORD , PDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrTOKEN_INFORMATION_CLASSvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetTokenInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'e_TOKEN_INFORMATION_CLASS', 'voidPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetTokenInformation ( HANDLE , TOKEN_INFORMATION_CLASS , LPVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrTOKEN_INFORMATION_CLASSvoidPtrulongThunk';fcns.name{fcnNum}='SetTokenInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'e_TOKEN_INFORMATION_CLASS', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall AdjustTokenPrivileges ( HANDLE , BOOL , PTOKEN_PRIVILEGES , DWORD , PTOKEN_PRIVILEGES , PDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AdjustTokenPrivileges'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 's_TOKEN_PRIVILEGESPtr', 'ulong', 's_TOKEN_PRIVILEGESPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall AdjustTokenGroups ( HANDLE , BOOL , PTOKEN_GROUPS , DWORD , PTOKEN_GROUPS , PDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AdjustTokenGroups'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 's_TOKEN_GROUPSPtr', 'ulong', 's_TOKEN_GROUPSPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall PrivilegeCheck ( HANDLE , PPRIVILEGE_SET , LPBOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PrivilegeCheck'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_PRIVILEGE_SETPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsValidSid ( PSID ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsValidSid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SIDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall EqualSid ( PSID , PSID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EqualSid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SIDPtr', 's_SIDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall EqualPrefixSid ( PSID , PSID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EqualPrefixSid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SIDPtr', 's_SIDPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetSidLengthRequired ( UCHAR ); 
fcns.thunkname{fcnNum}='ulonguint8Thunk';fcns.name{fcnNum}='GetSidLengthRequired'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% BOOL __stdcall AllocateAndInitializeSid ( PSID_IDENTIFIER_AUTHORITY , BYTE , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , DWORD , PSID *); 
fcns.thunkname{fcnNum}='int32voidPtruint8ulongulongulongulongulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='AllocateAndInitializeSid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SID_IDENTIFIER_AUTHORITYPtr', 'uint8', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 's_SIDPtrPtr'};fcnNum=fcnNum+1;
% PVOID __stdcall FreeSid ( PSID ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='FreeSid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SIDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall InitializeSid ( PSID , PSID_IDENTIFIER_AUTHORITY , BYTE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint8Thunk';fcns.name{fcnNum}='InitializeSid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SIDPtr', 's_SID_IDENTIFIER_AUTHORITYPtr', 'uint8'};fcnNum=fcnNum+1;
% PSID_IDENTIFIER_AUTHORITY __stdcall GetSidIdentifierAuthority ( PSID ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSidIdentifierAuthority'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_SID_IDENTIFIER_AUTHORITYPtr'; fcns.RHS{fcnNum}={'s_SIDPtr'};fcnNum=fcnNum+1;
% PDWORD __stdcall GetSidSubAuthority ( PSID , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetSidSubAuthority'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32Ptr'; fcns.RHS{fcnNum}={'s_SIDPtr', 'ulong'};fcnNum=fcnNum+1;
% PUCHAR __stdcall GetSidSubAuthorityCount ( PSID ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSidSubAuthorityCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'s_SIDPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetLengthSid ( PSID ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetLengthSid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_SIDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CopySid ( DWORD , PSID , PSID ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CopySid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 's_SIDPtr', 's_SIDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AreAllAccessesGranted ( DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32ulongulongThunk';fcns.name{fcnNum}='AreAllAccessesGranted'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall AreAnyAccessesGranted ( DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32ulongulongThunk';fcns.name{fcnNum}='AreAnyAccessesGranted'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% void __stdcall MapGenericMask ( PDWORD , PGENERIC_MAPPING ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MapGenericMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32Ptr', 's_GENERIC_MAPPINGPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsValidAcl ( PACL ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsValidAcl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall InitializeAcl ( PACL , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='InitializeAcl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetAclInformation ( PACL , LPVOID , DWORD , ACL_INFORMATION_CLASS ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongACL_INFORMATION_CLASSThunk';fcns.name{fcnNum}='GetAclInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr', 'voidPtr', 'ulong', 'e_ACL_INFORMATION_CLASS'};fcnNum=fcnNum+1;
% BOOL __stdcall SetAclInformation ( PACL , LPVOID , DWORD , ACL_INFORMATION_CLASS ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongACL_INFORMATION_CLASSThunk';fcns.name{fcnNum}='SetAclInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr', 'voidPtr', 'ulong', 'e_ACL_INFORMATION_CLASS'};fcnNum=fcnNum+1;
% BOOL __stdcall AddAce ( PACL , DWORD , DWORD , LPVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrulongThunk';fcns.name{fcnNum}='AddAce'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr', 'ulong', 'ulong', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall DeleteAce ( PACL , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='DeleteAce'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetAce ( PACL , DWORD , LPVOID *); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetAce'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr', 'ulong', 'voidPtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AddAccessAllowedAce ( PACL , DWORD , DWORD , PSID ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='AddAccessAllowedAce'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr', 'ulong', 'ulong', 's_SIDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AddAccessDeniedAce ( PACL , DWORD , DWORD , PSID ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='AddAccessDeniedAce'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr', 'ulong', 'ulong', 's_SIDPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AddAuditAccessAce ( PACL , DWORD , DWORD , PSID , BOOL , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongvoidPtrint32int32Thunk';fcns.name{fcnNum}='AddAuditAccessAce'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr', 'ulong', 'ulong', 's_SIDPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall FindFirstFreeAce ( PACL , LPVOID *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FindFirstFreeAce'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ACLPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall InitializeSecurityDescriptor ( PSECURITY_DESCRIPTOR , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='InitializeSecurityDescriptor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall IsValidSecurityDescriptor ( PSECURITY_DESCRIPTOR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsValidSecurityDescriptor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetSecurityDescriptorLength ( PSECURITY_DESCRIPTOR ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetSecurityDescriptorLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetSecurityDescriptorControl ( PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR_CONTROL , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSecurityDescriptorControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetSecurityDescriptorDacl ( PSECURITY_DESCRIPTOR , BOOL , PACL , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='SetSecurityDescriptorDacl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 'int32', 's_ACLPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetSecurityDescriptorDacl ( PSECURITY_DESCRIPTOR , LPBOOL , PACL *, LPBOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSecurityDescriptorDacl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 'int32Ptr', 's_ACLPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetSecurityDescriptorSacl ( PSECURITY_DESCRIPTOR , BOOL , PACL , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='SetSecurityDescriptorSacl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 'int32', 's_ACLPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetSecurityDescriptorSacl ( PSECURITY_DESCRIPTOR , LPBOOL , PACL *, LPBOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSecurityDescriptorSacl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 'int32Ptr', 's_ACLPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetSecurityDescriptorOwner ( PSECURITY_DESCRIPTOR , PSID pOwner , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='SetSecurityDescriptorOwner'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 's_SIDPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetSecurityDescriptorOwner ( PSECURITY_DESCRIPTOR , PSID *, LPBOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSecurityDescriptorOwner'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 's_SIDPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetSecurityDescriptorGroup ( PSECURITY_DESCRIPTOR , PSID , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='SetSecurityDescriptorGroup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 's_SIDPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetSecurityDescriptorGroup ( PSECURITY_DESCRIPTOR , PSID *, LPBOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSecurityDescriptorGroup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 's_SIDPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall CreatePrivateObjectSecurity ( PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR *, BOOL , HANDLE , PGENERIC_MAPPING ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreatePrivateObjectSecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 's_SECURITY_DESCRIPTORPtr', 's_SECURITY_DESCRIPTORPtrPtr', 'int32', 'voidPtr', 's_GENERIC_MAPPINGPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetPrivateObjectSecurity ( SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR *, PGENERIC_MAPPING , HANDLE ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SetPrivateObjectSecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 's_SECURITY_DESCRIPTORPtr', 's_SECURITY_DESCRIPTORPtrPtr', 's_GENERIC_MAPPINGPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetPrivateObjectSecurity ( PSECURITY_DESCRIPTOR , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , PDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetPrivateObjectSecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 'ulong', 's_SECURITY_DESCRIPTORPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall DestroyPrivateObjectSecurity ( PSECURITY_DESCRIPTOR *); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DestroyPrivateObjectSecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtrPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall MakeSelfRelativeSD ( PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MakeSelfRelativeSD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 's_SECURITY_DESCRIPTORPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall MakeAbsoluteSD ( PSECURITY_DESCRIPTOR , PSECURITY_DESCRIPTOR , LPDWORD , PACL , LPDWORD , PACL , LPDWORD , PSID , LPDWORD , PSID , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MakeAbsoluteSD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SECURITY_DESCRIPTORPtr', 's_SECURITY_DESCRIPTORPtr', 'uint32Ptr', 's_ACLPtr', 'uint32Ptr', 's_ACLPtr', 'uint32Ptr', 's_SIDPtr', 'uint32Ptr', 's_SIDPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetKernelObjectSecurity ( HANDLE , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='SetKernelObjectSecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 's_SECURITY_DESCRIPTORPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FindNextChangeNotification ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FindNextChangeNotification'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FindCloseChangeNotification ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FindCloseChangeNotification'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall VirtualLock ( LPVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='VirtualLock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall VirtualUnlock ( LPVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='VirtualUnlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% LPVOID __stdcall MapViewOfFileEx ( HANDLE , DWORD , DWORD , DWORD , DWORD , LPVOID ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='MapViewOfFileEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetPriorityClass ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetPriorityClass'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall GetPriorityClass ( HANDLE ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetPriorityClass'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsBadReadPtr ( const void *, UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='IsBadReadPtr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsBadWritePtr ( LPVOID , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='IsBadWritePtr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsBadHugeReadPtr ( const void *, UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='IsBadHugeReadPtr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsBadHugeWritePtr ( LPVOID , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='IsBadHugeWritePtr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsBadCodePtr ( FARPROC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsBadCodePtr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AllocateLocallyUniqueId ( PLUID ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='AllocateLocallyUniqueId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall QueryPerformanceCounter ( LARGE_INTEGER *); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='QueryPerformanceCounter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall QueryPerformanceFrequency ( LARGE_INTEGER *); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='QueryPerformanceFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void __stdcall MoveMemory ( PVOID , const void *, DWORD ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='MoveMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% void __stdcall FillMemory ( PVOID , DWORD , BYTE ); 
fcns.thunkname{fcnNum}='voidvoidPtrulonguint8Thunk';fcns.name{fcnNum}='FillMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint8'};fcnNum=fcnNum+1;
% void __stdcall ZeroMemory ( PVOID , DWORD ); 
fcns.thunkname{fcnNum}='voidvoidPtrulongThunk';fcns.name{fcnNum}='ZeroMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall ActivateKeyboardLayout ( HKL , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='ActivateKeyboardLayout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall ToUnicodeEx ( UINT , UINT , PBYTE , LPWSTR , int , UINT , HKL ); 
fcns.thunkname{fcnNum}='int32uint32uint32voidPtrvoidPtrint32uint32voidPtrThunk';fcns.name{fcnNum}='ToUnicodeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint8Ptr', 'uint16Ptr', 'int32', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall UnloadKeyboardLayout ( HKL ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='UnloadKeyboardLayout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall GetKeyboardLayoutList ( int , HKL *); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='GetKeyboardLayoutList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtrPtr'};fcnNum=fcnNum+1;
% HKL __stdcall GetKeyboardLayout ( DWORD ); 
fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='GetKeyboardLayout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% HDESK __stdcall OpenInputDesktop ( DWORD , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrulongint32ulongThunk';fcns.name{fcnNum}='OpenInputDesktop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumDesktopWindows ( HDESK , ENUMWINDOWSPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumDesktopWindows'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall SwitchDesktop ( HDESK ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SwitchDesktop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetThreadDesktop ( HDESK ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetThreadDesktop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CloseDesktop ( HDESK ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CloseDesktop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HDESK __stdcall GetThreadDesktop ( DWORD ); 
fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='GetThreadDesktop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall CloseWindowStation ( HWINSTA ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CloseWindowStation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetProcessWindowStation ( HWINSTA ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetProcessWindowStation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HWINSTA __stdcall GetProcessWindowStation ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetProcessWindowStation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall SetUserObjectSecurity ( HANDLE , PSECURITY_INFORMATION , PSECURITY_DESCRIPTOR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SetUserObjectSecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 's_SECURITY_DESCRIPTORPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetUserObjectSecurity ( HANDLE , PSECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetUserObjectSecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 's_SECURITY_DESCRIPTORPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall TranslateMessage ( const MSG *); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='TranslateMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagMSGPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetMessageQueue ( int ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='SetMessageQueue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall RegisterHotKey ( HWND , int , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32uint32uint32Thunk';fcns.name{fcnNum}='RegisterHotKey'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall UnregisterHotKey ( HWND , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='UnregisterHotKey'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ExitWindowsEx ( UINT , DWORD ); 
fcns.thunkname{fcnNum}='int32uint32ulongThunk';fcns.name{fcnNum}='ExitWindowsEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SwapMouseButton ( BOOL ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='SwapMouseButton'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetMessagePos ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetMessagePos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% LONG __stdcall GetMessageTime ( void ); 
fcns.thunkname{fcnNum}='longvoidThunk';fcns.name{fcnNum}='GetMessageTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% LONG __stdcall GetMessageExtraInfo ( void ); 
fcns.thunkname{fcnNum}='longvoidThunk';fcns.name{fcnNum}='GetMessageExtraInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% LPARAM __stdcall SetMessageExtraInfo ( LPARAM ); 
fcns.thunkname{fcnNum}='longlongThunk';fcns.name{fcnNum}='SetMessageExtraInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% long __stdcall BroadcastSystemMessage ( DWORD , LPDWORD , UINT , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longulongvoidPtruint32uint32longThunk';fcns.name{fcnNum}='BroadcastSystemMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint32Ptr', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall AttachThreadInput ( DWORD , DWORD , BOOL ); 
fcns.thunkname{fcnNum}='int32ulongulongint32Thunk';fcns.name{fcnNum}='AttachThreadInput'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ReplyMessage ( LRESULT ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='ReplyMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% BOOL __stdcall WaitMessage ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='WaitMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall WaitForInputIdle ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='WaitForInputIdle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% void __stdcall PostQuitMessage ( int ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='PostQuitMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall InSendMessage ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='InSendMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% UINT __stdcall GetDoubleClickTime ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='GetDoubleClickTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall SetDoubleClickTime ( UINT ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='SetDoubleClickTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsWindow ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsMenu ( HMENU ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsChild ( HWND , HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='IsChild'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DestroyWindow ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DestroyWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ShowWindow ( HWND , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='ShowWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ShowWindowAsync ( HWND , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='ShowWindowAsync'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall FlashWindow ( HWND , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='FlashWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ShowOwnedPopups ( HWND , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='ShowOwnedPopups'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall OpenIcon ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='OpenIcon'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CloseWindow ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CloseWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall MoveWindow ( HWND , int , int , int , int , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32int32Thunk';fcns.name{fcnNum}='MoveWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetWindowPos ( HWND , HWND , int , int , int , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32int32int32uint32Thunk';fcns.name{fcnNum}='SetWindowPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32', 'int32', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetWindowPlacement ( HWND , WINDOWPLACEMENT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetWindowPlacement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_WINDOWPLACEMENTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetWindowPlacement ( HWND hWnd , const WINDOWPLACEMENT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetWindowPlacement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_WINDOWPLACEMENTPtr'};fcnNum=fcnNum+1;
% HDWP __stdcall BeginDeferWindowPos ( int ); 
fcns.thunkname{fcnNum}='voidPtrint32Thunk';fcns.name{fcnNum}='BeginDeferWindowPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% HDWP __stdcall DeferWindowPos ( HDWP , HWND , HWND , int , int , int , int , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrint32int32int32int32uint32Thunk';fcns.name{fcnNum}='DeferWindowPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'int32', 'int32', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall EndDeferWindowPos ( HDWP ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EndDeferWindowPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsWindowVisible ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsWindowVisible'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsIconic ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsIconic'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AnyPopup ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='AnyPopup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall BringWindowToTop ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='BringWindowToTop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsZoomed ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsZoomed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall EndDialog ( HWND , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EndDialog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% HWND __stdcall GetDlgItem ( HWND , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetDlgItem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetDlgItemInt ( HWND , int , UINT , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32uint32int32Thunk';fcns.name{fcnNum}='SetDlgItemInt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint32', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall GetDlgItemInt ( HWND , int , BOOL *, BOOL ); 
fcns.thunkname{fcnNum}='uint32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='GetDlgItemInt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall CheckDlgButton ( HWND , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32uint32Thunk';fcns.name{fcnNum}='CheckDlgButton'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall CheckRadioButton ( HWND , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32Thunk';fcns.name{fcnNum}='CheckRadioButton'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall IsDlgButtonChecked ( HWND , int ); 
fcns.thunkname{fcnNum}='uint32voidPtrint32Thunk';fcns.name{fcnNum}='IsDlgButtonChecked'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% HWND __stdcall GetNextDlgGroupItem ( HWND , HWND , BOOL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetNextDlgGroupItem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% HWND __stdcall GetNextDlgTabItem ( HWND , HWND , BOOL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetNextDlgTabItem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetDlgCtrlID ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetDlgCtrlID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% long __stdcall GetDialogBaseUnits ( void ); 
fcns.thunkname{fcnNum}='longvoidThunk';fcns.name{fcnNum}='GetDialogBaseUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall OpenClipboard ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='OpenClipboard'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CloseClipboard ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CloseClipboard'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HWND __stdcall GetClipboardOwner ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetClipboardOwner'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HWND __stdcall SetClipboardViewer ( HWND ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetClipboardViewer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HWND __stdcall GetClipboardViewer ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetClipboardViewer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall ChangeClipboardChain ( HWND , HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ChangeClipboardChain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% HANDLE __stdcall SetClipboardData ( UINT , HANDLE ); 
fcns.thunkname{fcnNum}='voidPtruint32voidPtrThunk';fcns.name{fcnNum}='SetClipboardData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% HANDLE __stdcall GetClipboardData ( UINT ); 
fcns.thunkname{fcnNum}='voidPtruint32Thunk';fcns.name{fcnNum}='GetClipboardData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% int __stdcall CountClipboardFormats ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CountClipboardFormats'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% UINT __stdcall EnumClipboardFormats ( UINT ); 
fcns.thunkname{fcnNum}='uint32uint32Thunk';fcns.name{fcnNum}='EnumClipboardFormats'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall EmptyClipboard ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='EmptyClipboard'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall IsClipboardFormatAvailable ( UINT ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='IsClipboardFormatAvailable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% int __stdcall GetPriorityClipboardFormat ( UINT *, int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetPriorityClipboardFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% HWND __stdcall GetOpenClipboardWindow ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetOpenClipboardWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% LPSTR __stdcall CharNextExA ( WORD , LPCSTR , DWORD ); 
fcns.thunkname{fcnNum}='cstringuint16cstringulongThunk';fcns.name{fcnNum}='CharNextExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'uint16', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% LPSTR __stdcall CharPrevExA ( WORD , LPCSTR , LPCSTR , DWORD dwFlags ); 
fcns.thunkname{fcnNum}='cstringuint16cstringcstringulongThunk';fcns.name{fcnNum}='CharPrevExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'uint16', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% HWND __stdcall SetFocus ( HWND ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetFocus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HWND __stdcall GetActiveWindow ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetActiveWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HWND __stdcall GetFocus ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetFocus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% UINT __stdcall GetKBCodePage ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='GetKBCodePage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% SHORT __stdcall GetKeyState ( int ); 
fcns.thunkname{fcnNum}='int16int32Thunk';fcns.name{fcnNum}='GetKeyState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% SHORT __stdcall GetAsyncKeyState ( int ); 
fcns.thunkname{fcnNum}='int16int32Thunk';fcns.name{fcnNum}='GetAsyncKeyState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetKeyboardState ( PBYTE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetKeyboardState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetKeyboardState ( LPBYTE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetKeyboardState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% int __stdcall GetKeyboardType ( int ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='GetKeyboardType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int __stdcall ToAscii ( UINT , UINT , PBYTE , LPWORD , UINT ); 
fcns.thunkname{fcnNum}='int32uint32uint32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='ToAscii'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint8Ptr', 'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall ToAsciiEx ( UINT , UINT , PBYTE , LPWORD , UINT , HKL ); 
fcns.thunkname{fcnNum}='int32uint32uint32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='ToAsciiEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint8Ptr', 'uint16Ptr', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall ToUnicode ( UINT , UINT , PBYTE , LPWSTR , int , UINT ); 
fcns.thunkname{fcnNum}='int32uint32uint32voidPtrvoidPtrint32uint32Thunk';fcns.name{fcnNum}='ToUnicode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint8Ptr', 'uint16Ptr', 'int32', 'uint32'};fcnNum=fcnNum+1;
% DWORD __stdcall OemKeyScan ( WORD ); 
fcns.thunkname{fcnNum}='ulonguint16Thunk';fcns.name{fcnNum}='OemKeyScan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% void __stdcall keybd_event ( BYTE , BYTE , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='voiduint8uint8ulongulongThunk';fcns.name{fcnNum}='keybd_event'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint8', 'uint8', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% void __stdcall mouse_event ( DWORD , DWORD , DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='voidulongulongulongulongulongThunk';fcns.name{fcnNum}='mouse_event'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetInputState ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='GetInputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall GetQueueStatus ( UINT flags ); 
fcns.thunkname{fcnNum}='ulonguint32Thunk';fcns.name{fcnNum}='GetQueueStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% HWND __stdcall GetCapture ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HWND __stdcall SetCapture ( HWND hWnd ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ReleaseCapture ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='ReleaseCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall MsgWaitForMultipleObjects ( DWORD , LPHANDLE , BOOL , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='ulongulongvoidPtrint32ulongulongThunk';fcns.name{fcnNum}='MsgWaitForMultipleObjects'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'voidPtrPtr', 'int32', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% UINT __stdcall SetTimer ( HWND , UINT , UINT , TIMERPROC ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='SetTimer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'FcnPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall KillTimer ( HWND , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='KillTimer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsWindowUnicode ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsWindowUnicode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall EnableWindow ( HWND , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EnableWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsWindowEnabled ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsWindowEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DestroyAcceleratorTable ( HACCEL ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DestroyAcceleratorTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall GetSystemMetrics ( int ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='GetSystemMetrics'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% HMENU __stdcall GetMenu ( HWND ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetMenu ( HWND , HMENU ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall HiliteMenuItem ( HWND , HMENU , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='HiliteMenuItem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% UINT __stdcall GetMenuState ( HMENU , UINT , UINT ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32uint32Thunk';fcns.name{fcnNum}='GetMenuState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DrawMenuBar ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DrawMenuBar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HMENU __stdcall GetSystemMenu ( HWND , BOOL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetSystemMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% HMENU __stdcall CreateMenu ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='CreateMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HMENU __stdcall CreatePopupMenu ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='CreatePopupMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall DestroyMenu ( HMENU ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DestroyMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall CheckMenuItem ( HMENU , UINT , UINT ); 
fcns.thunkname{fcnNum}='ulongvoidPtruint32uint32Thunk';fcns.name{fcnNum}='CheckMenuItem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall EnableMenuItem ( HMENU , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32Thunk';fcns.name{fcnNum}='EnableMenuItem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% HMENU __stdcall GetSubMenu ( HMENU , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetSubMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall GetMenuItemID ( HMENU , int ); 
fcns.thunkname{fcnNum}='uint32voidPtrint32Thunk';fcns.name{fcnNum}='GetMenuItemID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetMenuItemCount ( HMENU ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetMenuItemCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall RemoveMenu ( HMENU , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32Thunk';fcns.name{fcnNum}='RemoveMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DeleteMenu ( HMENU , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32Thunk';fcns.name{fcnNum}='DeleteMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetMenuItemBitmaps ( HMENU , UINT , UINT , HBITMAP , HBITMAP ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetMenuItemBitmaps'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% LONG __stdcall GetMenuCheckMarkDimensions ( void ); 
fcns.thunkname{fcnNum}='longvoidThunk';fcns.name{fcnNum}='GetMenuCheckMarkDimensions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall TrackPopupMenu ( HMENU , UINT , int , int , int , HWND , const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='TrackPopupMenu'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'int32', 'int32', 'int32', 'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetMenuDefaultItem ( HMENU , UINT , UINT ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32uint32Thunk';fcns.name{fcnNum}='GetMenuDefaultItem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetMenuDefaultItem ( HMENU , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32Thunk';fcns.name{fcnNum}='SetMenuDefaultItem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetMenuItemRect ( HWND , HMENU , UINT , LPRECT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetMenuItemRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint32', 's_RECTPtr'};fcnNum=fcnNum+1;
% int __stdcall MenuItemFromPoint ( HWND , HMENU , POINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrPOINTThunk';fcns.name{fcnNum}='MenuItemFromPoint'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'tagPOINT'};fcnNum=fcnNum+1;
% DWORD __stdcall DragObject ( HWND , HWND , UINT , DWORD , HCURSOR ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtruint32ulongvoidPtrThunk';fcns.name{fcnNum}='DragObject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint32', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DragDetect ( HWND , POINT ); 
fcns.thunkname{fcnNum}='int32voidPtrPOINTThunk';fcns.name{fcnNum}='DragDetect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINT'};fcnNum=fcnNum+1;
% BOOL __stdcall DrawIcon ( HDC , int , int , HICON ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='DrawIcon'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall UpdateWindow ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='UpdateWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HWND __stdcall SetActiveWindow ( HWND ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetActiveWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HWND __stdcall GetForegroundWindow ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetForegroundWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall PaintDesktop ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PaintDesktop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetForegroundWindow ( HWND hWnd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetForegroundWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HWND __stdcall WindowFromDC ( HDC hDC ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='WindowFromDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HDC __stdcall GetDC ( HWND ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HDC __stdcall GetDCEx ( HWND , HRGN , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetDCEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% HDC __stdcall GetWindowDC ( HWND ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetWindowDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall ReleaseDC ( HWND , HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ReleaseDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% HDC __stdcall BeginPaint ( HWND , LPPAINTSTRUCT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='BeginPaint'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'tagPAINTSTRUCTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall EndPaint ( HWND , const PAINTSTRUCT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EndPaint'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPAINTSTRUCTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetUpdateRect ( HWND , LPRECT , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetUpdateRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetUpdateRgn ( HWND , HRGN , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetUpdateRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall SetWindowRgn ( HWND , HRGN , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='SetWindowRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetWindowRgn ( HWND , HRGN ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetWindowRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall ExcludeUpdateRgn ( HDC , HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ExcludeUpdateRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall InvalidateRect ( HWND , const RECT *, BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='InvalidateRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ValidateRect ( HWND , const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ValidateRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall InvalidateRgn ( HWND , HRGN , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='InvalidateRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ValidateRgn ( HWND , HRGN ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ValidateRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall RedrawWindow ( HWND , const RECT *, HRGN , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='RedrawWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall LockWindowUpdate ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='LockWindowUpdate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ScrollWindow ( HWND , int , int , const RECT *, const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ScrollWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 's_RECTPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ScrollDC ( HDC , int , int , const RECT *, const RECT *, HRGN , LPRECT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ScrollDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 's_RECTPtr', 's_RECTPtr', 'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% int __stdcall ScrollWindowEx ( HWND , int , int , const RECT *, const RECT *, HRGN , LPRECT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='ScrollWindowEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 's_RECTPtr', 's_RECTPtr', 'voidPtr', 's_RECTPtr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall SetScrollPos ( HWND , int , int , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32Thunk';fcns.name{fcnNum}='SetScrollPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetScrollPos ( HWND , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetScrollPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetScrollRange ( HWND , int , int , int , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='SetScrollRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetScrollRange ( HWND , int , LPINT , LPINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetScrollRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ShowScrollBar ( HWND , int , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='ShowScrollBar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall EnableScrollBar ( HWND , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32Thunk';fcns.name{fcnNum}='EnableScrollBar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetClientRect ( HWND , LPRECT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetClientRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetWindowRect ( HWND , LPRECT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetWindowRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AdjustWindowRect ( LPRECT , DWORD , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrulongint32Thunk';fcns.name{fcnNum}='AdjustWindowRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 'ulong', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall AdjustWindowRectEx ( LPRECT , DWORD , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongint32ulongThunk';fcns.name{fcnNum}='AdjustWindowRectEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetWindowContextHelpId ( HWND , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetWindowContextHelpId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall GetWindowContextHelpId ( HWND ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetWindowContextHelpId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetMenuContextHelpId ( HMENU , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetMenuContextHelpId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall GetMenuContextHelpId ( HMENU ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetMenuContextHelpId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall MessageBeep ( UINT ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='MessageBeep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% int __stdcall ShowCursor ( BOOL ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ShowCursor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetCursorPos ( int , int ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='SetCursorPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% HCURSOR __stdcall SetCursor ( HCURSOR ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetCursor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCursorPos ( PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetCursorPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ClipCursor ( const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ClipCursor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetClipCursor ( LPRECT ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetClipCursor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr'};fcnNum=fcnNum+1;
% HCURSOR __stdcall GetCursor ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetCursor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall CreateCaret ( HWND , HBITMAP , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='CreateCaret'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall GetCaretBlinkTime ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='GetCaretBlinkTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall SetCaretBlinkTime ( UINT ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='SetCaretBlinkTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DestroyCaret ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='DestroyCaret'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall HideCaret ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='HideCaret'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ShowCaret ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ShowCaret'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetCaretPos ( int , int ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='SetCaretPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCaretPos ( PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetCaretPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ClientToScreen ( HWND , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ClientToScreen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ScreenToClient ( HWND , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ScreenToClient'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% int __stdcall MapWindowPoints ( HWND , HWND , PPOINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='MapWindowPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'tagPOINTPtr', 'uint32'};fcnNum=fcnNum+1;
% HWND __stdcall WindowFromPoint ( POINT ); 
fcns.thunkname{fcnNum}='voidPtrPOINTThunk';fcns.name{fcnNum}='WindowFromPoint'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagPOINT'};fcnNum=fcnNum+1;
% HWND __stdcall ChildWindowFromPoint ( HWND , POINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrPOINTThunk';fcns.name{fcnNum}='ChildWindowFromPoint'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINT'};fcnNum=fcnNum+1;
% DWORD __stdcall GetSysColor ( int ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='GetSysColor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% HBRUSH __stdcall GetSysColorBrush ( int ); 
fcns.thunkname{fcnNum}='voidPtrint32Thunk';fcns.name{fcnNum}='GetSysColorBrush'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetSysColors ( int , const INT *, const COLORREF *); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetSysColors'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'ulongPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DrawFocusRect ( HDC , const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='DrawFocusRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% int __stdcall FillRect ( HDC , const RECT *, HBRUSH ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FillRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall FrameRect ( HDC , const RECT *, HBRUSH ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FrameRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall InvertRect ( HDC , const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='InvertRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetRect ( LPRECT , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='SetRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetRectEmpty ( LPRECT ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetRectEmpty'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CopyRect ( LPRECT , const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CopyRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall InflateRect ( LPRECT , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='InflateRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall IntersectRect ( LPRECT , const RECT *, const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='IntersectRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 's_RECTPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall UnionRect ( LPRECT , const RECT *, const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='UnionRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 's_RECTPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SubtractRect ( LPRECT , const RECT *, const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SubtractRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 's_RECTPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall OffsetRect ( LPRECT , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='OffsetRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsRectEmpty ( const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsRectEmpty'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall EqualRect ( const RECT *, const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EqualRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PtInRect ( const RECT * lprc , POINT pt ); 
fcns.thunkname{fcnNum}='int32voidPtrPOINTThunk';fcns.name{fcnNum}='PtInRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RECTPtr', 'tagPOINT'};fcnNum=fcnNum+1;
% WORD __stdcall GetWindowWord ( HWND , int ); 
fcns.thunkname{fcnNum}='uint16voidPtrint32Thunk';fcns.name{fcnNum}='GetWindowWord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% WORD __stdcall SetWindowWord ( HWND , int , WORD ); 
fcns.thunkname{fcnNum}='uint16voidPtrint32uint16Thunk';fcns.name{fcnNum}='SetWindowWord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint16'};fcnNum=fcnNum+1;
% WORD __stdcall GetClassWord ( HWND , int ); 
fcns.thunkname{fcnNum}='uint16voidPtrint32Thunk';fcns.name{fcnNum}='GetClassWord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% WORD __stdcall SetClassWord ( HWND , int , WORD ); 
fcns.thunkname{fcnNum}='uint16voidPtrint32uint16Thunk';fcns.name{fcnNum}='SetClassWord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint16'};fcnNum=fcnNum+1;
% HWND __stdcall GetDesktopWindow ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetDesktopWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HWND __stdcall GetParent ( HWND hWnd ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetParent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HWND __stdcall SetParent ( HWND , HWND ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SetParent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumChildWindows ( HWND , ENUMWINDOWSPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumChildWindows'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumWindows ( ENUMWINDOWSPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrlongThunk';fcns.name{fcnNum}='EnumWindows'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumThreadWindows ( DWORD , ENUMWINDOWSPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrlongThunk';fcns.name{fcnNum}='EnumThreadWindows'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% HWND __stdcall GetTopWindow ( HWND hWnd ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTopWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% DWORD __stdcall GetWindowThreadProcessId ( HWND , LPDWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetWindowThreadProcessId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% HWND __stdcall GetLastActivePopup ( HWND hWnd ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetLastActivePopup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HWND __stdcall GetWindow ( HWND hWnd , UINT uCmd ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='GetWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall UnhookWindowsHook ( int , HOOKPROC ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='UnhookWindowsHook'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'FcnPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall UnhookWindowsHookEx ( HHOOK hhk ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='UnhookWindowsHookEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% LRESULT __stdcall CallNextHookEx ( HHOOK , int , WPARAM , LPARAM ); 
fcns.thunkname{fcnNum}='longvoidPtrint32uint32longThunk';fcns.name{fcnNum}='CallNextHookEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint32', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall CheckMenuRadioItem ( HMENU , UINT , UINT , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32uint32uint32Thunk';fcns.name{fcnNum}='CheckMenuRadioItem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% HCURSOR __stdcall CreateCursor ( HINSTANCE , int , int , int , int , const void *, const void *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateCursor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DestroyCursor ( HCURSOR ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DestroyCursor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetSystemCursor ( HCURSOR , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetSystemCursor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% HICON __stdcall CreateIcon ( HINSTANCE , int , int , BYTE , BYTE , const BYTE *, const BYTE *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32uint8uint8voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateIcon'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'uint8', 'uint8', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall DestroyIcon ( HICON ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DestroyIcon'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall LookupIconIdFromDirectory ( PBYTE , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='LookupIconIdFromDirectory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall LookupIconIdFromDirectoryEx ( PBYTE , BOOL , int , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32uint32Thunk';fcns.name{fcnNum}='LookupIconIdFromDirectoryEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'int32', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% HICON __stdcall CreateIconFromResource ( PBYTE , DWORD , BOOL , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongint32ulongThunk';fcns.name{fcnNum}='CreateIconFromResource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint8Ptr', 'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
% HICON __stdcall CreateIconFromResourceEx ( PBYTE , DWORD , BOOL , DWORD , int , int , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongint32ulongint32int32uint32Thunk';fcns.name{fcnNum}='CreateIconFromResourceEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint8Ptr', 'ulong', 'int32', 'ulong', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% HICON __stdcall CopyImage ( HANDLE , UINT , int , int , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32int32int32uint32Thunk';fcns.name{fcnNum}='CopyImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% HICON __stdcall CreateIconIndirect ( PICONINFO ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateIconIndirect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_ICONINFOPtr'};fcnNum=fcnNum+1;
% HICON __stdcall CopyIcon ( HICON ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CopyIcon'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetIconInfo ( HICON hIcon , PICONINFO piconinfo ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetIconInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_ICONINFOPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall MapDialogRect ( HWND hDlg , LPRECT lpRect ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MapDialogRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% int __stdcall SetScrollInfo ( HWND , int , LPCSCROLLINFO , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='SetScrollInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'tagSCROLLINFOPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetScrollInfo ( HWND , int , LPSCROLLINFO ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetScrollInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'tagSCROLLINFOPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall TranslateMDISysAccel ( HWND , LPMSG ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='TranslateMDISysAccel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagMSGPtr'};fcnNum=fcnNum+1;
% UINT __stdcall ArrangeIconicWindows ( HWND ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='ArrangeIconicWindows'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% WORD __stdcall TileWindows ( HWND , UINT , const RECT *, UINT , const HWND *); 
fcns.thunkname{fcnNum}='uint16voidPtruint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='TileWindows'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 's_RECTPtr', 'uint32', 'voidPtrPtr'};fcnNum=fcnNum+1;
% WORD __stdcall CascadeWindows ( HWND , UINT , const RECT *, UINT , const HWND *); 
fcns.thunkname{fcnNum}='uint16voidPtruint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='CascadeWindows'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 's_RECTPtr', 'uint32', 'voidPtrPtr'};fcnNum=fcnNum+1;
% void __stdcall SetLastErrorEx ( DWORD , DWORD ); 
fcns.thunkname{fcnNum}='voidulongulongThunk';fcns.name{fcnNum}='SetLastErrorEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% void __stdcall SetDebugErrorLevel ( DWORD ); 
fcns.thunkname{fcnNum}='voidulongThunk';fcns.name{fcnNum}='SetDebugErrorLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall DrawEdge ( HDC , LPRECT , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='DrawEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DrawFrameControl ( HDC , LPRECT , UINT , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='DrawFrameControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DrawCaption ( HWND , HDC , const RECT *, UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='DrawCaption'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 's_RECTPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DrawAnimatedRects ( HWND , int , const RECT *, const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='DrawAnimatedRects'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 's_RECTPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall TrackPopupMenuEx ( HMENU , UINT , int , int , HWND , LPTPMPARAMS ); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='TrackPopupMenuEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'int32', 'int32', 'voidPtr', 'tagTPMPARAMSPtr'};fcnNum=fcnNum+1;
% HWND __stdcall ChildWindowFromPointEx ( HWND , POINT , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrPOINTuint32Thunk';fcns.name{fcnNum}='ChildWindowFromPointEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINT', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall DrawIconEx ( HDC , int , int , HICON , int , int , UINT , HBRUSH , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrint32int32uint32voidPtruint32Thunk';fcns.name{fcnNum}='DrawIconEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'voidPtr', 'int32', 'int32', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall AnimatePalette ( HPALETTE , UINT , UINT , const PALETTEENTRY *); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='AnimatePalette'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'tagPALETTEENTRYPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall Arc ( HDC , int , int , int , int , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='Arc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall BitBlt ( HDC , int , int , int , int , HDC , int , int , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32voidPtrint32int32ulongThunk';fcns.name{fcnNum}='BitBlt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'int32', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall CancelDC ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CancelDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall Chord ( HDC , int , int , int , int , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='Chord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% HMETAFILE __stdcall CloseMetaFile ( HDC ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CloseMetaFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall CombineRgn ( HRGN , HRGN , HRGN , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CombineRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% HBITMAP __stdcall CreateBitmap ( int , int , UINT , UINT , const void *); 
fcns.thunkname{fcnNum}='voidPtrint32int32uint32uint32voidPtrThunk';fcns.name{fcnNum}='CreateBitmap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% HBITMAP __stdcall CreateBitmapIndirect ( const BITMAP *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateBitmapIndirect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagBITMAPPtr'};fcnNum=fcnNum+1;
% HBRUSH __stdcall CreateBrushIndirect ( const LOGBRUSH *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateBrushIndirect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagLOGBRUSHPtr'};fcnNum=fcnNum+1;
% HBITMAP __stdcall CreateCompatibleBitmap ( HDC , int , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='CreateCompatibleBitmap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% HBITMAP __stdcall CreateDiscardableBitmap ( HDC , int , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='CreateDiscardableBitmap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% HDC __stdcall CreateCompatibleDC ( HDC ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateCompatibleDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HBITMAP __stdcall CreateDIBitmap ( HDC , const BITMAPINFOHEADER *, DWORD , const void *, const BITMAPINFO *, UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CreateDIBitmap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'tagBITMAPINFOHEADERPtr', 'ulong', 'voidPtr', 'tagBITMAPINFOPtr', 'uint32'};fcnNum=fcnNum+1;
% HBRUSH __stdcall CreateDIBPatternBrush ( HGLOBAL , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CreateDIBPatternBrush'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% HBRUSH __stdcall CreateDIBPatternBrushPt ( const void *, UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CreateDIBPatternBrushPt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% HRGN __stdcall CreateEllipticRgn ( int , int , int , int ); 
fcns.thunkname{fcnNum}='voidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='CreateEllipticRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% HRGN __stdcall CreateEllipticRgnIndirect ( const RECT *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateEllipticRgnIndirect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_RECTPtr'};fcnNum=fcnNum+1;
% HBRUSH __stdcall CreateHatchBrush ( int , COLORREF ); 
fcns.thunkname{fcnNum}='voidPtrint32ulongThunk';fcns.name{fcnNum}='CreateHatchBrush'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'ulong'};fcnNum=fcnNum+1;
% HPALETTE __stdcall CreatePalette ( const LOGPALETTE *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreatePalette'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagLOGPALETTEPtr'};fcnNum=fcnNum+1;
% HPEN __stdcall CreatePen ( int , int , COLORREF ); 
fcns.thunkname{fcnNum}='voidPtrint32int32ulongThunk';fcns.name{fcnNum}='CreatePen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'ulong'};fcnNum=fcnNum+1;
% HPEN __stdcall CreatePenIndirect ( const LOGPEN *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreatePenIndirect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagLOGPENPtr'};fcnNum=fcnNum+1;
% HRGN __stdcall CreatePolyPolygonRgn ( const POINT *, const INT *, int , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='CreatePolyPolygonRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagPOINTPtr', 'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% HBRUSH __stdcall CreatePatternBrush ( HBITMAP ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreatePatternBrush'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HRGN __stdcall CreateRectRgn ( int , int , int , int ); 
fcns.thunkname{fcnNum}='voidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='CreateRectRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% HRGN __stdcall CreateRectRgnIndirect ( const RECT *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateRectRgnIndirect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_RECTPtr'};fcnNum=fcnNum+1;
% HRGN __stdcall CreateRoundRectRgn ( int , int , int , int , int , int ); 
fcns.thunkname{fcnNum}='voidPtrint32int32int32int32int32int32Thunk';fcns.name{fcnNum}='CreateRoundRectRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% HBRUSH __stdcall CreateSolidBrush ( COLORREF ); 
fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='CreateSolidBrush'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall DeleteDC ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeleteDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DeleteMetaFile ( HMETAFILE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeleteMetaFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DeleteObject ( HGDIOBJ ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeleteObject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall DescribePixelFormat ( HDC , int , UINT , LPPIXELFORMATDESCRIPTOR ); 
fcns.thunkname{fcnNum}='int32voidPtrint32uint32voidPtrThunk';fcns.name{fcnNum}='DescribePixelFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint32', 'tagPIXELFORMATDESCRIPTORPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SwapBuffers ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SwapBuffers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall DrawEscape ( HDC , int , int , LPCSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32cstringThunk';fcns.name{fcnNum}='DrawEscape'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall Ellipse ( HDC , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='Ellipse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int __stdcall EnumObjects ( HDC , int , ENUMOBJECTSPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrlongThunk';fcns.name{fcnNum}='EnumObjects'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall EqualRgn ( HRGN , HRGN ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EqualRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall Escape ( HDC , int , int , LPCSTR , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Escape'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'cstring', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall ExtEscape ( HDC , int , int , LPCSTR , int , LPSTR ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32cstringint32cstringThunk';fcns.name{fcnNum}='ExtEscape'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall ExcludeClipRect ( HDC , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='ExcludeClipRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% HRGN __stdcall ExtCreateRegion ( const XFORM *, DWORD , const RGNDATA *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='ExtCreateRegion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_XFORMPtr', 'ulong', 's_RGNDATAPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ExtFloodFill ( HDC , int , int , COLORREF , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32ulonguint32Thunk';fcns.name{fcnNum}='ExtFloodFill'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'ulong', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall FillRgn ( HDC , HRGN , HBRUSH ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FillRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FloodFill ( HDC , int , int , COLORREF ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32ulongThunk';fcns.name{fcnNum}='FloodFill'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall FrameRgn ( HDC , HRGN , HBRUSH , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='FrameRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetROP2 ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetROP2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetAspectRatioFilterEx ( HDC , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetAspectRatioFilterEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% COLORREF __stdcall GetBkColor ( HDC ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetBkColor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall GetBkMode ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetBkMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% LONG __stdcall GetBitmapBits ( HBITMAP , LONG , LPVOID ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='GetBitmapBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetBitmapDimensionEx ( HBITMAP , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetBitmapDimensionEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetBoundsRect ( HDC , LPRECT , UINT ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='GetBoundsRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetBrushOrgEx ( HDC , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetBrushOrgEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% int __stdcall GetClipBox ( HDC , LPRECT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetClipBox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% int __stdcall GetClipRgn ( HDC , HRGN ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetClipRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall GetMetaRgn ( HDC , HRGN ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetMetaRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% HGDIOBJ __stdcall GetCurrentObject ( HDC , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='GetCurrentObject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall GetCurrentPositionEx ( HDC , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCurrentPositionEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% int __stdcall GetDeviceCaps ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetDeviceCaps'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetDIBits ( HDC , HBITMAP , UINT , UINT , LPVOID , LPBITMAPINFO , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32uint32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='GetDIBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint32', 'uint32', 'voidPtr', 'tagBITMAPINFOPtr', 'uint32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetFontData ( HDC , DWORD , DWORD , LPVOID , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongulongvoidPtrulongThunk';fcns.name{fcnNum}='GetFontData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% int __stdcall GetGraphicsMode ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetGraphicsMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall GetMapMode ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetMapMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetMetaFileBitsEx ( HMETAFILE , UINT , LPVOID ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetMetaFileBitsEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% COLORREF __stdcall GetNearestColor ( HDC , COLORREF ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='GetNearestColor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% UINT __stdcall GetNearestPaletteIndex ( HPALETTE , COLORREF ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetNearestPaletteIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall GetObjectType ( HGDIOBJ ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetObjectType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetPaletteEntries ( HPALETTE , UINT , UINT , LPPALETTEENTRY ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetPaletteEntries'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'tagPALETTEENTRYPtr'};fcnNum=fcnNum+1;
% COLORREF __stdcall GetPixel ( HDC , int , int ); 
fcns.thunkname{fcnNum}='ulongvoidPtrint32int32Thunk';fcns.name{fcnNum}='GetPixel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int __stdcall GetPixelFormat ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetPixelFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall GetPolyFillMode ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetPolyFillMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetRasterizerCaps ( LPRASTERIZER_STATUS , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='GetRasterizerCaps'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_RASTERIZER_STATUSPtr', 'uint32'};fcnNum=fcnNum+1;
% DWORD __stdcall GetRegionData ( HRGN , DWORD , LPRGNDATA ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetRegionData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 's_RGNDATAPtr'};fcnNum=fcnNum+1;
% int __stdcall GetRgnBox ( HRGN , LPRECT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetRgnBox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% HGDIOBJ __stdcall GetStockObject ( int ); 
fcns.thunkname{fcnNum}='voidPtrint32Thunk';fcns.name{fcnNum}='GetStockObject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int __stdcall GetStretchBltMode ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetStretchBltMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetSystemPaletteEntries ( HDC , UINT , UINT , LPPALETTEENTRY ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetSystemPaletteEntries'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'tagPALETTEENTRYPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetSystemPaletteUse ( HDC ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetSystemPaletteUse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall GetTextCharacterExtra ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetTextCharacterExtra'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetTextAlign ( HDC ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetTextAlign'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% COLORREF __stdcall GetTextColor ( HDC ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetTextColor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall GetTextCharset ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetTextCharset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall GetTextCharsetInfo ( HDC , LPFONTSIGNATURE , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetTextCharsetInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagFONTSIGNATUREPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall TranslateCharsetInfo ( DWORD *, LPCHARSETINFO , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='TranslateCharsetInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr', 'CHARSETINFOPtr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall GetFontLanguageInfo ( HDC ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetFontLanguageInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetViewportExtEx ( HDC , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetViewportExtEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetViewportOrgEx ( HDC , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetViewportOrgEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetWindowExtEx ( HDC , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetWindowExtEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetWindowOrgEx ( HDC , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetWindowOrgEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% int __stdcall IntersectClipRect ( HDC , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='IntersectClipRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall InvertRgn ( HDC , HRGN ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='InvertRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall LineDDA ( int , int , int , int , LINEDDAPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32voidPtrlongThunk';fcns.name{fcnNum}='LineDDA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% BOOL __stdcall LineTo ( HDC , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='LineTo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall MaskBlt ( HDC , int , int , int , int , HDC , int , int , HBITMAP , int , int , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32voidPtrint32int32voidPtrint32int32ulongThunk';fcns.name{fcnNum}='MaskBlt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'int32', 'int32', 'voidPtr', 'int32', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall PlgBlt ( HDC , const POINT *, HDC , int , int , int , int , HBITMAP , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32int32int32int32voidPtrint32int32Thunk';fcns.name{fcnNum}='PlgBlt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'voidPtr', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int __stdcall OffsetClipRgn ( HDC , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='OffsetClipRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int __stdcall OffsetRgn ( HRGN , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='OffsetRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall PatBlt ( HDC , int , int , int , int , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32ulongThunk';fcns.name{fcnNum}='PatBlt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall Pie ( HDC , int , int , int , int , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='Pie'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall PlayMetaFile ( HDC , HMETAFILE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PlayMetaFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PaintRgn ( HDC , HRGN ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PaintRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PolyPolygon ( HDC , const POINT *, const INT *, int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PolyPolygon'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall PtInRegion ( HRGN , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='PtInRegion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall PtVisible ( HDC , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='PtVisible'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall RectInRegion ( HRGN , const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='RectInRegion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall RectVisible ( HDC , const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='RectVisible'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall Rectangle ( HDC , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='Rectangle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall RestoreDC ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='RestoreDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall RealizePalette ( HDC ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='RealizePalette'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall RoundRect ( HDC , int , int , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32int32int32Thunk';fcns.name{fcnNum}='RoundRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ResizePalette ( HPALETTE , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='ResizePalette'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall SaveDC ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SaveDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall SelectClipRgn ( HDC , HRGN ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SelectClipRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall ExtSelectClipRgn ( HDC , HRGN , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ExtSelectClipRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall SetMetaRgn ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetMetaRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HGDIOBJ __stdcall SelectObject ( HDC , HGDIOBJ ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SelectObject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% HPALETTE __stdcall SelectPalette ( HDC , HPALETTE , BOOL ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='SelectPalette'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% COLORREF __stdcall SetBkColor ( HDC , COLORREF ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='SetBkColor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% int __stdcall SetBkMode ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetBkMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% LONG __stdcall SetBitmapBits ( HBITMAP , DWORD , const void *); 
fcns.thunkname{fcnNum}='longvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='SetBitmapBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall SetBoundsRect ( HDC , const RECT *, UINT ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='SetBoundsRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall SetDIBits ( HDC , HBITMAP , UINT , UINT , const void *, const BITMAPINFO *, UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32uint32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='SetDIBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint32', 'uint32', 'voidPtr', 'tagBITMAPINFOPtr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall SetDIBitsToDevice ( HDC , int , int , DWORD , DWORD , int , int , UINT , UINT , const void *, const BITMAPINFO *, UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32ulongulongint32int32uint32uint32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='SetDIBitsToDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'ulong', 'ulong', 'int32', 'int32', 'uint32', 'uint32', 'voidPtr', 'tagBITMAPINFOPtr', 'uint32'};fcnNum=fcnNum+1;
% DWORD __stdcall SetMapperFlags ( HDC , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='SetMapperFlags'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% int __stdcall SetGraphicsMode ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetGraphicsMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall SetMapMode ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetMapMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% HMETAFILE __stdcall SetMetaFileBitsEx ( UINT , const BYTE *); 
fcns.thunkname{fcnNum}='voidPtruint32voidPtrThunk';fcns.name{fcnNum}='SetMetaFileBitsEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
% UINT __stdcall SetPaletteEntries ( HPALETTE , UINT , UINT , const PALETTEENTRY *); 
fcns.thunkname{fcnNum}='uint32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='SetPaletteEntries'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'tagPALETTEENTRYPtr'};fcnNum=fcnNum+1;
% COLORREF __stdcall SetPixel ( HDC , int , int , COLORREF ); 
fcns.thunkname{fcnNum}='ulongvoidPtrint32int32ulongThunk';fcns.name{fcnNum}='SetPixel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetPixelV ( HDC , int , int , COLORREF ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32ulongThunk';fcns.name{fcnNum}='SetPixelV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'ulong'};fcnNum=fcnNum+1;
% int __stdcall SetPolyFillMode ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetPolyFillMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall StretchBlt ( HDC , int , int , int , int , HDC , int , int , int , int , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32voidPtrint32int32int32int32ulongThunk';fcns.name{fcnNum}='StretchBlt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'int32', 'int32', 'int32', 'int32', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetRectRgn ( HRGN , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='SetRectRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int __stdcall StretchDIBits ( HDC , int , int , int , int , int , int , int , int , const void *, const BITMAPINFO *, UINT , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32int32int32int32int32voidPtrvoidPtruint32ulongThunk';fcns.name{fcnNum}='StretchDIBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'tagBITMAPINFOPtr', 'uint32', 'ulong'};fcnNum=fcnNum+1;
% int __stdcall SetROP2 ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetROP2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall SetStretchBltMode ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetStretchBltMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% UINT __stdcall SetSystemPaletteUse ( HDC , UINT ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='SetSystemPaletteUse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall SetTextCharacterExtra ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetTextCharacterExtra'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% COLORREF __stdcall SetTextColor ( HDC , COLORREF ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='SetTextColor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% UINT __stdcall SetTextAlign ( HDC , UINT ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='SetTextAlign'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetTextJustification ( HDC , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='SetTextJustification'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall UpdateColors ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='UpdateColors'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PlayMetaFileRecord ( HDC , LPHANDLETABLE , LPMETARECORD , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='PlayMetaFileRecord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagHANDLETABLEPtr', 'tagMETARECORDPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumMetaFile ( HDC , HMETAFILE , ENUMMETAFILEPROC , LPARAM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='EnumMetaFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'FcnPtr', 'long'};fcnNum=fcnNum+1;
% HENHMETAFILE __stdcall CloseEnhMetaFile ( HDC ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CloseEnhMetaFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DeleteEnhMetaFile ( HENHMETAFILE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeleteEnhMetaFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall EnumEnhMetaFile ( HDC , HENHMETAFILE , ENHMETAFILEPROC , LPVOID , const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EnumEnhMetaFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'FcnPtr', 'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetEnhMetaFileHeader ( HENHMETAFILE , UINT , LPENHMETAHEADER ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetEnhMetaFileHeader'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'tagENHMETAHEADERPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetEnhMetaFilePaletteEntries ( HENHMETAFILE , UINT , LPPALETTEENTRY ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetEnhMetaFilePaletteEntries'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'tagPALETTEENTRYPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetWinMetaFileBits ( HENHMETAFILE , UINT , LPBYTE , INT , HDC ); 
fcns.thunkname{fcnNum}='uint32voidPtruint32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetWinMetaFileBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint8Ptr', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PlayEnhMetaFile ( HDC , HENHMETAFILE , const RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PlayEnhMetaFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 's_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PlayEnhMetaFileRecord ( HDC , LPHANDLETABLE , const ENHMETARECORD *, UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='PlayEnhMetaFileRecord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagHANDLETABLEPtr', 'tagENHMETARECORDPtr', 'uint32'};fcnNum=fcnNum+1;
% HENHMETAFILE __stdcall SetEnhMetaFileBits ( UINT , const BYTE *); 
fcns.thunkname{fcnNum}='voidPtruint32voidPtrThunk';fcns.name{fcnNum}='SetEnhMetaFileBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
% HENHMETAFILE __stdcall SetWinMetaFileBits ( UINT , const BYTE *, HDC , const METAFILEPICT *); 
fcns.thunkname{fcnNum}='voidPtruint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SetWinMetaFileBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr', 'voidPtr', 'tagMETAFILEPICTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GdiComment ( HDC , UINT , const BYTE *); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='GdiComment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall AngleArc ( HDC , int , int , DWORD , FLOAT , FLOAT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32ulongFLOATFLOATThunk';fcns.name{fcnNum}='AngleArc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'ulong', 'single', 'single'};fcnNum=fcnNum+1;
% BOOL __stdcall PolyPolyline ( HDC , const POINT *, const DWORD *, DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='PolyPolyline'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'uint32Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall GetWorldTransform ( HDC , LPXFORM ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetWorldTransform'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_XFORMPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetWorldTransform ( HDC , const XFORM *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetWorldTransform'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_XFORMPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ModifyWorldTransform ( HDC , const XFORM *, DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='ModifyWorldTransform'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_XFORMPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall CombineTransform ( LPXFORM , const XFORM *, const XFORM *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CombineTransform'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_XFORMPtr', 's_XFORMPtr', 's_XFORMPtr'};fcnNum=fcnNum+1;
% HBITMAP __stdcall CreateDIBSection ( HDC , const BITMAPINFO *, UINT , void **, HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtruint32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='CreateDIBSection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'tagBITMAPINFOPtr', 'uint32', 'voidPtrPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% UINT __stdcall GetDIBColorTable ( HDC , UINT , UINT , RGBQUAD *); 
fcns.thunkname{fcnNum}='uint32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='GetDIBColorTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'tagRGBQUADPtr'};fcnNum=fcnNum+1;
% UINT __stdcall SetDIBColorTable ( HDC , UINT , UINT , const RGBQUAD *); 
fcns.thunkname{fcnNum}='uint32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='SetDIBColorTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'tagRGBQUADPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetColorAdjustment ( HDC , const COLORADJUSTMENT *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetColorAdjustment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagCOLORADJUSTMENTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetColorAdjustment ( HDC , LPCOLORADJUSTMENT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetColorAdjustment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagCOLORADJUSTMENTPtr'};fcnNum=fcnNum+1;
% HPALETTE __stdcall CreateHalftonePalette ( HDC ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateHalftonePalette'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall EndDoc ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EndDoc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall StartPage ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='StartPage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall EndPage ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EndPage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall AbortDoc ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='AbortDoc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall SetAbortProc ( HDC , ABORTPROC ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetAbortProc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall AbortPath ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='AbortPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ArcTo ( HDC , int , int , int , int , int , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='ArcTo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall BeginPath ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='BeginPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CloseFigure ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CloseFigure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall EndPath ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EndPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FillPath ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FillPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FlattenPath ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FlattenPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall GetPath ( HDC , PPOINT , LPBYTE , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% HRGN __stdcall PathToRegion ( HDC ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='PathToRegion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall PolyDraw ( HDC , const POINT *, const BYTE *, int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PolyDraw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SelectClipPath ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SelectClipPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall SetArcDirection ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetArcDirection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall SetMiterLimit ( HDC , FLOAT , PFLOAT ); 
fcns.thunkname{fcnNum}='int32voidPtrFLOATvoidPtrThunk';fcns.name{fcnNum}='SetMiterLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'single', 'singlePtr'};fcnNum=fcnNum+1;
% BOOL __stdcall StrokeAndFillPath ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='StrokeAndFillPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall StrokePath ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='StrokePath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall WidenPath ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='WidenPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HPEN __stdcall ExtCreatePen ( DWORD , DWORD , const LOGBRUSH *, DWORD , const DWORD *); 
fcns.thunkname{fcnNum}='voidPtrulongulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='ExtCreatePen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'tagLOGBRUSHPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetMiterLimit ( HDC , PFLOAT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetMiterLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'singlePtr'};fcnNum=fcnNum+1;
% int __stdcall GetArcDirection ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetArcDirection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall MoveToEx ( HDC , int , int , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='MoveToEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% HRGN __stdcall CreatePolygonRgn ( const POINT *, int , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='CreatePolygonRgn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagPOINTPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall DPtoLP ( HDC , PPOINT , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='DPtoLP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall LPtoDP ( HDC , PPOINT , int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='LPtoDP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall Polygon ( HDC , const POINT *, int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Polygon'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall Polyline ( HDC , const POINT *, int ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Polyline'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall PolyBezier ( HDC , const POINT *, DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='PolyBezier'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall PolyBezierTo ( HDC , const POINT *, DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='PolyBezierTo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall PolylineTo ( HDC , const POINT *, DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='PolylineTo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetViewportExtEx ( HDC , int , int , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='SetViewportExtEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetViewportOrgEx ( HDC , int , int , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='SetViewportOrgEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetWindowExtEx ( HDC , int , int , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='SetWindowExtEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetWindowOrgEx ( HDC , int , int , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='SetWindowOrgEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall OffsetViewportOrgEx ( HDC , int , int , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='OffsetViewportOrgEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall OffsetWindowOrgEx ( HDC , int , int , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='OffsetWindowOrgEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ScaleViewportExtEx ( HDC , int , int , int , int , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32voidPtrThunk';fcns.name{fcnNum}='ScaleViewportExtEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ScaleWindowExtEx ( HDC , int , int , int , int , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32voidPtrThunk';fcns.name{fcnNum}='ScaleWindowExtEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetBitmapDimensionEx ( HBITMAP , int , int , LPSIZE ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='SetBitmapDimensionEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'tagSIZEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetBrushOrgEx ( HDC , int , int , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='SetBrushOrgEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetDCOrgEx ( HDC , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDCOrgEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FixBrushOrgEx ( HDC , int , int , PPOINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='FixBrushOrgEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall UnrealizeObject ( HGDIOBJ ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='UnrealizeObject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GdiFlush ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='GdiFlush'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% DWORD __stdcall GdiSetBatchLimit ( DWORD ); 
fcns.thunkname{fcnNum}='ulongulongThunk';fcns.name{fcnNum}='GdiSetBatchLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall GdiGetBatchLimit ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GdiGetBatchLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int __stdcall SetICMMode ( HDC , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetICMMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall CheckColorsInGamut ( HDC , LPVOID , LPVOID , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='CheckColorsInGamut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% HANDLE __stdcall GetColorSpace ( HDC ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetColorSpace'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetColorSpace ( HDC , HCOLORSPACE ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetColorSpace'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DeleteColorSpace ( HCOLORSPACE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeleteColorSpace'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetDeviceGammaRamp ( HDC , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDeviceGammaRamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetDeviceGammaRamp ( HDC , LPVOID ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetDeviceGammaRamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ColorMatchToTarget ( HDC , HDC , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='ColorMatchToTarget'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% HPROPSHEETPAGE __stdcall CreatePropertySheetPageA ( LPCPROPSHEETPAGE ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreatePropertySheetPageA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_PSPPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DestroyPropertySheetPage ( HPROPSHEETPAGE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DestroyPropertySheetPage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_PSPPtr'};fcnNum=fcnNum+1;
% void __stdcall InitCommonControls ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='InitCommonControls'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HIMAGELIST __stdcall ImageList_Create ( int , int , UINT , int , int ); 
fcns.thunkname{fcnNum}='voidPtrint32int32uint32int32int32Thunk';fcns.name{fcnNum}='ImageList_Create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_Destroy ( HIMAGELIST ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ImageList_Destroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall ImageList_GetImageCount ( HIMAGELIST ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ImageList_GetImageCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall ImageList_Add ( HIMAGELIST , HBITMAP , HBITMAP ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ImageList_Add'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall ImageList_ReplaceIcon ( HIMAGELIST , int , HICON ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='ImageList_ReplaceIcon'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% COLORREF __stdcall ImageList_SetBkColor ( HIMAGELIST , COLORREF ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='ImageList_SetBkColor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% COLORREF __stdcall ImageList_GetBkColor ( HIMAGELIST himl ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='ImageList_GetBkColor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_SetOverlayImage ( HIMAGELIST , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='ImageList_SetOverlayImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_Draw ( HIMAGELIST , int , HDC , int , int , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32int32uint32Thunk';fcns.name{fcnNum}='ImageList_Draw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_Replace ( HIMAGELIST , int , HBITMAP , HBITMAP ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ImageList_Replace'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall ImageList_AddMasked ( HIMAGELIST , HBITMAP , COLORREF ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='ImageList_AddMasked'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_DrawEx ( HIMAGELIST , int , HDC , int , int , int , int , COLORREF , COLORREF , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32int32int32int32ulongulonguint32Thunk';fcns.name{fcnNum}='ImageList_DrawEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'int32', 'int32', 'int32', 'int32', 'ulong', 'ulong', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_Remove ( HIMAGELIST , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='ImageList_Remove'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% HICON __stdcall ImageList_GetIcon ( HIMAGELIST , int , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32uint32Thunk';fcns.name{fcnNum}='ImageList_GetIcon'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_BeginDrag ( HIMAGELIST , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32Thunk';fcns.name{fcnNum}='ImageList_BeginDrag'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void __stdcall ImageList_EndDrag ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ImageList_EndDrag'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_DragEnter ( HWND , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='ImageList_DragEnter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_DragLeave ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ImageList_DragLeave'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_DragMove ( int , int ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='ImageList_DragMove'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_SetDragCursorImage ( HIMAGELIST , int , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32Thunk';fcns.name{fcnNum}='ImageList_SetDragCursorImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_DragShowNolock ( BOOL ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ImageList_DragShowNolock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% HIMAGELIST __stdcall ImageList_GetDragImage ( POINT *, POINT *); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ImageList_GetDragImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'tagPOINTPtr', 'tagPOINTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_GetIconSize ( HIMAGELIST , int *, int *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ImageList_GetIconSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_SetIconSize ( HIMAGELIST , int , int ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='ImageList_SetIconSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall ImageList_GetImageInfo ( HIMAGELIST , int , IMAGEINFO *); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='ImageList_GetImageInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 's_IMAGEINFOPtr'};fcnNum=fcnNum+1;
% HIMAGELIST __stdcall ImageList_Merge ( HIMAGELIST , int , HIMAGELIST , int , int , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32voidPtrint32int32int32Thunk';fcns.name{fcnNum}='ImageList_Merge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% HWND __stdcall CreateToolbarEx ( HWND , DWORD , UINT , int , HINSTANCE , UINT , LPCTBBUTTON , int , int , int , int , int , UINT ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulonguint32int32voidPtruint32voidPtrint32int32int32int32int32uint32Thunk';fcns.name{fcnNum}='CreateToolbarEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint32', 'int32', 'voidPtr', 'uint32', 's_TBBUTTONPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% HBITMAP __stdcall CreateMappedBitmap ( HINSTANCE , int , UINT , LPCOLORMAP , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32uint32voidPtrint32Thunk';fcns.name{fcnNum}='CreateMappedBitmap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint32', 's_COLORMAPPtr', 'int32'};fcnNum=fcnNum+1;
% void __stdcall MenuHelp ( UINT , WPARAM , LPARAM , HMENU , HINSTANCE , HWND , UINT *); 
fcns.thunkname{fcnNum}='voiduint32uint32longvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MenuHelp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32', 'uint32', 'long', 'voidPtr', 'voidPtr', 'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall ShowHideMenuCtl ( HWND , UINT , LPINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='ShowHideMenuCtl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'int32Ptr'};fcnNum=fcnNum+1;
% void __stdcall GetEffectiveClientRect ( HWND , LPRECT , LPINT ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetEffectiveClientRect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 's_RECTPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall MakeDragList ( HWND ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MakeDragList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void __stdcall DrawInsert ( HWND , HWND , int ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='DrawInsert'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall LBItemFromPt ( HWND , POINT , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrPOINTint32Thunk';fcns.name{fcnNum}='LBItemFromPt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPOINT', 'int32'};fcnNum=fcnNum+1;
% HWND __stdcall CreateUpDownControl ( DWORD , int , int , int , int , HWND , int , HINSTANCE , HWND , int , int , int ); 
fcns.thunkname{fcnNum}='voidPtrulongint32int32int32int32voidPtrint32voidPtrvoidPtrint32int32int32Thunk';fcns.name{fcnNum}='CreateUpDownControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32', 'int32', 'int32', 'voidPtr', 'int32', 'voidPtr', 'voidPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% DWORD __stdcall CommDlgExtendedError ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='CommDlgExtendedError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% LONG __stdcall RegCloseKey ( HKEY ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='RegCloseKey'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegSetKeySecurity ( HKEY , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR ); 
fcns.thunkname{fcnNum}='longvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='RegSetKeySecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 's_SECURITY_DESCRIPTORPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegFlushKey ( HKEY ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='RegFlushKey'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% LONG __stdcall RegGetKeySecurity ( HKEY , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , LPDWORD ); 
fcns.thunkname{fcnNum}='longvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegGetKeySecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 's_SECURITY_DESCRIPTORPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% LONG __stdcall RegNotifyChangeKeyValue ( HKEY , BOOL , DWORD , HANDLE , BOOL ); 
fcns.thunkname{fcnNum}='longvoidPtrint32ulongvoidPtrint32Thunk';fcns.name{fcnNum}='RegNotifyChangeKeyValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'ulong', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall IsValidCodePage ( UINT ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='IsValidCodePage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% UINT __stdcall GetACP ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='GetACP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% UINT __stdcall GetOEMCP ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='GetOEMCP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall GetCPInfo ( UINT , LPCPINFO ); 
fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='GetCPInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 's_cpinfoPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsDBCSLeadByte ( BYTE ); 
fcns.thunkname{fcnNum}='int32uint8Thunk';fcns.name{fcnNum}='IsDBCSLeadByte'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% BOOL __stdcall IsDBCSLeadByteEx ( UINT , BYTE ); 
fcns.thunkname{fcnNum}='int32uint32uint8Thunk';fcns.name{fcnNum}='IsDBCSLeadByteEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint8'};fcnNum=fcnNum+1;
% int __stdcall MultiByteToWideChar ( UINT , DWORD , LPCSTR , int , LPWSTR , int ); 
fcns.thunkname{fcnNum}='int32uint32ulongcstringint32voidPtrint32Thunk';fcns.name{fcnNum}='MultiByteToWideChar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'ulong', 'cstring', 'int32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall WideCharToMultiByte ( UINT , DWORD , LPCWSTR , int , LPSTR , int , LPCSTR , LPBOOL ); 
fcns.thunkname{fcnNum}='int32uint32ulongvoidPtrint32cstringint32cstringvoidPtrThunk';fcns.name{fcnNum}='WideCharToMultiByte'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'ulong', 'uint16Ptr', 'int32', 'cstring', 'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall IsValidLocale ( LCID , DWORD ); 
fcns.thunkname{fcnNum}='int32ulongulongThunk';fcns.name{fcnNum}='IsValidLocale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% LCID __stdcall ConvertDefaultLocale ( LCID ); 
fcns.thunkname{fcnNum}='ulongulongThunk';fcns.name{fcnNum}='ConvertDefaultLocale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% LCID __stdcall GetThreadLocale ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetThreadLocale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall SetThreadLocale ( LCID ); 
fcns.thunkname{fcnNum}='int32ulongThunk';fcns.name{fcnNum}='SetThreadLocale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% LANGID __stdcall GetSystemDefaultLangID ( void ); 
fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='GetSystemDefaultLangID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% LANGID __stdcall GetUserDefaultLangID ( void ); 
fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='GetUserDefaultLangID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% LCID __stdcall GetSystemDefaultLCID ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetSystemDefaultLCID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% LCID __stdcall GetUserDefaultLCID ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetUserDefaultLCID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall ReadConsoleOutputAttribute ( HANDLE , LPWORD , DWORD , COORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongCOORDvoidPtrThunk';fcns.name{fcnNum}='ReadConsoleOutputAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong', 's_COORD', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall WriteConsoleOutputAttribute ( HANDLE , const WORD *, DWORD , COORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongCOORDvoidPtrThunk';fcns.name{fcnNum}='WriteConsoleOutputAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'ulong', 's_COORD', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall FillConsoleOutputAttribute ( HANDLE , WORD , DWORD , COORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtruint16ulongCOORDvoidPtrThunk';fcns.name{fcnNum}='FillConsoleOutputAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'ulong', 's_COORD', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetConsoleMode ( HANDLE , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetConsoleMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetNumberOfConsoleInputEvents ( HANDLE , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetNumberOfConsoleInputEvents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetConsoleScreenBufferInfo ( HANDLE , PCONSOLE_SCREEN_BUFFER_INFO ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetConsoleScreenBufferInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_CONSOLE_SCREEN_BUFFER_INFOPtr'};fcnNum=fcnNum+1;
% COORD __stdcall GetLargestConsoleWindowSize ( HANDLE ); 
fcns.thunkname{fcnNum}='COORDvoidPtrThunk';fcns.name{fcnNum}='GetLargestConsoleWindowSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_COORD'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetConsoleCursorInfo ( HANDLE , PCONSOLE_CURSOR_INFO ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetConsoleCursorInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_CONSOLE_CURSOR_INFOPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall GetNumberOfConsoleMouseButtons ( LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetNumberOfConsoleMouseButtons'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleMode ( HANDLE , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetConsoleMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleActiveScreenBuffer ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetConsoleActiveScreenBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall FlushConsoleInputBuffer ( HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FlushConsoleInputBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleScreenBufferSize ( HANDLE , COORD ); 
fcns.thunkname{fcnNum}='int32voidPtrCOORDThunk';fcns.name{fcnNum}='SetConsoleScreenBufferSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_COORD'};fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleCursorPosition ( HANDLE , COORD ); 
fcns.thunkname{fcnNum}='int32voidPtrCOORDThunk';fcns.name{fcnNum}='SetConsoleCursorPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_COORD'};fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleCursorInfo ( HANDLE , const CONSOLE_CURSOR_INFO *); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetConsoleCursorInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_CONSOLE_CURSOR_INFOPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleWindowInfo ( HANDLE , BOOL , const SMALL_RECT *); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='SetConsoleWindowInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 's_SMALL_RECTPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleTextAttribute ( HANDLE , WORD ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='SetConsoleTextAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleCtrlHandler ( PHANDLER_ROUTINE , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetConsoleCtrlHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall GenerateConsoleCtrlEvent ( DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32ulongulongThunk';fcns.name{fcnNum}='GenerateConsoleCtrlEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall AllocConsole ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='AllocConsole'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall FreeConsole ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='FreeConsole'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HANDLE __stdcall CreateConsoleScreenBuffer ( DWORD , DWORD , const SECURITY_ATTRIBUTES *, DWORD , LPVOID ); 
fcns.thunkname{fcnNum}='voidPtrulongulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='CreateConsoleScreenBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% UINT __stdcall GetConsoleCP ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='GetConsoleCP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleCP ( UINT ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='SetConsoleCP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% UINT __stdcall GetConsoleOutputCP ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='GetConsoleOutputCP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL __stdcall SetConsoleOutputCP ( UINT ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='SetConsoleOutputCP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetConnectionDialog ( HWND , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='WNetConnectionDialog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetDisconnectDialog ( HWND , DWORD ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='WNetDisconnectDialog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% DWORD __stdcall WNetCloseEnum ( HANDLE ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='WNetCloseEnum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall CloseServiceHandle ( SC_HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CloseServiceHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall ControlService ( SC_HANDLE , DWORD , LPSERVICE_STATUS ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='ControlService'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 's_SERVICE_STATUSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall DeleteService ( SC_HANDLE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeleteService'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% SC_LOCK __stdcall LockServiceDatabase ( SC_HANDLE ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LockServiceDatabase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall NotifyBootConfigStatus ( BOOL ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='NotifyBootConfigStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall QueryServiceObjectSecurity ( SC_HANDLE , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='QueryServiceObjectSecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 's_SECURITY_DESCRIPTORPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall QueryServiceStatus ( SC_HANDLE , LPSERVICE_STATUS ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='QueryServiceStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_SERVICE_STATUSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetServiceObjectSecurity ( SC_HANDLE , SECURITY_INFORMATION , PSECURITY_DESCRIPTOR ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='SetServiceObjectSecurity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 's_SECURITY_DESCRIPTORPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SetServiceStatus ( SERVICE_STATUS_HANDLE , LPSERVICE_STATUS ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrThunk';fcns.name{fcnNum}='SetServiceStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 's_SERVICE_STATUSPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall UnlockServiceDatabase ( SC_LOCK ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='UnlockServiceDatabase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall WinLoadTrustProvider ( GUID *); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='WinLoadTrustProvider'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_GUIDPtr'};fcnNum=fcnNum+1;
% LONG __stdcall WinVerifyTrust ( HWND , GUID *, LPVOID ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WinVerifyTrust'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 's_GUIDPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall WinSubmitCertificate ( LPWIN_CERTIFICATE ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='WinSubmitCertificate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_WIN_CERTIFICATEPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall wglCopyContext ( HGLRC , HGLRC , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='wglCopyContext'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% HGLRC __stdcall wglCreateContext ( HDC ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='wglCreateContext'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HGLRC __stdcall wglCreateLayerContext ( HDC , int ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='wglCreateLayerContext'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall wglDeleteContext ( HGLRC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='wglDeleteContext'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HGLRC __stdcall wglGetCurrentContext ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='wglGetCurrentContext'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HDC __stdcall wglGetCurrentDC ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='wglGetCurrentDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% FARPROC __stdcall wglGetProcAddress ( LPCSTR ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='wglGetProcAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% BOOL __stdcall wglMakeCurrent ( HDC , HGLRC ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='wglMakeCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall wglShareLists ( HGLRC , HGLRC ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='wglShareLists'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall wglUseFontBitmapsA ( HDC , DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongThunk';fcns.name{fcnNum}='wglUseFontBitmapsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall wglUseFontBitmapsW ( HDC , DWORD , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongThunk';fcns.name{fcnNum}='wglUseFontBitmapsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall SwapBuffers ( HDC ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SwapBuffers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall wglSwapLayerBuffers ( HDC , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='wglSwapLayerBuffers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% BOOL __stdcall wglUseFontOutlinesA ( HDC , DWORD , DWORD , DWORD , FLOAT , FLOAT , int , LPGLYPHMETRICSFLOAT ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongFLOATFLOATint32voidPtrThunk';fcns.name{fcnNum}='wglUseFontOutlinesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'single', 'single', 'int32', 's_GLYPHMETRICSFLOATPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall wglUseFontOutlinesW ( HDC , DWORD , DWORD , DWORD , FLOAT , FLOAT , int , LPGLYPHMETRICSFLOAT ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongulongFLOATFLOATint32voidPtrThunk';fcns.name{fcnNum}='wglUseFontOutlinesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'single', 'single', 'int32', 's_GLYPHMETRICSFLOATPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall wglDescribeLayerPlane ( HDC , int , int , UINT , LPLAYERPLANEDESCRIPTOR ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32uint32voidPtrThunk';fcns.name{fcnNum}='wglDescribeLayerPlane'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'uint32', 's_LAYERPLANEDESCRIPTORPtr'};fcnNum=fcnNum+1;
% int __stdcall wglSetLayerPaletteEntries ( HDC , int , int , int , COLORREF *); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32voidPtrThunk';fcns.name{fcnNum}='wglSetLayerPaletteEntries'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'ulongPtr'};fcnNum=fcnNum+1;
% int __stdcall wglGetLayerPaletteEntries ( HDC , int , int , int , COLORREF *); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32voidPtrThunk';fcns.name{fcnNum}='wglGetLayerPaletteEntries'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'ulongPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall wglRealizeLayerPalette ( HDC , int , BOOL ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='wglRealizeLayerPalette'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL __stdcall wglSwapLayerBuffers ( HDC , UINT ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='wglSwapLayerBuffers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% struct _TEB * NtCurrentTeb ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='NtCurrentTeb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% LPVOID __stdcall CreateFiber ( DWORD , LPFIBER_START_ROUTINE , LPVOID ); 
fcns.thunkname{fcnNum}='voidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateFiber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% void __stdcall DeleteFiber ( LPVOID ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DeleteFiber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% LPVOID __stdcall ConvertThreadToFiber ( LPVOID ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ConvertThreadToFiber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void __stdcall SwitchToFiber ( LPVOID ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='SwitchToFiber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL __stdcall SwitchToThread ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='SwitchToThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HANDLE __stdcall CreateToolhelp32Snapshot ( DWORD dwFlags , DWORD th32ProcessID ); 
fcns.thunkname{fcnNum}='voidPtrulongulongThunk';fcns.name{fcnNum}='CreateToolhelp32Snapshot'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall Heap32ListFirst ( HANDLE , LPHEAPLIST32 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='Heap32ListFirst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagHEAPLIST32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall Heap32ListNext ( HANDLE , LPHEAPLIST32 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='Heap32ListNext'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagHEAPLIST32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall Heap32First ( LPHEAPENTRY32 , DWORD , DWORD ); 
fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='Heap32First'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagHEAPENTRY32Ptr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% BOOL __stdcall Heap32Next ( LPHEAPENTRY32 ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='Heap32Next'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tagHEAPENTRY32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall Toolhelp32ReadProcessMemory ( DWORD , LPCVOID , LPVOID , DWORD , LPDWORD ); 
fcns.thunkname{fcnNum}='int32ulongvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='Toolhelp32ReadProcessMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall Process32First ( HANDLE , LPPROCESSENTRY32 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='Process32First'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPROCESSENTRY32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall Process32Next ( HANDLE , LPPROCESSENTRY32 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='Process32Next'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagPROCESSENTRY32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall Thread32First ( HANDLE , LPTHREADENTRY32 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='Thread32First'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagTHREADENTRY32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall Thread32Next ( HANDLE , LPTHREADENTRY32 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='Thread32Next'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagTHREADENTRY32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall Module32First ( HANDLE , LPMODULEENTRY32 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='Module32First'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagMODULEENTRY32Ptr'};fcnNum=fcnNum+1;
% BOOL __stdcall Module32Next ( HANDLE , LPMODULEENTRY32 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='Module32Next'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tagMODULEENTRY32Ptr'};fcnNum=fcnNum+1;
structs.s_ABC.packing=1;
structs.s_ABC.members=struct('abcA', 'int32', 'abcB', 'uint32', 'abcC', 'int32');
structs.s_ABCFLOAT.packing=1;
structs.s_ABCFLOAT.members=struct('abcfA', 'single', 'abcfB', 'single', 'abcfC', 'single');
structs.tagACCEL.packing=1;
structs.tagACCEL.members=struct('fVirt', 'uint8', 'key', 'uint16', 'cmd', 'uint16');
structs.s_ACE_HEADER.packing=1;
structs.s_ACE_HEADER.members=struct('AceType', 'uint8', 'AceFlags', 'uint8', 'AceSize', 'uint16');
structs.s_ACCESS_ALLOWED_ACE.packing=1;
structs.s_ACCESS_ALLOWED_ACE.members=struct('Header', 's_ACE_HEADER', 'Mask', 'ulong', 'SidStart', 'ulong');
structs.s_ACCESS_DENIED_ACE.packing=1;
structs.s_ACCESS_DENIED_ACE.members=struct('Header', 's_ACE_HEADER', 'Mask', 'ulong', 'SidStart', 'ulong');
structs.tagACCESSTIMEOUT.packing=1;
structs.tagACCESSTIMEOUT.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong', 'iTimeOutMSec', 'ulong');
structs.s_ACL.packing=1;
structs.s_ACL.members=struct('AclRevision', 'uint8', 'Sbz1', 'uint8', 'AclSize', 'uint16', 'AceCount', 'uint16', 'Sbz2', 'uint16');
structs.s_ACL_REVISION_INFORMATION.packing=1;
structs.s_ACL_REVISION_INFORMATION.members=struct('AclRevision', 'ulong');
structs.s_ACL_SIZE_INFORMATION.packing=1;
structs.s_ACL_SIZE_INFORMATION.members=struct('AceCount', 'ulong', 'AclBytesInUse', 'ulong', 'AclBytesFree', 'ulong');
structs.s_ACTION_HEADER.packing=1;
structs.s_ACTION_HEADER.members=struct('transport_id', 'ulong', 'action_code', 'uint16', 'reserved', 'uint16');
structs.s_ADAPTER_STATUS.packing=1;
structs.s_ADAPTER_STATUS.members=struct('adapter_address', 'uint8#6', 'rev_major', 'uint8', 'reserved0', 'uint8', 'adapter_type', 'uint8', 'rev_minor', 'uint8', 'duration', 'uint16', 'frmr_recv', 'uint16', 'frmr_xmit', 'uint16', 'iframe_recv_err', 'uint16', 'xmit_aborts', 'uint16', 'xmit_success', 'ulong', 'recv_success', 'ulong', 'iframe_xmit_err', 'uint16', 'recv_buff_unavail', 'uint16', 't1_timeouts', 'uint16', 'ti_timeouts', 'uint16', 'reserved1', 'ulong', 'free_ncbs', 'uint16', 'max_cfg_ncbs', 'uint16', 'max_ncbs', 'uint16', 'xmit_buf_unavail', 'uint16', 'max_dgram_size', 'uint16', 'pending_sess', 'uint16', 'max_cfg_sess', 'uint16', 'max_sess', 'uint16', 'max_sess_pkt_size', 'uint16', 'name_count', 'uint16');
structs.s_ADDJOB_INFO_1.packing=1;
structs.s_ADDJOB_INFO_1.members=struct('Path', 'cstring', 'JobId', 'ulong');
structs.tagANIMATIONINFO.packing=1;
structs.tagANIMATIONINFO.members=struct('cbSize', 'uint32', 'iMinAnimate', 'int32');
structs.s_RECT.packing=1;
structs.s_RECT.members=struct('left', 'long', 'top', 'long', 'right', 'long', 'bottom', 'long');
structs.s_RECTL.packing=1;
structs.s_RECTL.members=struct('left', 'long', 'top', 'long', 'right', 'long', 'bottom', 'long');
structs.tagBITMAP.packing=1;
structs.tagBITMAP.members=struct('bmType', 'long', 'bmWidth', 'long', 'bmHeight', 'long', 'bmWidthBytes', 'long', 'bmPlanes', 'uint16', 'bmBitsPixel', 'uint16', 'bmBits', 'voidPtr');
structs.tagBITMAPCOREHEADER.packing=1;
structs.tagBITMAPCOREHEADER.members=struct('bcSize', 'ulong', 'bcWidth', 'uint16', 'bcHeight', 'uint16', 'bcPlanes', 'uint16', 'bcBitCount', 'uint16');
structs.tagRGBTRIPLE.packing=1;
structs.tagRGBTRIPLE.members=struct('rgbtBlue', 'uint8', 'rgbtGreen', 'uint8', 'rgbtRed', 'uint8');
structs.s_BITMAPCOREINFO.packing=1;
structs.s_BITMAPCOREINFO.members=struct('bmciHeader', 'tagBITMAPCOREHEADER', 'bmciColors', 'tagRGBTRIPLE#1');
structs.tagBITMAPFILEHEADER.packing=1;
structs.tagBITMAPFILEHEADER.members=struct('bfType', 'uint16', 'bfSize', 'ulong', 'bfReserved1', 'uint16', 'bfReserved2', 'uint16', 'bfOffBits', 'ulong');
structs.tagBITMAPINFOHEADER.packing=1;
structs.tagBITMAPINFOHEADER.members=struct('biSize', 'ulong', 'biWidth', 'long', 'biHeight', 'long', 'biPlanes', 'uint16', 'biBitCount', 'uint16', 'biCompression', 'ulong', 'biSizeImage', 'ulong', 'biXPelsPerMeter', 'long', 'biYPelsPerMeter', 'long', 'biClrUsed', 'ulong', 'biClrImportant', 'ulong');
structs.tagRGBQUAD.packing=1;
structs.tagRGBQUAD.members=struct('rgbBlue', 'uint8', 'rgbGreen', 'uint8', 'rgbRed', 'uint8', 'rgbReserved', 'uint8');
structs.tagBITMAPINFO.packing=1;
structs.tagBITMAPINFO.members=struct('bmiHeader', 'tagBITMAPINFOHEADER', 'bmiColors', 'tagRGBQUAD#1');
structs.tagCIEXYZ.packing=1;
structs.tagCIEXYZ.members=struct('ciexyzX', 'long', 'ciexyzY', 'long', 'ciexyzZ', 'long');
structs.tagCIEXYZTRIPLE.packing=1;
structs.tagCIEXYZTRIPLE.members=struct('ciexyzRed', 'tagCIEXYZ', 'ciexyzGreen', 'tagCIEXYZ', 'ciexyzBlue', 'tagCIEXYZ');
structs.BITMAPV4HEADER.packing=1;
structs.BITMAPV4HEADER.members=struct('bV4Size', 'ulong', 'bV4Width', 'long', 'bV4Height', 'long', 'bV4Planes', 'uint16', 'bV4BitCount', 'uint16', 'bV4V4Compression', 'ulong', 'bV4SizeImage', 'ulong', 'bV4XPelsPerMeter', 'long', 'bV4YPelsPerMeter', 'long', 'bV4ClrUsed', 'ulong', 'bV4ClrImportant', 'ulong', 'bV4RedMask', 'ulong', 'bV4GreenMask', 'ulong', 'bV4BlueMask', 'ulong', 'bV4AlphaMask', 'ulong', 'bV4CSType', 'ulong', 'bV4Endpoints', 'tagCIEXYZTRIPLE', 'bV4GammaRed', 'ulong', 'bV4GammaGreen', 'ulong', 'bV4GammaBlue', 'ulong');
structs.s_SHITEMID.packing=1;
structs.s_SHITEMID.members=struct('cb', 'uint16', 'abID', 'uint8#1');
structs.s_ITEMIDLIST.packing=1;
structs.s_ITEMIDLIST.members=struct('mkid', 's_SHITEMID');
structs.s_browseinfo.packing=1;
structs.s_browseinfo.members=struct('hwndOwner', 'voidPtr', 'pidlRoot', 's_ITEMIDLISTPtr', 'pszDisplayName', 'cstring', 'lpszTitle', 'cstring', 'ulFlags', 'uint32', 'lpfn', 'FcnPtr', 'lParam', 'long', 'iImage', 'int32');
structs.s_FILETIME.packing=1;
structs.s_FILETIME.members=struct('dwLowDateTime', 'ulong', 'dwHighDateTime', 'ulong');
structs.s_BY_HANDLE_FILE_INFORMATION.packing=1;
structs.s_BY_HANDLE_FILE_INFORMATION.members=struct('dwFileAttributes', 'ulong', 'ftCreationTime', 's_FILETIME', 'ftLastAccessTime', 's_FILETIME', 'ftLastWriteTime', 's_FILETIME', 'dwVolumeSerialNumber', 'ulong', 'nFileSizeHigh', 'ulong', 'nFileSizeLow', 'ulong', 'nNumberOfLinks', 'ulong', 'nFileIndexHigh', 'ulong', 'nFileIndexLow', 'ulong');
structs.s_FIXED.packing=1;
structs.s_FIXED.members=struct('fract', 'uint16', 'value', 'int16');
structs.tagPOINT.packing=1;
structs.tagPOINT.members=struct('x', 'long', 'y', 'long');
structs.tagPOINTFX.packing=1;
structs.tagPOINTFX.members=struct('x', 's_FIXED', 'y', 's_FIXED');
structs.s_POINTL.packing=1;
structs.s_POINTL.members=struct('x', 'long', 'y', 'long');
structs.tagPOINTS.packing=1;
structs.tagPOINTS.members=struct('x', 'int16', 'y', 'int16');
structs.s_tagCANDIDATEFORM.packing=1;
structs.s_tagCANDIDATEFORM.members=struct('dwIndex', 'ulong', 'dwStyle', 'ulong', 'ptCurrentPos', 'tagPOINT', 'rcArea', 's_RECT');
structs.s_tagCANDIDATELIST.packing=1;
structs.s_tagCANDIDATELIST.members=struct('dwSize', 'ulong', 'dwStyle', 'ulong', 'dwCount', 'ulong', 'dwSelection', 'ulong', 'dwPageStart', 'ulong', 'dwPageSize', 'ulong', 'dwOffset', 'ulong#1');
structs.tagCREATESTRUCT.packing=1;
structs.tagCREATESTRUCT.members=struct('lpCreateParams', 'voidPtr', 'hInstance', 'voidPtr', 'hMenu', 'voidPtr', 'hwndParent', 'voidPtr', 'cy', 'int32', 'cx', 'int32', 'y', 'int32', 'x', 'int32', 'style', 'long', 'lpszName', 'cstring', 'lpszClass', 'cstring', 'dwExStyle', 'ulong');
structs.tagCBT_CREATEWND.packing=1;
structs.tagCBT_CREATEWND.members=struct('lpcs', 'tagCREATESTRUCTPtr', 'hwndInsertAfter', 'voidPtr');
structs.tagCBTACTIVATESTRUCT.packing=1;
structs.tagCBTACTIVATESTRUCT.members=struct('fMouse', 'int32', 'hWndActive', 'voidPtr');
structs.s_charrange.packing=1;
structs.s_charrange.members=struct('cpMin', 'long', 'cpMax', 'long');
structs.tagCHARSET.packing=1;
structs.tagCHARSET.members=struct('aflBlock', 'ulong#3', 'flLang', 'ulong');
structs.tagFONTSIGNATURE.packing=1;
structs.tagFONTSIGNATURE.members=struct('fsUsb', 'ulong#4', 'fsCsb', 'ulong#2');
structs.CHARSETINFO.packing=1;
structs.CHARSETINFO.members=struct('ciCharset', 'uint32', 'ciACP', 'uint32', 'fs', 'tagFONTSIGNATURE');
structs.CHOOSECOLOR.packing=1;
structs.CHOOSECOLOR.members=struct('lStructSize', 'ulong', 'hwndOwner', 'voidPtr', 'hInstance', 'voidPtr', 'rgbResult', 'ulong', 'lpCustColors', 'ulongPtr', 'Flags', 'ulong', 'lCustData', 'long', 'lpfnHook', 'FcnPtr', 'lpTemplateName', 'cstring');
structs.tagLOGFONT.packing=1;
structs.tagLOGFONT.members=struct('lfHeight', 'long', 'lfWidth', 'long', 'lfEscapement', 'long', 'lfOrientation', 'long', 'lfWeight', 'long', 'lfItalic', 'uint8', 'lfUnderline', 'uint8', 'lfStrikeOut', 'uint8', 'lfCharSet', 'uint8', 'lfOutPrecision', 'uint8', 'lfClipPrecision', 'uint8', 'lfQuality', 'uint8', 'lfPitchAndFamily', 'uint8', 'lfFaceName', 'int8#32');
structs.CHOOSEFONT.packing=1;
structs.CHOOSEFONT.members=struct('lStructSize', 'ulong', 'hwndOwner', 'voidPtr', 'hDC', 'voidPtr', 'lpLogFont', 'tagLOGFONTPtr', 'iPointSize', 'int32', 'Flags', 'ulong', 'rgbColors', 'ulong', 'lCustData', 'long', 'lpfnHook', 'FcnPtr', 'lpTemplateName', 'cstring', 'hInstance', 'voidPtr', 'lpszStyle', 'cstring', 'nFontType', 'uint16', 'm_MISSING_ALIGNMENT__', 'uint16', 'nSizeMin', 'int32', 'nSizeMax', 'int32');
structs.s_IDA.packing=1;
structs.s_IDA.members=struct('cidl', 'uint32', 'aoffset', 'uint32#1');
structs.tagCLIENTCREATESTRUCT.packing=1;
structs.tagCLIENTCREATESTRUCT.members=struct('hWindowMenu', 'voidPtr', 'idFirstChild', 'uint32');
structs.s_CMInvokeCommandInfo.packing=1;
structs.s_CMInvokeCommandInfo.members=struct('cbSize', 'ulong', 'fMask', 'ulong', 'hwnd', 'voidPtr', 'lpVerb', 'cstring', 'lpParameters', 'cstring', 'lpDirectory', 'cstring', 'nShow', 'int32', 'dwHotKey', 'ulong', 'hIcon', 'voidPtr');
structs.tagCOLORADJUSTMENT.packing=1;
structs.tagCOLORADJUSTMENT.members=struct('caSize', 'uint16', 'caFlags', 'uint16', 'caIlluminantIndex', 'uint16', 'caRedGamma', 'uint16', 'caGreenGamma', 'uint16', 'caBlueGamma', 'uint16', 'caReferenceBlack', 'uint16', 'caReferenceWhite', 'uint16', 'caContrast', 'int16', 'caBrightness', 'int16', 'caColorfulness', 'int16', 'caRedGreenTint', 'int16');
structs.s_COLORMAP.packing=1;
structs.s_COLORMAP.members=struct('from', 'ulong', 'to', 'ulong');
structs.s_DEC.packing=1;
structs.s_DEC.members=struct('wReserved', 'uint16', 'scale', 'uint8', 'sign', 'uint8', 'Hi32', 'ulong', 'Lo64', 'int64');
structs.tagBLOB.packing=1;
structs.tagBLOB.members=struct('cbSize', 'ulong', 'pBlobData', 'uint8Ptr');
structs.s_COMM_CONFIG.packing=1;
structs.s_COMM_CONFIG.members=struct('dwSize', 'ulong', 'wVersion', 'uint16', 'wReserved', 'uint16', 'dcb', 'error', 'dwProviderSubType', 'ulong', 'dwProviderOffset', 'ulong', 'dwProviderSize', 'ulong', 'wcProviderData', 'uint16#1');
structs.s_COMMPROP.packing=1;
structs.s_COMMPROP.members=struct('wPacketLength', 'uint16', 'wPacketVersion', 'uint16', 'dwServiceMask', 'ulong', 'dwReserved1', 'ulong', 'dwMaxTxQueue', 'ulong', 'dwMaxRxQueue', 'ulong', 'dwMaxBaud', 'ulong', 'dwProvSubType', 'ulong', 'dwProvCapabilities', 'ulong', 'dwSettableParams', 'ulong', 'dwSettableBaud', 'ulong', 'wSettableData', 'uint16', 'wSettableStopParity', 'uint16', 'dwCurrentTxQueue', 'ulong', 'dwCurrentRxQueue', 'ulong', 'dwProvSpec1', 'ulong', 'dwProvSpec2', 'ulong', 'wcProvChar', 'uint16#1');
structs.s_COMMTIMEOUTS.packing=1;
structs.s_COMMTIMEOUTS.members=struct('ReadIntervalTimeout', 'ulong', 'ReadTotalTimeoutMultiplier', 'ulong', 'ReadTotalTimeoutConstant', 'ulong', 'WriteTotalTimeoutMultiplier', 'ulong', 'WriteTotalTimeoutConstant', 'ulong');
structs.tagCOMPAREITEMSTRUCT.packing=1;
structs.tagCOMPAREITEMSTRUCT.members=struct('CtlType', 'uint32', 'CtlID', 'uint32', 'hwndItem', 'voidPtr', 'itemID1', 'uint32', 'itemData1', 'ulong', 'itemID2', 'uint32', 'itemData2', 'ulong');
structs.COMPCOLOR.packing=1;
structs.COMPCOLOR.members=struct('crText', 'ulong', 'crBackground', 'ulong', 'dwEffects', 'ulong');
structs.s_tagCOMPOSITIONFORM.packing=1;
structs.s_tagCOMPOSITIONFORM.members=struct('dwStyle', 'ulong', 'ptCurrentPos', 'tagPOINT', 'rcArea', 's_RECT');
structs.s_CONSOLE_CURSOR_INFO.packing=1;
structs.s_CONSOLE_CURSOR_INFO.members=struct('dwSize', 'ulong', 'bVisible', 'int32');
structs.s_COORD.packing=1;
structs.s_COORD.members=struct('X', 'int16', 'Y', 'int16');
structs.s_SMALL_RECT.packing=1;
structs.s_SMALL_RECT.members=struct('Left', 'int16', 'Top', 'int16', 'Right', 'int16', 'Bottom', 'int16');
structs.s_CONSOLE_SCREEN_BUFFER_INFO.packing=1;
structs.s_CONSOLE_SCREEN_BUFFER_INFO.members=struct('dwSize', 's_COORD', 'dwCursorPosition', 's_COORD', 'wAttributes', 'uint16', 'srWindow', 's_SMALL_RECT', 'dwMaximumWindowSize', 's_COORD');
structs.s_FLOATING_SAVE_AREA.packing=1;
structs.s_FLOATING_SAVE_AREA.members=struct('ControlWord', 'ulong', 'StatusWord', 'ulong', 'TagWord', 'ulong', 'ErrorOffset', 'ulong', 'ErrorSelector', 'ulong', 'DataOffset', 'ulong', 'DataSelector', 'ulong', 'RegisterArea', 'uint8#80', 'Cr0NpxState', 'ulong');
structs.s_CONTEXT.packing=1;
structs.s_CONTEXT.members=struct('ContextFlags', 'ulong', 'Dr0', 'ulong', 'Dr1', 'ulong', 'Dr2', 'ulong', 'Dr3', 'ulong', 'Dr6', 'ulong', 'Dr7', 'ulong', 'FloatSave', 's_FLOATING_SAVE_AREA', 'SegGs', 'ulong', 'SegFs', 'ulong', 'SegEs', 'ulong', 'SegDs', 'ulong', 'Edi', 'ulong', 'Esi', 'ulong', 'Ebx', 'ulong', 'Edx', 'ulong', 'Ecx', 'ulong', 'Eax', 'ulong', 'Ebp', 'ulong', 'Eip', 'ulong', 'SegCs', 'ulong', 'EFlags', 'ulong', 'Esp', 'ulong', 'SegSs', 'ulong');
structs.s_LIST_ENTRY.packing=1;
structs.s_LIST_ENTRY.members=struct('Flink', 's_LIST_ENTRYPtr', 'Blink', 's_LIST_ENTRYPtr');
structs.s_CRITICAL_SECTION_DEBUG.packing=1;
structs.s_CRITICAL_SECTION_DEBUG.members=struct('Type', 'uint16', 'CreatorBackTraceIndex', 'uint16', 'CriticalSection', 'voidPtr', 'ProcessLocksList', 's_LIST_ENTRY', 'EntryCount', 'ulong', 'ContentionCount', 'ulong', 'Depth', 'ulong', 'OwnerBackTrace', 'voidPtr#5');
structs.s_CRITICAL_SECTION.packing=1;
structs.s_CRITICAL_SECTION.members=struct('DebugInfo', 's_CRITICAL_SECTION_DEBUGPtr', 'LockCount', 'long', 'RecursionCount', 'long', 'OwningThread', 'voidPtr', 'LockSemaphore', 'voidPtr', 'Reserved', 'ulong');
structs.s_SECURITY_QUALITY_OF_SERVICE.packing=1;
structs.s_SECURITY_QUALITY_OF_SERVICE.members=struct('Length', 'ulong', 'ImpersonationLevel', 'e_SECURITY_IMPERSONATION_LEVEL', 'ContextTrackingMode', 'int32', 'EffectiveOnly', 'uint8');
structs.tagCONVCONTEXT.packing=1;
structs.tagCONVCONTEXT.members=struct('cb', 'uint32', 'wFlags', 'uint32', 'wCountryID', 'uint32', 'iCodePage', 'int32', 'dwLangID', 'ulong', 'dwSecurity', 'ulong', 'qos', 's_SECURITY_QUALITY_OF_SERVICE');
structs.tagCONVINFO.packing=1;
structs.tagCONVINFO.members=struct('cb', 'ulong', 'hUser', 'ulong', 'hConvPartner', 'voidPtr', 'hszSvcPartner', 'voidPtr', 'hszServiceReq', 'voidPtr', 'hszTopic', 'voidPtr', 'hszItem', 'voidPtr', 'wFmt', 'uint32', 'wType', 'uint32', 'wStatus', 'uint32', 'wConvst', 'uint32', 'wLastError', 'uint32', 'hConvList', 'voidPtr', 'ConvCtxt', 'tagCONVCONTEXT', 'hwnd', 'voidPtr', 'hwndPartner', 'voidPtr');
structs.tagCOPYDATASTRUCT.packing=1;
structs.tagCOPYDATASTRUCT.members=struct('dwData', 'ulong', 'cbData', 'ulong', 'lpData', 'voidPtr');
structs.s_cpinfo.packing=1;
structs.s_cpinfo.members=struct('MaxCharSize', 'uint32', 'DefaultChar', 'uint8#2', 'LeadByte', 'uint8#12');
structs.tagCPLINFO.packing=1;
structs.tagCPLINFO.members=struct('idIcon', 'int32', 'idName', 'int32', 'idInfo', 'int32', 'lData', 'long');
structs.s_CREATE_PROCESS_DEBUG_INFO.packing=1;
structs.s_CREATE_PROCESS_DEBUG_INFO.members=struct('hFile', 'voidPtr', 'hProcess', 'voidPtr', 'hThread', 'voidPtr', 'lpBaseOfImage', 'voidPtr', 'dwDebugInfoFileOffset', 'ulong', 'nDebugInfoSize', 'ulong', 'lpThreadLocalBase', 'voidPtr', 'lpStartAddress', 'FcnPtr', 'lpImageName', 'voidPtr', 'fUnicode', 'uint16');
structs.s_CREATE_THREAD_DEBUG_INFO.packing=1;
structs.s_CREATE_THREAD_DEBUG_INFO.members=struct('hThread', 'voidPtr', 'lpThreadLocalBase', 'voidPtr', 'lpStartAddress', 'FcnPtr');
structs.s_currencyfmt.packing=1;
structs.s_currencyfmt.members=struct('NumDigits', 'uint32', 'LeadingZero', 'uint32', 'Grouping', 'uint32', 'lpDecimalSep', 'cstring', 'lpThousandSep', 'cstring', 'NegativeOrder', 'uint32', 'PositiveOrder', 'uint32', 'lpCurrencySymbol', 'cstring');
structs.tagCURSORSHAPE.packing=1;
structs.tagCURSORSHAPE.members=struct('xHotSpot', 'int32', 'yHotSpot', 'int32', 'cx', 'int32', 'cy', 'int32', 'cbWidth', 'int32', 'Planes', 'uint8', 'BitsPixel', 'uint8');
structs.tagCWPRETSTRUCT.packing=1;
structs.tagCWPRETSTRUCT.members=struct('lResult', 'long', 'lParam', 'long', 'wParam', 'uint32', 'message', 'ulong', 'hwnd', 'voidPtr');
structs.tagCWPSTRUCT.packing=1;
structs.tagCWPSTRUCT.members=struct('lParam', 'long', 'wParam', 'uint32', 'message', 'uint32', 'hwnd', 'voidPtr');
structs.s_DATATYPES_INFO_1.packing=1;
structs.s_DATATYPES_INFO_1.members=struct('pName', 'cstring');
structs.tagDDEML_MSG_HOOK_DATA.packing=1;
structs.tagDDEML_MSG_HOOK_DATA.members=struct('uiLo', 'uint32', 'uiHi', 'uint32', 'cbData', 'ulong', 'Data', 'ulong#8');
structs.s_EXCEPTION_RECORD.packing=1;
structs.s_EXCEPTION_RECORD.members=struct('ExceptionCode', 'ulong', 'ExceptionFlags', 'ulong', 'ExceptionRecord', 's_EXCEPTION_RECORDPtr', 'ExceptionAddress', 'voidPtr', 'NumberParameters', 'ulong', 'ExceptionInformation', 'ulong#15');
structs.s_EXCEPTION_DEBUG_INFO.packing=1;
structs.s_EXCEPTION_DEBUG_INFO.members=struct('ExceptionRecord', 's_EXCEPTION_RECORD', 'dwFirstChance', 'ulong');
structs.s_EXIT_PROCESS_DEBUG_INFO.packing=1;
structs.s_EXIT_PROCESS_DEBUG_INFO.members=struct('dwExitCode', 'ulong');
structs.s_EXIT_THREAD_DEBUG_INFO.packing=1;
structs.s_EXIT_THREAD_DEBUG_INFO.members=struct('dwExitCode', 'ulong');
structs.s_LOAD_DLL_DEBUG_INFO.packing=1;
structs.s_LOAD_DLL_DEBUG_INFO.members=struct('hFile', 'voidPtr', 'lpBaseOfDll', 'voidPtr', 'dwDebugInfoFileOffset', 'ulong', 'nDebugInfoSize', 'ulong', 'lpImageName', 'voidPtr', 'fUnicode', 'uint16');
structs.s_UNLOAD_DLL_DEBUG_INFO.packing=1;
structs.s_UNLOAD_DLL_DEBUG_INFO.members=struct('lpBaseOfDll', 'voidPtr');
structs.s_OUTPUT_DEBUG_STRING_INFO.packing=1;
structs.s_OUTPUT_DEBUG_STRING_INFO.members=struct('lpDebugStringData', 'cstring', 'fUnicode', 'uint16', 'nDebugStringLength', 'uint16');
structs.s_RIP_INFO.packing=1;
structs.s_RIP_INFO.members=struct('dwError', 'ulong', 'dwType', 'ulong');
structs.tagDEBUGHOOKINFO.packing=1;
structs.tagDEBUGHOOKINFO.members=struct('idThread', 'ulong', 'idThreadInstaller', 'ulong', 'lParam', 'long', 'wParam', 'uint32', 'code', 'int32');
structs.tagDELETEITEMSTRUCT.packing=1;
structs.tagDELETEITEMSTRUCT.members=struct('CtlType', 'uint32', 'CtlID', 'uint32', 'itemID', 'uint32', 'hwndItem', 'voidPtr', 'itemData', 'uint32');
structs.s_DEV_BROADCAST_HDR.packing=1;
structs.s_DEV_BROADCAST_HDR.members=struct('dbch_size', 'ulong', 'dbch_devicetype', 'ulong', 'dbch_reserved', 'ulong');
structs.s_DEV_BROADCAST_OEM.packing=1;
structs.s_DEV_BROADCAST_OEM.members=struct('dbco_size', 'ulong', 'dbco_devicetype', 'ulong', 'dbco_reserved', 'ulong', 'dbco_identifier', 'ulong', 'dbco_suppfunc', 'ulong');
structs.s_DEV_BROADCAST_PORT.packing=1;
structs.s_DEV_BROADCAST_PORT.members=struct('dbcp_size', 'ulong', 'dbcp_devicetype', 'ulong', 'dbcp_reserved', 'ulong', 'dbcp_name', 'int8#1');
structs.s_DEV_BROADCAST_USERDEFINED.packing=1;
structs.s_DEV_BROADCAST_USERDEFINED.members=struct('dbud_dbh', 's_DEV_BROADCAST_HDR', 'dbud_szName', 'int8#1', 'dbud_rgbUserDefined', 'uint8#1');
structs.s_DEV_BROADCAST_VOLUME.packing=1;
structs.s_DEV_BROADCAST_VOLUME.members=struct('dbcv_size', 'ulong', 'dbcv_devicetype', 'ulong', 'dbcv_reserved', 'ulong', 'dbcv_unitmask', 'ulong', 'dbcv_flags', 'uint16');
structs.s_devicemode.packing=1;
structs.s_devicemode.members=struct('dmDeviceName', 'uint8#32', 'dmSpecVersion', 'uint16', 'dmDriverVersion', 'uint16', 'dmSize', 'uint16', 'dmDriverExtra', 'uint16', 'dmFields', 'ulong', 'dmOrientation', 'int16', 'dmPaperSize', 'int16', 'dmPaperLength', 'int16', 'dmPaperWidth', 'int16', 'dmScale', 'int16', 'dmCopies', 'int16', 'dmDefaultSource', 'int16', 'dmPrintQuality', 'int16', 'dmColor', 'int16', 'dmDuplex', 'int16', 'dmYResolution', 'int16', 'dmTTOption', 'int16', 'dmCollate', 'int16', 'dmFormName', 'uint8#32', 'dmLogPixels', 'uint16', 'dmBitsPerPel', 'ulong', 'dmPelsWidth', 'ulong', 'dmPelsHeight', 'ulong', 'dmDisplayFlags', 'ulong', 'dmDisplayFrequency', 'ulong', 'dmICMMethod', 'ulong', 'dmICMIntent', 'ulong', 'dmMediaType', 'ulong', 'dmDitherType', 'ulong', 'dmICCManufacturer', 'ulong', 'dmICCModel', 'ulong');
structs.tagDEVNAMES.packing=1;
structs.tagDEVNAMES.members=struct('wDriverOffset', 'uint16', 'wDeviceOffset', 'uint16', 'wOutputOffset', 'uint16', 'wDefault', 'uint16');
structs.tagDIBSECTION.packing=1;
structs.tagDIBSECTION.members=struct('dsBm', 'tagBITMAP', 'dsBmih', 'tagBITMAPINFOHEADER', 'dsBitfields', 'ulong#3', 'dshSection', 'voidPtr', 'dsOffset', 'ulong');
structs.DLGITEMTEMPLATE.packing=1;
structs.DLGITEMTEMPLATE.members=struct('style', 'ulong', 'dwExtendedStyle', 'ulong', 'x', 'int16', 'y', 'int16', 'cx', 'int16', 'cy', 'int16', 'id', 'uint16');
structs.DLGTEMPLATE.packing=1;
structs.DLGTEMPLATE.members=struct('style', 'ulong', 'dwExtendedStyle', 'ulong', 'cdit', 'uint16', 'x', 'int16', 'y', 'int16', 'cx', 'int16', 'cy', 'int16');
structs.s_DOC_INFO_1.packing=1;
structs.s_DOC_INFO_1.members=struct('pDocName', 'cstring', 'pOutputFile', 'cstring', 'pDatatype', 'cstring');
structs.s_DOC_INFO_2.packing=1;
structs.s_DOC_INFO_2.members=struct('pDocName', 'cstring', 'pOutputFile', 'cstring', 'pDatatype', 'cstring', 'dwMode', 'ulong', 'JobId', 'ulong');
structs.DOCINFO.packing=1;
structs.DOCINFO.members=struct('cbSize', 'int32', 'lpszDocName', 'cstring', 'lpszOutput', 'cstring', 'lpszDatatype', 'cstring', 'fwType', 'ulong');
structs.DRAGLISTINFO.packing=1;
structs.DRAGLISTINFO.members=struct('uNotification', 'uint32', 'hWnd', 'voidPtr', 'ptCursor', 'tagPOINT');
structs.tagDRAWITEMSTRUCT.packing=1;
structs.tagDRAWITEMSTRUCT.members=struct('CtlType', 'uint32', 'CtlID', 'uint32', 'itemID', 'uint32', 'itemAction', 'uint32', 'itemState', 'uint32', 'hwndItem', 'voidPtr', 'hDC', 'voidPtr', 'rcItem', 's_RECT', 'itemData', 'ulong');
structs.DRAWTEXTPARAMS.packing=1;
structs.DRAWTEXTPARAMS.members=struct('cbSize', 'uint32', 'iTabLength', 'int32', 'iLeftMargin', 'int32', 'iRightMargin', 'int32', 'uiLengthDrawn', 'uint32');
structs.s_DRIVER_INFO_1.packing=1;
structs.s_DRIVER_INFO_1.members=struct('pName', 'cstring');
structs.s_DRIVER_INFO_2.packing=1;
structs.s_DRIVER_INFO_2.members=struct('cVersion', 'ulong', 'pName', 'cstring', 'pEnvironment', 'cstring', 'pDriverPath', 'cstring', 'pDataFile', 'cstring', 'pConfigFile', 'cstring');
structs.s_DRIVER_INFO_3.packing=1;
structs.s_DRIVER_INFO_3.members=struct('cVersion', 'ulong', 'pName', 'cstring', 'pEnvironment', 'cstring', 'pDriverPath', 'cstring', 'pDataFile', 'cstring', 'pConfigFile', 'cstring', 'pHelpFile', 'cstring', 'pDependentFiles', 'cstring', 'pMonitorName', 'cstring', 'pDefaultDataType', 'cstring');
structs.s_editstream.packing=1;
structs.s_editstream.members=struct('dwCookie', 'ulong', 'dwError', 'ulong', 'pfnCallback', 'FcnPtr');
structs.tagEMR.packing=1;
structs.tagEMR.members=struct('iType', 'ulong', 'nSize', 'ulong');
structs.tagEMRANGLEARC.packing=1;
structs.tagEMRANGLEARC.members=struct('emr', 'tagEMR', 'ptlCenter', 's_POINTL', 'nRadius', 'ulong', 'eStartAngle', 'single', 'eSweepAngle', 'single');
structs.tagEMRARC.packing=1;
structs.tagEMRARC.members=struct('emr', 'tagEMR', 'rclBox', 's_RECTL', 'ptlStart', 's_POINTL', 'ptlEnd', 's_POINTL');
structs.s_XFORM.packing=1;
structs.s_XFORM.members=struct('eM11', 'single', 'eM12', 'single', 'eM21', 'single', 'eM22', 'single', 'eDx', 'single', 'eDy', 'single');
structs.tagEMRBITBLT.packing=1;
structs.tagEMRBITBLT.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'xDest', 'long', 'yDest', 'long', 'cxDest', 'long', 'cyDest', 'long', 'dwRop', 'ulong', 'xSrc', 'long', 'ySrc', 'long', 'xformSrc', 's_XFORM', 'crBkColorSrc', 'ulong', 'iUsageSrc', 'ulong', 'offBmiSrc', 'ulong', 'offBitsSrc', 'ulong', 'cbBitsSrc', 'ulong');
structs.tagLOGBRUSH.packing=1;
structs.tagLOGBRUSH.members=struct('lbStyle', 'uint32', 'lbColor', 'ulong', 'lbHatch', 'long');
structs.tagEMRCREATEBRUSHINDIRECT.packing=1;
structs.tagEMRCREATEBRUSHINDIRECT.members=struct('emr', 'tagEMR', 'ihBrush', 'ulong', 'lb', 'tagLOGBRUSH');
structs.tagLOGCOLORSPACE.packing=1;
structs.tagLOGCOLORSPACE.members=struct('lcsSignature', 'ulong', 'lcsVersion', 'ulong', 'lcsSize', 'ulong', 'lcsCSType', 'long', 'lcsIntent', 'long', 'lcsEndpoints', 'tagCIEXYZTRIPLE', 'lcsGammaRed', 'ulong', 'lcsGammaGreen', 'ulong', 'lcsGammaBlue', 'ulong', 'lcsFilename', 'int8#260');
structs.tagEMRCREATECOLORSPACE.packing=1;
structs.tagEMRCREATECOLORSPACE.members=struct('emr', 'tagEMR', 'ihCS', 'ulong', 'lcs', 'tagLOGCOLORSPACE');
structs.tagEMRCREATEDIBPATTERNBRUSHPT.packing=1;
structs.tagEMRCREATEDIBPATTERNBRUSHPT.members=struct('emr', 'tagEMR', 'ihBrush', 'ulong', 'iUsage', 'ulong', 'offBmi', 'ulong', 'cbBmi', 'ulong', 'offBits', 'ulong', 'cbBits', 'ulong');
structs.tagEMRCREATEMONOBRUSH.packing=1;
structs.tagEMRCREATEMONOBRUSH.members=struct('emr', 'tagEMR', 'ihBrush', 'ulong', 'iUsage', 'ulong', 'offBmi', 'ulong', 'cbBmi', 'ulong', 'offBits', 'ulong', 'cbBits', 'ulong');
structs.tagPALETTEENTRY.packing=1;
structs.tagPALETTEENTRY.members=struct('peRed', 'uint8', 'peGreen', 'uint8', 'peBlue', 'uint8', 'peFlags', 'uint8');
structs.tagLOGPALETTE.packing=1;
structs.tagLOGPALETTE.members=struct('palVersion', 'uint16', 'palNumEntries', 'uint16', 'palPalEntry', 'tagPALETTEENTRY#1');
structs.tagEMRCREATEPALETTE.packing=1;
structs.tagEMRCREATEPALETTE.members=struct('emr', 'tagEMR', 'ihPal', 'ulong', 'lgpl', 'tagLOGPALETTE');
structs.tagLOGPEN.packing=1;
structs.tagLOGPEN.members=struct('lopnStyle', 'uint32', 'lopnWidth', 'tagPOINT', 'lopnColor', 'ulong');
structs.tagEMRCREATEPEN.packing=1;
structs.tagEMRCREATEPEN.members=struct('emr', 'tagEMR', 'ihPen', 'ulong', 'lopn', 'tagLOGPEN');
structs.tagEMRELLIPSE.packing=1;
structs.tagEMRELLIPSE.members=struct('emr', 'tagEMR', 'rclBox', 's_RECTL');
structs.tagEMREOF.packing=1;
structs.tagEMREOF.members=struct('emr', 'tagEMR', 'nPalEntries', 'ulong', 'offPalEntries', 'ulong', 'nSizeLast', 'ulong');
structs.tagEMREXCLUDECLIPRECT.packing=1;
structs.tagEMREXCLUDECLIPRECT.members=struct('emr', 'tagEMR', 'rclClip', 's_RECTL');
structs.tagPANOSE.packing=1;
structs.tagPANOSE.members=struct('bFamilyType', 'uint8', 'bSerifStyle', 'uint8', 'bWeight', 'uint8', 'bProportion', 'uint8', 'bContrast', 'uint8', 'bStrokeVariation', 'uint8', 'bArmStyle', 'uint8', 'bLetterform', 'uint8', 'bMidline', 'uint8', 'bXHeight', 'uint8');
structs.tagEXTLOGFONT.packing=1;
structs.tagEXTLOGFONT.members=struct('elfLogFont', 'tagLOGFONT', 'elfFullName', 'uint8#64', 'elfStyle', 'uint8#32', 'elfVersion', 'ulong', 'elfStyleSize', 'ulong', 'elfMatch', 'ulong', 'elfReserved', 'ulong', 'elfVendorId', 'uint8#4', 'elfCulture', 'ulong', 'elfPanose', 'tagPANOSE');
structs.tagEMREXTCREATEFONTINDIRECTW.packing=1;
structs.tagEMREXTCREATEFONTINDIRECTW.members=struct('emr', 'tagEMR', 'ihFont', 'ulong', 'elfw', 'tagEXTLOGFONT');
structs.tagEXTLOGPEN.packing=1;
structs.tagEXTLOGPEN.members=struct('elpPenStyle', 'uint32', 'elpWidth', 'uint32', 'elpBrushStyle', 'uint32', 'elpColor', 'ulong', 'elpHatch', 'long', 'elpNumEntries', 'ulong', 'elpStyleEntry', 'ulong#1');
structs.tagEMREXTCREATEPEN.packing=1;
structs.tagEMREXTCREATEPEN.members=struct('emr', 'tagEMR', 'ihPen', 'ulong', 'offBmi', 'ulong', 'cbBmi', 'ulong', 'offBits', 'ulong', 'cbBits', 'ulong', 'elp', 'tagEXTLOGPEN');
structs.tagEMREXTFLOODFILL.packing=1;
structs.tagEMREXTFLOODFILL.members=struct('emr', 'tagEMR', 'ptlStart', 's_POINTL', 'crColor', 'ulong', 'iMode', 'ulong');
structs.tagEMREXTSELECTCLIPRGN.packing=1;
structs.tagEMREXTSELECTCLIPRGN.members=struct('emr', 'tagEMR', 'cbRgnData', 'ulong', 'iMode', 'ulong', 'RgnData', 'uint8#1');
structs.tagEMRTEXT.packing=1;
structs.tagEMRTEXT.members=struct('ptlReference', 's_POINTL', 'nChars', 'ulong', 'offString', 'ulong', 'fOptions', 'ulong', 'rcl', 's_RECTL', 'offDx', 'ulong');
structs.tagEMREXTTEXTOUTA.packing=1;
structs.tagEMREXTTEXTOUTA.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'iGraphicsMode', 'ulong', 'exScale', 'single', 'eyScale', 'single', 'emrtext', 'tagEMRTEXT');
structs.tagEMRFILLPATH.packing=1;
structs.tagEMRFILLPATH.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL');
structs.tagEMRFILLRGN.packing=1;
structs.tagEMRFILLRGN.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'cbRgnData', 'ulong', 'ihBrush', 'ulong', 'RgnData', 'uint8#1');
structs.tagEMRFORMAT.packing=1;
structs.tagEMRFORMAT.members=struct('dSignature', 'ulong', 'nVersion', 'ulong', 'cbData', 'ulong', 'offData', 'ulong');
structs.tagSIZE.packing=1;
structs.tagSIZE.members=struct('cx', 'long', 'cy', 'long');
structs.tagEMRFRAMERGN.packing=1;
structs.tagEMRFRAMERGN.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'cbRgnData', 'ulong', 'ihBrush', 'ulong', 'szlStroke', 'tagSIZE', 'RgnData', 'uint8#1');
structs.tagEMRGDICOMMENT.packing=1;
structs.tagEMRGDICOMMENT.members=struct('emr', 'tagEMR', 'cbData', 'ulong', 'Data', 'uint8#1');
structs.tagEMRINVERTRGN.packing=1;
structs.tagEMRINVERTRGN.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'cbRgnData', 'ulong', 'RgnData', 'uint8#1');
structs.tagEMRLINETO.packing=1;
structs.tagEMRLINETO.members=struct('emr', 'tagEMR', 'ptl', 's_POINTL');
structs.tagEMRMASKBLT.packing=1;
structs.tagEMRMASKBLT.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'xDest', 'long', 'yDest', 'long', 'cxDest', 'long', 'cyDest', 'long', 'dwRop', 'ulong', 'xSrc', 'long', 'ySrc', 'long', 'xformSrc', 's_XFORM', 'crBkColorSrc', 'ulong', 'iUsageSrc', 'ulong', 'offBmiSrc', 'ulong', 'cbBmiSrc', 'ulong', 'offBitsSrc', 'ulong', 'cbBitsSrc', 'ulong', 'xMask', 'long', 'yMask', 'long', 'iUsageMask', 'ulong', 'offBmiMask', 'ulong', 'cbBmiMask', 'ulong', 'offBitsMask', 'ulong', 'cbBitsMask', 'ulong');
structs.tagEMRMODIFYWORLDTRANSFORM.packing=1;
structs.tagEMRMODIFYWORLDTRANSFORM.members=struct('emr', 'tagEMR', 'xform', 's_XFORM', 'iMode', 'ulong');
structs.tagEMROFFSETCLIPRGN.packing=1;
structs.tagEMROFFSETCLIPRGN.members=struct('emr', 'tagEMR', 'ptlOffset', 's_POINTL');
structs.tagEMRPLGBLT.packing=1;
structs.tagEMRPLGBLT.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'aptlDest', 's_POINTL#3', 'xSrc', 'long', 'ySrc', 'long', 'cxSrc', 'long', 'cySrc', 'long', 'xformSrc', 's_XFORM', 'crBkColorSrc', 'ulong', 'iUsageSrc', 'ulong', 'offBmiSrc', 'ulong', 'cbBmiSrc', 'ulong', 'offBitsSrc', 'ulong', 'cbBitsSrc', 'ulong', 'xMask', 'long', 'yMask', 'long', 'iUsageMask', 'ulong', 'offBmiMask', 'ulong', 'cbBmiMask', 'ulong', 'offBitsMask', 'ulong', 'cbBitsMask', 'ulong');
structs.tagEMRPOLYDRAW.packing=1;
structs.tagEMRPOLYDRAW.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'cptl', 'ulong', 'aptl', 's_POINTL#1', 'abTypes', 'uint8#1');
structs.tagEMRPOLYDRAW16.packing=1;
structs.tagEMRPOLYDRAW16.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'cpts', 'ulong', 'apts', 'tagPOINTS#1', 'abTypes', 'uint8#1');
structs.tagEMRPOLYLINE.packing=1;
structs.tagEMRPOLYLINE.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'cptl', 'ulong', 'aptl', 's_POINTL#1');
structs.tagEMRPOLYLINE16.packing=1;
structs.tagEMRPOLYLINE16.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'cpts', 'ulong', 'apts', 's_POINTL#1');
structs.tagEMRPOLYPOLYLINE.packing=1;
structs.tagEMRPOLYPOLYLINE.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'nPolys', 'ulong', 'cptl', 'ulong', 'aPolyCounts', 'ulong#1', 'aptl', 's_POINTL#1');
structs.tagEMRPOLYPOLYLINE16.packing=1;
structs.tagEMRPOLYPOLYLINE16.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'nPolys', 'ulong', 'cpts', 'ulong', 'aPolyCounts', 'ulong#1', 'apts', 'tagPOINTS#1');
structs.tagEMRPOLYTEXTOUTA.packing=1;
structs.tagEMRPOLYTEXTOUTA.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'iGraphicsMode', 'ulong', 'exScale', 'single', 'eyScale', 'single', 'cStrings', 'long', 'aemrtext', 'tagEMRTEXT#1');
structs.tagEMRRESIZEPALETTE.packing=1;
structs.tagEMRRESIZEPALETTE.members=struct('emr', 'tagEMR', 'ihPal', 'ulong', 'cEntries', 'ulong');
structs.tagEMRRESTOREDC.packing=1;
structs.tagEMRRESTOREDC.members=struct('emr', 'tagEMR', 'iRelative', 'long');
structs.tagEMRROUNDRECT.packing=1;
structs.tagEMRROUNDRECT.members=struct('emr', 'tagEMR', 'rclBox', 's_RECTL', 'szlCorner', 'tagSIZE');
structs.tagEMRSCALEVIEWPORTEXTEX.packing=1;
structs.tagEMRSCALEVIEWPORTEXTEX.members=struct('emr', 'tagEMR', 'xNum', 'long', 'xDenom', 'long', 'yNum', 'long', 'yDenom', 'long');
structs.tagEMRSELECTCOLORSPACE.packing=1;
structs.tagEMRSELECTCOLORSPACE.members=struct('emr', 'tagEMR', 'ihCS', 'ulong');
structs.tagEMRSELECTOBJECT.packing=1;
structs.tagEMRSELECTOBJECT.members=struct('emr', 'tagEMR', 'ihObject', 'ulong');
structs.tagEMRSELECTPALETTE.packing=1;
structs.tagEMRSELECTPALETTE.members=struct('emr', 'tagEMR', 'ihPal', 'ulong');
structs.tagEMRSETARCDIRECTION.packing=1;
structs.tagEMRSETARCDIRECTION.members=struct('emr', 'tagEMR', 'iArcDirection', 'ulong');
structs.tagEMRSETTEXTCOLOR.packing=1;
structs.tagEMRSETTEXTCOLOR.members=struct('emr', 'tagEMR', 'crColor', 'ulong');
structs.tagEMRSETCOLORADJUSTMENT.packing=1;
structs.tagEMRSETCOLORADJUSTMENT.members=struct('emr', 'tagEMR', 'ColorAdjustment', 'tagCOLORADJUSTMENT');
structs.tagEMRSETDIBITSTODEVICE.packing=1;
structs.tagEMRSETDIBITSTODEVICE.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'xDest', 'long', 'yDest', 'long', 'xSrc', 'long', 'ySrc', 'long', 'cxSrc', 'long', 'cySrc', 'long', 'offBmiSrc', 'ulong', 'cbBmiSrc', 'ulong', 'offBitsSrc', 'ulong', 'cbBitsSrc', 'ulong', 'iUsageSrc', 'ulong', 'iStartScan', 'ulong', 'cScans', 'ulong');
structs.tagEMRSETMAPPERFLAGS.packing=1;
structs.tagEMRSETMAPPERFLAGS.members=struct('emr', 'tagEMR', 'dwFlags', 'ulong');
structs.tagEMRSETMITERLIMIT.packing=1;
structs.tagEMRSETMITERLIMIT.members=struct('emr', 'tagEMR', 'eMiterLimit', 'single');
structs.tagEMRSETPALETTEENTRIES.packing=1;
structs.tagEMRSETPALETTEENTRIES.members=struct('emr', 'tagEMR', 'ihPal', 'ulong', 'iStart', 'ulong', 'cEntries', 'ulong', 'aPalEntries', 'tagPALETTEENTRY#1');
structs.tagEMRSETPIXELV.packing=1;
structs.tagEMRSETPIXELV.members=struct('emr', 'tagEMR', 'ptlPixel', 's_POINTL', 'crColor', 'ulong');
structs.tagEMRSETVIEWPORTEXTEX.packing=1;
structs.tagEMRSETVIEWPORTEXTEX.members=struct('emr', 'tagEMR', 'szlExtent', 'tagSIZE');
structs.tagEMRSETVIEWPORTORGEX.packing=1;
structs.tagEMRSETVIEWPORTORGEX.members=struct('emr', 'tagEMR', 'ptlOrigin', 's_POINTL');
structs.tagEMRSETWORLDTRANSFORM.packing=1;
structs.tagEMRSETWORLDTRANSFORM.members=struct('emr', 'tagEMR', 'xform', 's_XFORM');
structs.tagEMRSTRETCHBLT.packing=1;
structs.tagEMRSTRETCHBLT.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'xDest', 'long', 'yDest', 'long', 'cxDest', 'long', 'cyDest', 'long', 'dwRop', 'ulong', 'xSrc', 'long', 'ySrc', 'long', 'xformSrc', 's_XFORM', 'crBkColorSrc', 'ulong', 'iUsageSrc', 'ulong', 'offBmiSrc', 'ulong', 'cbBmiSrc', 'ulong', 'offBitsSrc', 'ulong', 'cbBitsSrc', 'ulong', 'cxSrc', 'long', 'cySrc', 'long');
structs.tagEMRSTRETCHDIBITS.packing=1;
structs.tagEMRSTRETCHDIBITS.members=struct('emr', 'tagEMR', 'rclBounds', 's_RECTL', 'xDest', 'long', 'yDest', 'long', 'xSrc', 'long', 'ySrc', 'long', 'cxSrc', 'long', 'cySrc', 'long', 'offBmiSrc', 'ulong', 'cbBmiSrc', 'ulong', 'offBitsSrc', 'ulong', 'cbBitsSrc', 'ulong', 'iUsageSrc', 'ulong', 'dwRop', 'ulong', 'cxDest', 'long', 'cyDest', 'long');
structs.tagABORTPATH.packing=1;
structs.tagABORTPATH.members=struct('emr', 'tagEMR');
structs.tagEMRSELECTCLIPPATH.packing=1;
structs.tagEMRSELECTCLIPPATH.members=struct('emr', 'tagEMR', 'iMode', 'ulong');
structs.tagNMHDR.packing=1;
structs.tagNMHDR.members=struct('hwndFrom', 'voidPtr', 'idFrom', 'uint32', 'code', 'uint32');
structs.s_encorrecttext.packing=1;
structs.s_encorrecttext.members=struct('nmhdr', 'tagNMHDR', 'chrg', 's_charrange', 'seltyp', 'uint16');
structs.s_endropfiles.packing=1;
structs.s_endropfiles.members=struct('nmhdr', 'tagNMHDR', 'hDrop', 'voidPtr', 'cp', 'long', 'fProtected', 'int32');
structs.ENSAVECLIPBOARD.packing=1;
structs.ENSAVECLIPBOARD.members=struct('nmhdr', 'tagNMHDR', 'cObjectCount', 'long', 'cch', 'long');
structs.ENOLEOPFAILED.packing=1;
structs.ENOLEOPFAILED.members=struct('nmhdr', 'tagNMHDR', 'iob', 'long', 'lOper', 'long', 'hr', 'long');
structs.tagENHMETAHEADER.packing=1;
structs.tagENHMETAHEADER.members=struct('iType', 'ulong', 'nSize', 'ulong', 'rclBounds', 's_RECTL', 'rclFrame', 's_RECTL', 'dSignature', 'ulong', 'nVersion', 'ulong', 'nBytes', 'ulong', 'nRecords', 'ulong', 'nHandles', 'uint16', 'sReserved', 'uint16', 'nDescription', 'ulong', 'offDescription', 'ulong', 'nPalEntries', 'ulong', 'szlDevice', 'tagSIZE', 'szlMillimeters', 'tagSIZE');
structs.tagENHMETARECORD.packing=1;
structs.tagENHMETARECORD.members=struct('iType', 'ulong', 'nSize', 'ulong', 'dParm', 'ulong#1');
structs.s_enprotected.packing=1;
structs.s_enprotected.members=struct('nmhdr', 'tagNMHDR', 'msg', 'uint32', 'wParam', 'uint32', 'lParam', 'long', 'chrg', 's_charrange');
structs.s_SERVICE_STATUS.packing=1;
structs.s_SERVICE_STATUS.members=struct('dwServiceType', 'ulong', 'dwCurrentState', 'ulong', 'dwControlsAccepted', 'ulong', 'dwWin32ExitCode', 'ulong', 'dwServiceSpecificExitCode', 'ulong', 'dwCheckPoint', 'ulong', 'dwWaitHint', 'ulong');
structs.s_ENUM_SERVICE_STATUS.packing=1;
structs.s_ENUM_SERVICE_STATUS.members=struct('lpServiceName', 'cstring', 'lpDisplayName', 'cstring', 'ServiceStatus', 's_SERVICE_STATUS');
structs.tagENUMLOGFONT.packing=1;
structs.tagENUMLOGFONT.members=struct('elfLogFont', 'tagLOGFONT', 'elfFullName', 'uint8#64', 'elfStyle', 'uint8#32');
structs.tagENUMLOGFONTEX.packing=1;
structs.tagENUMLOGFONTEX.members=struct('elfLogFont', 'tagLOGFONT', 'elfFullName', 'uint8#64', 'elfStyle', 'uint8#32', 'elfScript', 'uint8#32');
structs.s_EVENTLOGRECORD.packing=1;
structs.s_EVENTLOGRECORD.members=struct('Length', 'ulong', 'Reserved', 'ulong', 'RecordNumber', 'ulong', 'TimeGenerated', 'ulong', 'TimeWritten', 'ulong', 'EventID', 'ulong', 'EventType', 'uint16', 'NumStrings', 'uint16', 'EventCategory', 'uint16', 'ReservedFlags', 'uint16', 'ClosingRecordNumber', 'ulong', 'StringOffset', 'ulong', 'UserSidLength', 'ulong', 'UserSidOffset', 'ulong', 'DataLength', 'ulong', 'DataOffset', 'ulong');
structs.tagEVENTMSG.packing=1;
structs.tagEVENTMSG.members=struct('message', 'uint32', 'paramL', 'uint32', 'paramH', 'uint32', 'time', 'ulong', 'hwnd', 'voidPtr');
structs.s_EXCEPTION_POINTERS.packing=1;
structs.s_EXCEPTION_POINTERS.members=struct('ExceptionRecord', 's_EXCEPTION_RECORDPtr', 'ContextRecord', 's_CONTEXTPtr');
structs.s_EXT_BUTTON.packing=1;
structs.s_EXT_BUTTON.members=struct('idCommand', 'uint16', 'idsHelp', 'uint16', 'fsStyle', 'uint16');
structs.tagFILTERKEYS.packing=1;
structs.tagFILTERKEYS.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong', 'iWaitMSec', 'ulong', 'iDelayMSec', 'ulong', 'iRepeatMSec', 'ulong', 'iBounceMSec', 'ulong');
structs.s_FIND_NAME_BUFFER.packing=1;
structs.s_FIND_NAME_BUFFER.members=struct('length', 'uint8', 'access_control', 'uint8', 'frame_control', 'uint8', 'destination_addr', 'uint8#6', 'source_addr', 'uint8#6', 'routing_info', 'uint8#18');
structs.s_FIND_NAME_HEADER.packing=1;
structs.s_FIND_NAME_HEADER.members=struct('node_count', 'uint16', 'reserved', 'uint8', 'unique_group', 'uint8');
structs.FINDREPLACE.packing=1;
structs.FINDREPLACE.members=struct('lStructSize', 'ulong', 'hwndOwner', 'voidPtr', 'hInstance', 'voidPtr', 'Flags', 'ulong', 'lpstrFindWhat', 'cstring', 'lpstrReplaceWith', 'cstring', 'wFindWhatLen', 'uint16', 'wReplaceWithLen', 'uint16', 'lCustData', 'long', 'lpfnHook', 'FcnPtr', 'lpTemplateName', 'cstring');
structs.s_findtext.packing=1;
structs.s_findtext.members=struct('chrg', 's_charrange', 'lpstrText', 'cstring');
structs.s_findtextex.packing=1;
structs.s_findtextex.members=struct('chrg', 's_charrange', 'lpstrText', 'cstring', 'chrgText', 's_charrange');
structs.s_FMS_GETDRIVEINFO.packing=1;
structs.s_FMS_GETDRIVEINFO.members=struct('dwTotalSpace', 'ulong', 'dwFreeSpace', 'ulong', 'szPath', 'int8#260', 'szVolume', 'int8#14', 'szShare', 'int8#128');
structs.s_FMS_GETFILESEL.packing=1;
structs.s_FMS_GETFILESEL.members=struct('ftTime', 's_FILETIME', 'dwSize', 'ulong', 'bAttr', 'uint8', 'szName', 'int8#260');
structs.s_FMS_LOAD.packing=1;
structs.s_FMS_LOAD.members=struct('dwSize', 'ulong', 'szMenuName', 'int8#40', 'hMenu', 'voidPtr', 'wMenuDelta', 'uint32');
structs.s_FMS_TOOLBARLOAD.packing=1;
structs.s_FMS_TOOLBARLOAD.members=struct('dwSize', 'ulong', 'lpButtons', 's_EXT_BUTTONPtr', 'cButtons', 'uint16', 'cBitmaps', 'uint16', 'idBitmap', 'uint16', 'hBitmap', 'voidPtr');
structs.s_FOCUS_EVENT_RECORD.packing=1;
structs.s_FOCUS_EVENT_RECORD.members=struct('bSetFocus', 'int32');
structs.s_FORM_INFO_1.packing=1;
structs.s_FORM_INFO_1.members=struct('Flags', 'ulong', 'pName', 'cstring', 'Size', 'tagSIZE', 'ImageableArea', 's_RECTL');
structs.s_formatrange.packing=1;
structs.s_formatrange.members=struct('hdc', 'voidPtr', 'hdcTarget', 'voidPtr', 'rc', 's_RECT', 'rcPage', 's_RECT', 'chrg', 's_charrange');
structs.tagGCP_RESULTS.packing=1;
structs.tagGCP_RESULTS.members=struct('lStructSize', 'ulong', 'lpOutString', 'cstring', 'lpOrder', 'uint32Ptr', 'lpDx', 'int32Ptr', 'lpCaretPos', 'int32Ptr', 'lpClass', 'cstring', 'lpGlyphs', 'uint32Ptr', 'nGlyphs', 'uint32', 'nMaxFit', 'uint32');
structs.s_GENERIC_MAPPING.packing=1;
structs.s_GENERIC_MAPPING.members=struct('GenericRead', 'ulong', 'GenericWrite', 'ulong', 'GenericExecute', 'ulong', 'GenericAll', 'ulong');
structs.s_GLYPHMETRICS.packing=1;
structs.s_GLYPHMETRICS.members=struct('gmBlackBoxX', 'uint32', 'gmBlackBoxY', 'uint32', 'gmptGlyphOrigin', 'tagPOINT', 'gmCellIncX', 'int16', 'gmCellIncY', 'int16');
structs.tagHANDLETABLE.packing=1;
structs.tagHANDLETABLE.members=struct('objectHandle', 'voidPtr#1');
structs.s_HD_HITTESTINFO.packing=1;
structs.s_HD_HITTESTINFO.members=struct('pt', 'tagPOINT', 'flags', 'uint32', 'iItem', 'int32');
structs.s_HD_ITEM.packing=1;
structs.s_HD_ITEM.members=struct('mask', 'uint32', 'cxy', 'int32', 'pszText', 'cstring', 'hbm', 'voidPtr', 'cchTextMax', 'int32', 'fmt', 'int32', 'lParam', 'long');
structs.s_WINDOWPOS.packing=1;
structs.s_WINDOWPOS.members=struct('hwnd', 'voidPtr', 'hwndInsertAfter', 'voidPtr', 'x', 'int32', 'y', 'int32', 'cx', 'int32', 'cy', 'int32', 'flags', 'uint32');
structs.s_HD_LAYOUT.packing=1;
structs.s_HD_LAYOUT.members=struct('prc', 's_RECTPtr', 'pwpos', 's_WINDOWPOSPtr');
structs.s_HD_NOTIFY.packing=1;
structs.s_HD_NOTIFY.members=struct('hdr', 'tagNMHDR', 'iItem', 'int32', 'iButton', 'int32', 'pitem', 's_HD_ITEMPtr');
structs.tagHELPINFO.packing=1;
structs.tagHELPINFO.members=struct('cbSize', 'uint32', 'iContextType', 'int32', 'iCtrlId', 'int32', 'hItemHandle', 'voidPtr', 'dwContextId', 'ulong', 'MousePos', 'tagPOINT');
structs.HELPWININFO.packing=1;
structs.HELPWININFO.members=struct('wStructSize', 'int32', 'x', 'int32', 'y', 'int32', 'dx', 'int32', 'dy', 'int32', 'wMax', 'int32', 'rgchMember', 'int8#2');
structs.tagHIGHCONTRAST.packing=1;
structs.tagHIGHCONTRAST.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong', 'lpszDefaultScheme', 'cstring');
structs.tagHSZPAIR.packing=1;
structs.tagHSZPAIR.members=struct('hszSvc', 'voidPtr', 'hszTopic', 'voidPtr');
structs.s_ICONINFO.packing=1;
structs.s_ICONINFO.members=struct('fIcon', 'int32', 'xHotspot', 'ulong', 'yHotspot', 'ulong', 'hbmMask', 'voidPtr', 'hbmColor', 'voidPtr');
structs.tagICONMETRICS.packing=1;
structs.tagICONMETRICS.members=struct('cbSize', 'uint32', 'iHorzSpacing', 'int32', 'iVertSpacing', 'int32', 'iTitleWrap', 'int32', 'lfFont', 'tagLOGFONT');
structs.s_IMAGEINFO.packing=1;
structs.s_IMAGEINFO.members=struct('hbmImage', 'voidPtr', 'hbmMask', 'voidPtr', 'Unused1', 'int32', 'Unused2', 'int32', 'rcImage', 's_RECT');
structs.s_MOUSE_EVENT_RECORD.packing=1;
structs.s_MOUSE_EVENT_RECORD.members=struct('dwMousePosition', 's_COORD', 'dwButtonState', 'ulong', 'dwControlKeyState', 'ulong', 'dwEventFlags', 'ulong');
structs.s_WINDOW_BUFFER_SIZE_RECORD.packing=1;
structs.s_WINDOW_BUFFER_SIZE_RECORD.members=struct('dwSize', 's_COORD');
structs.s_MENU_EVENT_RECORD.packing=1;
structs.s_MENU_EVENT_RECORD.members=struct('dwCommandId', 'uint32');
structs.s_SYSTEMTIME.packing=1;
structs.s_SYSTEMTIME.members=struct('wYear', 'uint16', 'wMonth', 'uint16', 'wDayOfWeek', 'uint16', 'wDay', 'uint16', 'wHour', 'uint16', 'wMinute', 'uint16', 'wSecond', 'uint16', 'wMilliseconds', 'uint16');
structs.s_JOB_INFO_1.packing=1;
structs.s_JOB_INFO_1.members=struct('JobId', 'ulong', 'pPrinterName', 'cstring', 'pMachineName', 'cstring', 'pUserName', 'cstring', 'pDocument', 'cstring', 'pDatatype', 'cstring', 'pStatus', 'cstring', 'Status', 'ulong', 'Priority', 'ulong', 'Position', 'ulong', 'TotalPages', 'ulong', 'PagesPrinted', 'ulong', 'Submitted', 's_SYSTEMTIME');
structs.s_SID_IDENTIFIER_AUTHORITY.packing=1;
structs.s_SID_IDENTIFIER_AUTHORITY.members=struct('Value', 'uint8#6');
structs.s_SID.packing=1;
structs.s_SID.members=struct('Revision', 'uint8', 'SubAuthorityCount', 'uint8', 'IdentifierAuthority', 's_SID_IDENTIFIER_AUTHORITY', 'SubAuthority', 'ulong#1');
structs.s_SECURITY_DESCRIPTOR.packing=1;
structs.s_SECURITY_DESCRIPTOR.members=struct('Revision', 'uint8', 'Sbz1', 'uint8', 'Control', 'uint16', 'Owner', 's_SIDPtr', 'Group', 's_SIDPtr', 'Sacl', 's_ACLPtr', 'Dacl', 's_ACLPtr');
structs.s_JOB_INFO_2.packing=1;
structs.s_JOB_INFO_2.members=struct('JobId', 'ulong', 'pPrinterName', 'cstring', 'pMachineName', 'cstring', 'pUserName', 'cstring', 'pDocument', 'cstring', 'pNotifyName', 'cstring', 'pDatatype', 'cstring', 'pPrintProcessor', 'cstring', 'pParameters', 'cstring', 'pDriverName', 'cstring', 'pDevMode', 's_devicemodePtr', 'pStatus', 'cstring', 'pSecurityDescriptor', 's_SECURITY_DESCRIPTORPtr', 'Status', 'ulong', 'Priority', 'ulong', 'Position', 'ulong', 'StartTime', 'ulong', 'UntilTime', 'ulong', 'TotalPages', 'ulong', 'Size', 'ulong', 'Submitted', 's_SYSTEMTIME', 'Time', 'ulong', 'PagesPrinted', 'ulong');
structs.tagKERNINGPAIR.packing=1;
structs.tagKERNINGPAIR.members=struct('wFirst', 'uint16', 'wSecond', 'uint16', 'iKernAmount', 'int32');
structs.s_LANA_ENUM.packing=1;
structs.s_LANA_ENUM.members=struct('length', 'uint8', 'lana', 'uint8#254');
structs.tagLOCALESIGNATURE.packing=1;
structs.tagLOCALESIGNATURE.members=struct('lsUsb', 'ulong#4', 'lsCsbDefault', 'ulong#2', 'lsCsbSupported', 'ulong#2');
structs.s_LOCALGROUP_MEMBERS_INFO_0.packing=1;
structs.s_LOCALGROUP_MEMBERS_INFO_0.members=struct('lgrmi0_sid', 's_SIDPtr');
structs.s_LOCALGROUP_MEMBERS_INFO_3.packing=1;
structs.s_LOCALGROUP_MEMBERS_INFO_3.members=struct('lgrmi3_domainandname', 'uint16Ptr');
structs.s_LUID_AND_ATTRIBUTES.packing=1;
structs.s_LUID_AND_ATTRIBUTES.members=struct('Luid', 'error', 'Attributes', 'ulong');
structs.s_LV_COLUMN.packing=1;
structs.s_LV_COLUMN.members=struct('mask', 'uint32', 'fmt', 'int32', 'cx', 'int32', 'pszText', 'cstring', 'cchTextMax', 'int32', 'iSubItem', 'int32');
structs.s_LV_ITEM.packing=1;
structs.s_LV_ITEM.members=struct('mask', 'uint32', 'iItem', 'int32', 'iSubItem', 'int32', 'state', 'uint32', 'stateMask', 'uint32', 'pszText', 'cstring', 'cchTextMax', 'int32', 'iImage', 'int32', 'lParam', 'long');
structs.tagLV_DISPINFO.packing=1;
structs.tagLV_DISPINFO.members=struct('hdr', 'tagNMHDR', 'item', 's_LV_ITEM');
structs.s_LV_FINDINFO.packing=1;
structs.s_LV_FINDINFO.members=struct('flags', 'uint32', 'psz', 'cstring', 'lParam', 'long', 'pt', 'tagPOINT', 'vkDirection', 'uint32');
structs.s_LV_HITTESTINFO.packing=1;
structs.s_LV_HITTESTINFO.members=struct('pt', 'tagPOINT', 'flags', 'uint32', 'iItem', 'int32');
structs.tagLV_KEYDOWN.packing=1;
structs.tagLV_KEYDOWN.members=struct('hdr', 'tagNMHDR', 'wVKey', 'uint16', 'flags', 'uint32');
structs.s_MAT2.packing=1;
structs.s_MAT2.members=struct('eM11', 's_FIXED', 'eM12', 's_FIXED', 'eM21', 's_FIXED', 'eM22', 's_FIXED');
structs.tagMDICREATESTRUCT.packing=1;
structs.tagMDICREATESTRUCT.members=struct('szClass', 'cstring', 'szTitle', 'cstring', 'hOwner', 'voidPtr', 'x', 'int32', 'y', 'int32', 'cx', 'int32', 'cy', 'int32', 'style', 'ulong', 'lParam', 'long');
structs.tagMEASUREITEMSTRUCT.packing=1;
structs.tagMEASUREITEMSTRUCT.members=struct('CtlType', 'uint32', 'CtlID', 'uint32', 'itemID', 'uint32', 'itemWidth', 'uint32', 'itemHeight', 'uint32', 'itemData', 'ulong');
structs.s_MEMORY_BASIC_INFORMATION.packing=1;
structs.s_MEMORY_BASIC_INFORMATION.members=struct('BaseAddress', 'voidPtr', 'AllocationBase', 'voidPtr', 'AllocationProtect', 'ulong', 'RegionSize', 'ulong', 'State', 'ulong', 'Protect', 'ulong', 'Type', 'ulong');
structs.s_MEMORYSTATUS.packing=1;
structs.s_MEMORYSTATUS.members=struct('dwLength', 'ulong', 'dwMemoryLoad', 'ulong', 'dwTotalPhys', 'ulong', 'dwAvailPhys', 'ulong', 'dwTotalPageFile', 'ulong', 'dwAvailPageFile', 'ulong', 'dwTotalVirtual', 'ulong', 'dwAvailVirtual', 'ulong');
structs.MENUEX_TEMPLATE_HEADER.packing=1;
structs.MENUEX_TEMPLATE_HEADER.members=struct('wVersion', 'uint16', 'wOffset', 'uint16', 'dwHelpId', 'ulong');
structs.MENUEX_TEMPLATE_ITEM.packing=1;
structs.MENUEX_TEMPLATE_ITEM.members=struct('dwType', 'ulong', 'dwState', 'ulong', 'uId', 'uint32', 'bResInfo', 'uint8', 'szText', 'uint16#1', 'dwHelpId', 'ulong');
structs.tagMENUITEMINFO.packing=1;
structs.tagMENUITEMINFO.members=struct('cbSize', 'uint32', 'fMask', 'uint32', 'fType', 'uint32', 'fState', 'uint32', 'wID', 'uint32', 'hSubMenu', 'voidPtr', 'hbmpChecked', 'voidPtr', 'hbmpUnchecked', 'voidPtr', 'dwItemData', 'ulong', 'dwTypeData', 'cstring', 'cch', 'uint32');
structs.MENUITEMTEMPLATE.packing=1;
structs.MENUITEMTEMPLATE.members=struct('mtOption', 'uint16', 'mtID', 'uint16', 'mtString', 'uint16#1');
structs.MENUITEMTEMPLATEHEADER.packing=1;
structs.MENUITEMTEMPLATEHEADER.members=struct('versionNumber', 'uint16', 'offset', 'uint16');
structs.tagMETAFILEPICT.packing=1;
structs.tagMETAFILEPICT.members=struct('mm', 'long', 'xExt', 'long', 'yExt', 'long', 'hMF', 'voidPtr');
structs.tagMETAHEADER.packing=1;
structs.tagMETAHEADER.members=struct('mtType', 'uint16', 'mtHeaderSize', 'uint16', 'mtVersion', 'uint16', 'mtSize', 'ulong', 'mtNoObjects', 'uint16', 'mtMaxRecord', 'ulong', 'mtNoParameters', 'uint16');
structs.tagMETARECORD.packing=1;
structs.tagMETARECORD.members=struct('rdSize', 'ulong', 'rdFunction', 'uint16', 'rdParm', 'uint16#1');
structs.tagMINIMIZEDMETRICS.packing=1;
structs.tagMINIMIZEDMETRICS.members=struct('cbSize', 'uint32', 'iWidth', 'int32', 'iHorzGap', 'int32', 'iVertGap', 'int32', 'iArrange', 'int32');
structs.tagMINMAXINFO.packing=1;
structs.tagMINMAXINFO.members=struct('ptReserved', 'tagPOINT', 'ptMaxSize', 'tagPOINT', 'ptMaxPosition', 'tagPOINT', 'ptMinTrackSize', 'tagPOINT', 'ptMaxTrackSize', 'tagPOINT');
structs.modemdevcaps_tag.packing=1;
structs.modemdevcaps_tag.members=struct('dwActualSize', 'ulong', 'dwRequiredSize', 'ulong', 'dwDevSpecificOffset', 'ulong', 'dwDevSpecificSize', 'ulong', 'dwModemProviderVersion', 'ulong', 'dwModemManufacturerOffset', 'ulong', 'dwModemManufacturerSize', 'ulong', 'dwModemModelOffset', 'ulong', 'dwModemModelSize', 'ulong', 'dwModemVersionOffset', 'ulong', 'dwModemVersionSize', 'ulong', 'dwDialOptions', 'ulong', 'dwCallSetupFailTimer', 'ulong', 'dwInactivityTimeout', 'ulong', 'dwSpeakerVolume', 'ulong', 'dwSpeakerMode', 'ulong', 'dwModemOptions', 'ulong', 'dwMaxDTERate', 'ulong', 'dwMaxDCERate', 'ulong', 'abVariablePortion', 'uint8#1');
structs.modemsettings_tag.packing=1;
structs.modemsettings_tag.members=struct('dwActualSize', 'ulong', 'dwRequiredSize', 'ulong', 'dwDevSpecificOffset', 'ulong', 'dwDevSpecificSize', 'ulong', 'dwCallSetupFailTimer', 'ulong', 'dwInactivityTimeout', 'ulong', 'dwSpeakerVolume', 'ulong', 'dwSpeakerMode', 'ulong', 'dwPreferredModemOptions', 'ulong', 'dwNegotiatedModemOptions', 'ulong', 'dwNegotiatedDCERate', 'ulong', 'abVariablePortion', 'uint8#1');
structs.tagMONCBSTRUCT.packing=1;
structs.tagMONCBSTRUCT.members=struct('cb', 'uint32', 'dwTime', 'ulong', 'hTask', 'voidPtr', 'dwRet', 'ulong', 'wType', 'uint32', 'wFmt', 'uint32', 'hConv', 'voidPtr', 'hsz1', 'voidPtr', 'hsz2', 'voidPtr', 'hData', 'voidPtr', 'dwData1', 'ulong', 'dwData2', 'ulong', 'cc', 'tagCONVCONTEXT', 'cbData', 'ulong', 'Data', 'ulong#8');
structs.tagMONCONVSTRUCT.packing=1;
structs.tagMONCONVSTRUCT.members=struct('cb', 'uint32', 'fConnect', 'int32', 'dwTime', 'ulong', 'hTask', 'voidPtr', 'hszSvc', 'voidPtr', 'hszTopic', 'voidPtr', 'hConvClient', 'voidPtr', 'hConvServer', 'voidPtr');
structs.tagMONERRSTRUCT.packing=1;
structs.tagMONERRSTRUCT.members=struct('cb', 'uint32', 'wLastError', 'uint32', 'dwTime', 'ulong', 'hTask', 'voidPtr');
structs.tagMONHSZSTRUCT.packing=1;
structs.tagMONHSZSTRUCT.members=struct('cb', 'uint32', 'fsAction', 'int32', 'dwTime', 'ulong', 'hsz', 'voidPtr', 'hTask', 'voidPtr', 'str', 'int8#1');
structs.s_MONITOR_INFO_1.packing=1;
structs.s_MONITOR_INFO_1.members=struct('pName', 'cstring');
structs.s_MONITOR_INFO_2.packing=1;
structs.s_MONITOR_INFO_2.members=struct('pName', 'cstring', 'pEnvironment', 'cstring', 'pDLLName', 'cstring');
structs.tagMONLINKSTRUCT.packing=1;
structs.tagMONLINKSTRUCT.members=struct('cb', 'uint32', 'dwTime', 'ulong', 'hTask', 'voidPtr', 'fEstablished', 'int32', 'fNoData', 'int32', 'hszSvc', 'voidPtr', 'hszTopic', 'voidPtr', 'hszItem', 'voidPtr', 'wFmt', 'uint32', 'fServer', 'int32', 'hConvServer', 'voidPtr', 'hConvClient', 'voidPtr');
structs.tagMONMSGSTRUCT.packing=1;
structs.tagMONMSGSTRUCT.members=struct('cb', 'uint32', 'hwndTo', 'voidPtr', 'dwTime', 'ulong', 'hTask', 'voidPtr', 'wMsg', 'uint32', 'wParam', 'uint32', 'lParam', 'long', 'dmhd', 'tagDDEML_MSG_HOOK_DATA');
structs.tagMOUSEHOOKSTRUCT.packing=1;
structs.tagMOUSEHOOKSTRUCT.members=struct('pt', 'tagPOINT', 'hwnd', 'voidPtr', 'wHitTestCode', 'uint32', 'dwExtraInfo', 'ulong');
structs.s_MOUSEKEYS.packing=1;
structs.s_MOUSEKEYS.members=struct('cbSize', 'ulong', 'dwFlags', 'ulong', 'iMaxSpeed', 'ulong', 'iTimeToMaxSpeed', 'ulong', 'iCtrlSpeed', 'ulong', 'dwReserved1', 'ulong', 'dwReserved2', 'ulong');
structs.tagMSG.packing=1;
structs.tagMSG.members=struct('hwnd', 'voidPtr', 'message', 'uint32', 'wParam', 'uint32', 'lParam', 'long', 'time', 'ulong', 'pt', 'tagPOINT');
structs.MSGBOXPARAMS.packing=1;
structs.MSGBOXPARAMS.members=struct('cbSize', 'uint32', 'hwndOwner', 'voidPtr', 'hInstance', 'voidPtr', 'lpszText', 'cstring', 'lpszCaption', 'cstring', 'dwStyle', 'ulong', 'lpszIcon', 'cstring', 'dwContextHelpId', 'ulong', 'lpfnMsgBoxCallback', 'FcnPtr', 'dwLanguageId', 'ulong');
structs.s_msgfilter.packing=1;
structs.s_msgfilter.members=struct('nmhdr', 'tagNMHDR', 'msg', 'uint32', 'wParam', 'uint32', 'lParam', 'long');
structs.tagMULTIKEYHELP.packing=1;
structs.tagMULTIKEYHELP.members=struct('mkSize', 'ulong', 'mkKeylist', 'int8', 'szKeyphrase', 'int8#1');
structs.s_NAME_BUFFER.packing=1;
structs.s_NAME_BUFFER.members=struct('name', 'uint8#16', 'name_num', 'uint8', 'name_flags', 'uint8');
structs.s_NCB.packing=1;
structs.s_NCB.members=struct('ncb_command', 'uint8', 'ncb_retcode', 'uint8', 'ncb_lsn', 'uint8', 'ncb_num', 'uint8', 'ncb_buffer', 'uint8Ptr', 'ncb_length', 'uint16', 'ncb_callname', 'uint8#16', 'ncb_name', 'uint8#16', 'ncb_rto', 'uint8', 'ncb_sto', 'uint8', 'error0', ' void (* ncb_post ) ( struct _NCB *)', 'ncb_lana_num', 'uint8', 'ncb_cmd_cplt', 'uint8', 'ncb_reserve', 'uint8#10', 'ncb_event', 'voidPtr');
structs.s_NCCALCSIZE_PARAMS.packing=1;
structs.s_NCCALCSIZE_PARAMS.members=struct('rgrc', 's_RECT#3', 'lppos', 's_WINDOWPOSPtr');
structs.s_NDDESHAREINFO.packing=1;
structs.s_NDDESHAREINFO.members=struct('lRevision', 'long', 'lpszShareName', 'cstring', 'lShareType', 'long', 'lpszAppTopicList', 'cstring', 'fSharedFlag', 'long', 'fService', 'long', 'fStartAppFlag', 'long', 'nCmdShow', 'long', 'qModifyId', 'long#2', 'cNumItems', 'long', 'lpszItemList', 'cstring');
structs.s_NETRESOURCE.packing=1;
structs.s_NETRESOURCE.members=struct('dwScope', 'ulong', 'dwType', 'ulong', 'dwDisplayType', 'ulong', 'dwUsage', 'ulong', 'lpLocalName', 'cstring', 'lpRemoteName', 'cstring', 'lpComment', 'cstring', 'lpProvider', 'cstring');
structs.tagNEWCPLINFO.packing=1;
structs.tagNEWCPLINFO.members=struct('dwSize', 'ulong', 'dwFlags', 'ulong', 'dwHelpContext', 'ulong', 'lData', 'long', 'hIcon', 'voidPtr', 'szName', 'int8#32', 'szInfo', 'int8#64', 'szHelpFile', 'int8#128');
structs.tagNEWTEXTMETRIC.packing=4;
structs.tagNEWTEXTMETRIC.members=struct('tmHeight', 'long', 'tmAscent', 'long', 'tmDescent', 'long', 'tmInternalLeading', 'long', 'tmExternalLeading', 'long', 'tmAveCharWidth', 'long', 'tmMaxCharWidth', 'long', 'tmWeight', 'long', 'tmOverhang', 'long', 'tmDigitizedAspectX', 'long', 'tmDigitizedAspectY', 'long', 'tmFirstChar', 'uint8', 'tmLastChar', 'uint8', 'tmDefaultChar', 'uint8', 'tmBreakChar', 'uint8', 'tmItalic', 'uint8', 'tmUnderlined', 'uint8', 'tmStruckOut', 'uint8', 'tmPitchAndFamily', 'uint8', 'tmCharSet', 'uint8', 'ntmFlags', 'ulong', 'ntmSizeEM', 'uint32', 'ntmCellHeight', 'uint32', 'ntmAvgWidth', 'uint32');
structs.tagNEWTEXTMETRICEX.packing=1;
structs.tagNEWTEXTMETRICEX.members=struct('ntmentm', 'tagNEWTEXTMETRIC', 'ntmeFontSignature', 'tagFONTSIGNATURE');
structs.tagNM_LISTVIEW.packing=1;
structs.tagNM_LISTVIEW.members=struct('hdr', 'tagNMHDR', 'iItem', 'int32', 'iSubItem', 'int32', 'uNewState', 'uint32', 'uOldState', 'uint32', 'uChanged', 'uint32', 'ptAction', 'tagPOINT', 'lParam', 'long');
structs.s_TREEITEM.members=struct('');
structs.s_TV_ITEM.packing=1;
structs.s_TV_ITEM.members=struct('mask', 'uint32', 'hItem', 's_TREEITEMPtr', 'state', 'uint32', 'stateMask', 'uint32', 'pszText', 'cstring', 'cchTextMax', 'int32', 'iImage', 'int32', 'iSelectedImage', 'int32', 'cChildren', 'int32', 'lParam', 'long');
structs.s_NM_TREEVIEW.packing=1;
structs.s_NM_TREEVIEW.members=struct('hdr', 'tagNMHDR', 'action', 'uint32', 'itemOld', 's_TV_ITEM', 'itemNew', 's_TV_ITEM', 'ptDrag', 'tagPOINT');
structs.s_NM_UPDOWN.packing=1;
structs.s_NM_UPDOWN.members=struct('hdr', 'tagNMHDR', 'iPos', 'int32', 'iDelta', 'int32');
structs.tagNONCLIENTMETRICS.packing=1;
structs.tagNONCLIENTMETRICS.members=struct('cbSize', 'uint32', 'iBorderWidth', 'int32', 'iScrollWidth', 'int32', 'iScrollHeight', 'int32', 'iCaptionWidth', 'int32', 'iCaptionHeight', 'int32', 'lfCaptionFont', 'tagLOGFONT', 'iSmCaptionWidth', 'int32', 'iSmCaptionHeight', 'int32', 'lfSmCaptionFont', 'tagLOGFONT', 'iMenuWidth', 'int32', 'iMenuHeight', 'int32', 'lfMenuFont', 'tagLOGFONT', 'lfStatusFont', 'tagLOGFONT', 'lfMessageFont', 'tagLOGFONT');
structs.s_SERVICE_ADDRESS.packing=1;
structs.s_SERVICE_ADDRESS.members=struct('dwAddressType', 'ulong', 'dwAddressFlags', 'ulong', 'dwAddressLength', 'ulong', 'dwPrincipalLength', 'ulong', 'lpAddress', 'uint8Ptr', 'lpPrincipal', 'uint8Ptr');
structs.s_SERVICE_ADDRESSES.packing=1;
structs.s_SERVICE_ADDRESSES.members=struct('dwAddressCount', 'ulong', 'Addresses', 's_SERVICE_ADDRESS#1');
structs.s_GUID.packing=1;
structs.s_GUID.members=struct('Data1', 'ulong', 'Data2', 'uint16', 'Data3', 'uint16', 'Data4', 'uint8#8');
structs.tagRemHGLOBAL.packing=1;
structs.tagRemHGLOBAL.members=struct('fNullHGlobal', 'long', 'cbData', 'ulong', 'data', 'uint8#1');
structs.tagRemHMETAFILEPICT.packing=1;
structs.tagRemHMETAFILEPICT.members=struct('mm', 'long', 'xExt', 'long', 'yExt', 'long', 'cbData', 'ulong', 'data', 'uint8#1');
structs.tagRemHENHMETAFILE.packing=1;
structs.tagRemHENHMETAFILE.members=struct('cbData', 'ulong', 'data', 'uint8#1');
structs.tagRemHBITMAP.packing=1;
structs.tagRemHBITMAP.members=struct('cbData', 'ulong', 'data', 'uint8#1');
structs.tagRemHPALETTE.packing=1;
structs.tagRemHPALETTE.members=struct('cbData', 'ulong', 'data', 'uint8#1');
structs.tagRemBRUSH.packing=1;
structs.tagRemBRUSH.members=struct('cbData', 'ulong', 'data', 'uint8#1');
structs.s_numberfmt.packing=1;
structs.s_numberfmt.members=struct('NumDigits', 'uint32', 'LeadingZero', 'uint32', 'Grouping', 'uint32', 'lpDecimalSep', 'cstring', 'lpThousandSep', 'cstring', 'NegativeOrder', 'uint32');
structs.s_OFSTRUCT.packing=1;
structs.s_OFSTRUCT.members=struct('cBytes', 'uint8', 'fFixedDisk', 'uint8', 'nErrCode', 'uint16', 'Reserved1', 'uint16', 'Reserved2', 'uint16', 'szPathName', 'int8#128');
structs.tagOFN.packing=1;
structs.tagOFN.members=struct('lStructSize', 'ulong', 'hwndOwner', 'voidPtr', 'hInstance', 'voidPtr', 'lpstrFilter', 'cstring', 'lpstrCustomFilter', 'cstring', 'nMaxCustFilter', 'ulong', 'nFilterIndex', 'ulong', 'lpstrFile', 'cstring', 'nMaxFile', 'ulong', 'lpstrFileTitle', 'cstring', 'nMaxFileTitle', 'ulong', 'lpstrInitialDir', 'cstring', 'lpstrTitle', 'cstring', 'Flags', 'ulong', 'nFileOffset', 'uint16', 'nFileExtension', 'uint16', 'lpstrDefExt', 'cstring', 'lCustData', 'ulong', 'lpfnHook', 'FcnPtr', 'lpTemplateName', 'cstring');
structs.s_OFNOTIFY.packing=1;
structs.s_OFNOTIFY.members=struct('hdr', 'tagNMHDR', 'lpOFN', 'tagOFNPtr', 'pszFile', 'cstring');
structs.s_OSVERSIONINFO.packing=1;
structs.s_OSVERSIONINFO.members=struct('dwOSVersionInfoSize', 'ulong', 'dwMajorVersion', 'ulong', 'dwMinorVersion', 'ulong', 'dwBuildNumber', 'ulong', 'dwPlatformId', 'ulong', 'szCSDVersion', 'int8#128');
structs.tagTEXTMETRIC.packing=1;
structs.tagTEXTMETRIC.members=struct('tmHeight', 'long', 'tmAscent', 'long', 'tmDescent', 'long', 'tmInternalLeading', 'long', 'tmExternalLeading', 'long', 'tmAveCharWidth', 'long', 'tmMaxCharWidth', 'long', 'tmWeight', 'long', 'tmOverhang', 'long', 'tmDigitizedAspectX', 'long', 'tmDigitizedAspectY', 'long', 'tmFirstChar', 'uint8', 'tmLastChar', 'uint8', 'tmDefaultChar', 'uint8', 'tmBreakChar', 'uint8', 'tmItalic', 'uint8', 'tmUnderlined', 'uint8', 'tmStruckOut', 'uint8', 'tmPitchAndFamily', 'uint8', 'tmCharSet', 'uint8', 'pad1', 'uint8', 'pad2', 'uint8', 'pad3', 'uint8');
structs.tagTEXTMETRICW.packing=1;
structs.tagTEXTMETRICW.members=struct('tmHeight', 'long', 'tmAscent', 'long', 'tmDescent', 'long', 'tmInternalLeading', 'long', 'tmExternalLeading', 'long', 'tmAveCharWidth', 'long', 'tmMaxCharWidth', 'long', 'tmWeight', 'long', 'tmOverhang', 'long', 'tmDigitizedAspectX', 'long', 'tmDigitizedAspectY', 'long', 'tmFirstChar', 'uint16', 'tmLastChar', 'uint16', 'tmDefaultChar', 'uint16', 'tmBreakChar', 'uint16', 'tmItalic', 'uint8', 'tmUnderlined', 'uint8', 'tmStruckOut', 'uint8', 'tmPitchAndFamily', 'uint8', 'tmCharSet', 'uint8');
structs.s_OUTLINETEXTMETRIC.packing=1;
structs.s_OUTLINETEXTMETRIC.members=struct('otmSize', 'uint32', 'otmTextMetrics', 'tagTEXTMETRIC', 'otmFiller', 'uint8', 'otmPanoseNumber', 'tagPANOSE', 'otmfsSelection', 'uint32', 'otmfsType', 'uint32', 'otmsCharSlopeRise', 'int32', 'otmsCharSlopeRun', 'int32', 'otmItalicAngle', 'int32', 'otmEMSquare', 'uint32', 'otmAscent', 'int32', 'otmDescent', 'int32', 'otmLineGap', 'uint32', 'otmsCapEmHeight', 'uint32', 'otmsXHeight', 'uint32', 'otmrcFontBox', 's_RECT', 'otmMacAscent', 'int32', 'otmMacDescent', 'int32', 'otmMacLineGap', 'uint32', 'otmusMinimumPPEM', 'uint32', 'otmptSubscriptSize', 'tagPOINT', 'otmptSubscriptOffset', 'tagPOINT', 'otmptSuperscriptSize', 'tagPOINT', 'otmptSuperscriptOffset', 'tagPOINT', 'otmsStrikeoutSize', 'uint32', 'otmsStrikeoutPosition', 'int32', 'otmsUnderscoreSize', 'int32', 'otmsUnderscorePosition', 'int32', 'otmpFamilyName', 'cstring', 'otmpFaceName', 'cstring', 'otmpStyleName', 'cstring', 'otmpFullName', 'cstring');
structs.s_OVERLAPPED.packing=1;
structs.s_OVERLAPPED.members=struct('Internal', 'ulong', 'InternalHigh', 'ulong', 'Offset', 'ulong', 'OffsetHigh', 'ulong', 'hEvent', 'voidPtr');
structs.tagPSD.packing=1;
structs.tagPSD.members=struct('lStructSize', 'ulong', 'hwndOwner', 'voidPtr', 'hDevMode', 'voidPtr', 'hDevNames', 'voidPtr', 'Flags', 'ulong', 'ptPaperSize', 'tagPOINT', 'rtMinMargin', 's_RECT', 'rtMargin', 's_RECT', 'hInstance', 'voidPtr', 'lCustData', 'long', 'lpfnPageSetupHook', 'FcnPtr', 'lpfnPagePaintHook', 'FcnPtr', 'lpPageSetupTemplateName', 'cstring', 'hPageSetupTemplate', 'voidPtr');
structs.tagPAINTSTRUCT.packing=1;
structs.tagPAINTSTRUCT.members=struct('hdc', 'voidPtr', 'fErase', 'int32', 'rcPaint', 's_RECT', 'fRestore', 'int32', 'fIncUpdate', 'int32', 'rgbReserved', 'uint8#32');
structs.s_paraformat.packing=1;
structs.s_paraformat.members=struct('cbSize', 'uint32', 'dwMask', 'ulong', 'wNumbering', 'uint16', 'wReserved', 'uint16', 'dxStartIndent', 'long', 'dxRightIndent', 'long', 'dxOffset', 'long', 'wAlignment', 'uint16', 'cTabCount', 'int16', 'rgxTabs', 'long#32');
structs.s_POLYTEXT.packing=1;
structs.s_POLYTEXT.members=struct('x', 'int32', 'y', 'int32', 'n', 'uint32', 'lpstr', 'cstring', 'uiFlags', 'uint32', 'rcl', 's_RECT', 'pdx', 'int32Ptr');
structs.s_PORT_INFO_1.packing=1;
structs.s_PORT_INFO_1.members=struct('pName', 'cstring');
structs.s_PORT_INFO_2.packing=1;
structs.s_PORT_INFO_2.members=struct('pPortName', 'cstring', 'pMonitorName', 'cstring', 'pDescription', 'cstring', 'fPortType', 'ulong', 'Reserved', 'ulong');
structs.tagPD.packing=1;
structs.tagPD.members=struct('lStructSize', 'ulong', 'hwndOwner', 'voidPtr', 'hDevMode', 'voidPtr', 'hDevNames', 'voidPtr', 'hDC', 'voidPtr', 'Flags', 'ulong', 'nFromPage', 'uint16', 'nToPage', 'uint16', 'nMinPage', 'uint16', 'nMaxPage', 'uint16', 'nCopies', 'uint16', 'hInstance', 'voidPtr', 'lCustData', 'ulong', 'lpfnPrintHook', 'FcnPtr', 'lpfnSetupHook', 'FcnPtr', 'lpPrintTemplateName', 'cstring', 'lpSetupTemplateName', 'cstring', 'hPrintTemplate', 'voidPtr', 'hSetupTemplate', 'voidPtr');
structs.s_PRINTER_DEFAULTS.packing=1;
structs.s_PRINTER_DEFAULTS.members=struct('pDatatype', 'cstring', 'pDevMode', 's_devicemodePtr', 'DesiredAccess', 'ulong');
structs.s_PRINTPROCESSOR_INFO_1.packing=1;
structs.s_PRINTPROCESSOR_INFO_1.members=struct('pName', 'cstring');
structs.s_PRIVILEGE_SET.packing=1;
structs.s_PRIVILEGE_SET.members=struct('PrivilegeCount', 'ulong', 'Control', 'ulong', 'Privilege', 's_LUID_AND_ATTRIBUTES#1');
structs.s_PROCESS_HEAP_ENTRY.packing=1;
structs.s_PROCESS_HEAP_ENTRY.members=struct('lpData', 'voidPtr', 'cbData', 'ulong', 'cbOverhead', 'uint8', 'iRegionIndex', 'uint8', 'wFlags', 'uint16', 'dwCommittedSize', 'ulong', 'dwUnCommittedSize', 'ulong', 'lpFirstBlock', 'voidPtr', 'lpLastBlock', 'voidPtr', 'hMem', 'voidPtr');
structs.s_PROCESS_INFORMATION.packing=1;
structs.s_PROCESS_INFORMATION.members=struct('hProcess', 'voidPtr', 'hThread', 'voidPtr', 'dwProcessId', 'ulong', 'dwThreadId', 'ulong');
structs.s_PSP.members=struct('');
structs.s_PROTOCOL_INFO.packing=1;
structs.s_PROTOCOL_INFO.members=struct('dwServiceFlags', 'ulong', 'iAddressFamily', 'int32', 'iMaxSockAddr', 'int32', 'iMinSockAddr', 'int32', 'iSocketType', 'int32', 'iProtocol', 'int32', 'dwMessageSize', 'ulong', 'lpProtocol', 'cstring');
structs.s_PROVIDOR_INFO_1.packing=1;
structs.s_PROVIDOR_INFO_1.members=struct('pName', 'cstring', 'pEnvironment', 'cstring', 'pDLLName', 'cstring');
structs.s_PSHNOTIFY.packing=1;
structs.s_PSHNOTIFY.members=struct('hdr', 'tagNMHDR', 'lParam', 'long');
structs.s_punctuation.packing=1;
structs.s_punctuation.members=struct('iSize', 'uint32', 'szPunctuation', 'cstring');
structs.s_QUERY_SERVICE_CONFIG.packing=1;
structs.s_QUERY_SERVICE_CONFIG.members=struct('dwServiceType', 'ulong', 'dwStartType', 'ulong', 'dwErrorControl', 'ulong', 'lpBinaryPathName', 'cstring', 'lpLoadOrderGroup', 'cstring', 'dwTagId', 'ulong', 'lpDependencies', 'cstring', 'lpServiceStartName', 'cstring', 'lpDisplayName', 'cstring');
structs.s_QUERY_SERVICE_LOCK_STATUS.packing=1;
structs.s_QUERY_SERVICE_LOCK_STATUS.members=struct('fIsLocked', 'ulong', 'lpLockOwner', 'cstring', 'dwLockDuration', 'ulong');
structs.s_RASAMB.packing=1;
structs.s_RASAMB.members=struct('dwSize', 'ulong', 'dwError', 'ulong', 'szNetBiosError', 'int8#17', 'bLana', 'uint8');
structs.s_RASTERIZER_STATUS.packing=1;
structs.s_RASTERIZER_STATUS.members=struct('nSize', 'int16', 'wFlags', 'int16', 'nLanguageID', 'int16');
structs.s_REMOTE_NAME_INFO.packing=1;
structs.s_REMOTE_NAME_INFO.members=struct('lpUniversalName', 'cstring', 'lpConnectionName', 'cstring', 'lpRemainingPath', 'cstring');
structs.s_repastespecial.packing=1;
structs.s_repastespecial.members=struct('dwAspect', 'ulong', 'dwParam', 'ulong');
structs.s_reqresize.packing=1;
structs.s_reqresize.members=struct('nmhdr', 'tagNMHDR', 'rc', 's_RECT');
structs.s_RGNDATAHEADER.packing=1;
structs.s_RGNDATAHEADER.members=struct('dwSize', 'ulong', 'iType', 'ulong', 'nCount', 'ulong', 'nRgnSize', 'ulong', 'rcBound', 's_RECT');
structs.s_RGNDATA.packing=1;
structs.s_RGNDATA.members=struct('rdh', 's_RGNDATAHEADER', 'Buffer', 'int8#1');
structs.tagSCROLLINFO.packing=1;
structs.tagSCROLLINFO.members=struct('cbSize', 'uint32', 'fMask', 'uint32', 'nMin', 'int32', 'nMax', 'int32', 'nPage', 'uint32', 'nPos', 'int32', 'nTrackPos', 'int32');
structs.s_SECURITY_ATTRIBUTES.packing=1;
structs.s_SECURITY_ATTRIBUTES.members=struct('nLength', 'ulong', 'lpSecurityDescriptor', 'voidPtr', 'bInheritHandle', 'int32');
structs.s_selchange.packing=1;
structs.s_selchange.members=struct('nmhdr', 'tagNMHDR', 'chrg', 's_charrange', 'seltyp', 'uint16');
structs.tagSERIALKEYS.packing=1;
structs.tagSERIALKEYS.members=struct('cbSize', 'ulong', 'dwFlags', 'ulong', 'lpszActivePort', 'cstring', 'lpszPort', 'cstring', 'iBaudRate', 'ulong', 'iPortState', 'ulong');
structs.s_SERVICE_TABLE_ENTRY.packing=1;
structs.s_SERVICE_TABLE_ENTRY.members=struct('lpServiceName', 'cstring', 'lpServiceProc', 'FcnPtr');
structs.s_SERVICE_TYPE_VALUE_ABS.packing=1;
structs.s_SERVICE_TYPE_VALUE_ABS.members=struct('dwNameSpace', 'ulong', 'dwValueType', 'ulong', 'dwValueSize', 'ulong', 'lpValueName', 'cstring', 'lpValue', 'voidPtr');
structs.s_SERVICE_TYPE_INFO_ABS.packing=1;
structs.s_SERVICE_TYPE_INFO_ABS.members=struct('lpTypeName', 'cstring', 'dwValueCount', 'ulong', 'Values', 's_SERVICE_TYPE_VALUE_ABS#1');
structs.s_SESSION_BUFFER.packing=1;
structs.s_SESSION_BUFFER.members=struct('lsn', 'uint8', 'state', 'uint8', 'local_name', 'uint8#16', 'remote_name', 'uint8#16', 'rcvs_outstanding', 'uint8', 'sends_outstanding', 'uint8');
structs.s_SESSION_HEADER.packing=1;
structs.s_SESSION_HEADER.members=struct('sess_name', 'uint8', 'num_sess', 'uint8', 'rcv_dg_outstanding', 'uint8', 'rcv_any_outstanding', 'uint8');
structs.s_SID_AND_ATTRIBUTES.packing=1;
structs.s_SID_AND_ATTRIBUTES.members=struct('Sid', 's_SIDPtr', 'Attributes', 'ulong');
structs.s_SINGLE_LIST_ENTRY.packing=1;
structs.s_SINGLE_LIST_ENTRY.members=struct('Next', 's_SINGLE_LIST_ENTRYPtr');
structs.tagSOUNDSENTRY.packing=1;
structs.tagSOUNDSENTRY.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong', 'iFSTextEffect', 'ulong', 'iFSTextEffectMSec', 'ulong', 'iFSTextEffectColorBits', 'ulong', 'iFSGrafEffect', 'ulong', 'iFSGrafEffectMSec', 'ulong', 'iFSGrafEffectColor', 'ulong', 'iWindowsEffect', 'ulong', 'iWindowsEffectMSec', 'ulong', 'lpszWindowsEffectDLL', 'cstring', 'iWindowsEffectOrdinal', 'ulong');
structs.s_STARTUPINFO.packing=1;
structs.s_STARTUPINFO.members=struct('cb', 'ulong', 'lpReserved', 'cstring', 'lpDesktop', 'cstring', 'lpTitle', 'cstring', 'dwX', 'ulong', 'dwY', 'ulong', 'dwXSize', 'ulong', 'dwYSize', 'ulong', 'dwXCountChars', 'ulong', 'dwYCountChars', 'ulong', 'dwFillAttribute', 'ulong', 'dwFlags', 'ulong', 'wShowWindow', 'uint16', 'cbReserved2', 'uint16', 'lpReserved2', 'uint8Ptr', 'hStdInput', 'voidPtr', 'hStdOutput', 'voidPtr', 'hStdError', 'voidPtr');
structs.tagSTICKYKEYS.packing=1;
structs.tagSTICKYKEYS.members=struct('cbSize', 'ulong', 'dwFlags', 'ulong');
structs.s_tagSTYLEBUF.packing=1;
structs.s_tagSTYLEBUF.members=struct('dwStyle', 'ulong', 'szDescription', 'int8#32');
structs.tagSTYLESTRUCT.packing=1;
structs.tagSTYLESTRUCT.members=struct('styleOld', 'ulong', 'styleNew', 'ulong');
structs.s_SYSTEM_AUDIT_ACE.packing=1;
structs.s_SYSTEM_AUDIT_ACE.members=struct('Header', 's_ACE_HEADER', 'Mask', 'ulong', 'SidStart', 'ulong');
structs.s_SYSTEM_INFO.packing=1;
structs.s_SYSTEM_INFO.members=struct('wProcessorArchitecture', 'uint16', 'wReserved', 'uint16', 'dwPageSize', 'ulong', 'lpMinimumApplicationAddress', 'voidPtr', 'lpMaximumApplicationAddress', 'voidPtr', 'dwActiveProcessorMask', 'ulong', 'dwNumberOfProcessors', 'ulong', 'dwProcessorType', 'ulong', 'dwAllocationGranularity', 'ulong', 'wProcessorLevel', 'uint16', 'wProcessorRevision', 'uint16');
structs.s_SYSTEM_POWER_STATUS.packing=1;
structs.s_SYSTEM_POWER_STATUS.members=struct('ACLineStatus', 'uint8', 'BatteryFlag', 'uint8', 'BatteryLifePercent', 'uint8', 'Reserved1', 'uint8', 'BatteryLifeTime', 'ulong', 'BatteryFullLifeTime', 'ulong');
structs.s_TAPE_ERASE.packing=1;
structs.s_TAPE_ERASE.members=struct('Type', 'ulong');
structs.s_TAPE_GET_DRIVE_PARAMETERS.packing=1;
structs.s_TAPE_GET_DRIVE_PARAMETERS.members=struct('ECC', 'uint8', 'Compression', 'uint8', 'DataPadding', 'uint8', 'ReportSetmarks', 'uint8', 'DefaultBlockSize', 'ulong', 'MaximumBlockSize', 'ulong', 'MinimumBlockSize', 'ulong', 'MaximumPartitionCount', 'ulong', 'FeaturesLow', 'ulong', 'FeaturesHigh', 'ulong', 'EOTWarningZoneSize', 'ulong');
structs.s_TAPE_GET_MEDIA_PARAMETERS.packing=1;
structs.s_TAPE_GET_MEDIA_PARAMETERS.members=struct('Capacity', 'error', 'Remaining', 'error', 'BlockSize', 'ulong', 'PartitionCount', 'ulong', 'WriteProtected', 'uint8');
structs.s_TAPE_GET_POSITION.packing=1;
structs.s_TAPE_GET_POSITION.members=struct('Type', 'ulong', 'Partition', 'ulong', 'OffsetLow', 'ulong', 'OffsetHigh', 'ulong');
structs.s_TAPE_PREPARE.packing=1;
structs.s_TAPE_PREPARE.members=struct('Operation', 'ulong');
structs.s_TAPE_SET_DRIVE_PARAMETERS.packing=1;
structs.s_TAPE_SET_DRIVE_PARAMETERS.members=struct('ECC', 'uint8', 'Compression', 'uint8', 'DataPadding', 'uint8', 'ReportSetmarks', 'uint8', 'EOTWarningZoneSize', 'ulong');
structs.s_TAPE_SET_MEDIA_PARAMETERS.packing=1;
structs.s_TAPE_SET_MEDIA_PARAMETERS.members=struct('BlockSize', 'ulong');
structs.s_TAPE_SET_POSITION.packing=1;
structs.s_TAPE_SET_POSITION.members=struct('Method', 'ulong', 'Partition', 'ulong', 'OffsetLow', 'ulong', 'OffsetHigh', 'ulong');
structs.s_TAPE_WRITE_MARKS.packing=1;
structs.s_TAPE_WRITE_MARKS.members=struct('Type', 'ulong', 'Count', 'ulong');
structs.TBADDBITMAP.packing=1;
structs.TBADDBITMAP.members=struct('hInst', 'voidPtr', 'nID', 'uint32');
structs.s_TBBUTTON.packing=1;
structs.s_TBBUTTON.members=struct('iBitmap', 'int32', 'idCommand', 'int32', 'fsState', 'uint8', 'fsStyle', 'uint8', 'bReserved', 'uint8#2', 'dwData', 'ulong', 'iString', 'int32');
structs.TBNOTIFY.packing=1;
structs.TBNOTIFY.members=struct('hdr', 'tagNMHDR', 'iItem', 'int32', 'tbButton', 's_TBBUTTON', 'cchText', 'int32', 'pszText', 'cstring');
structs.TBSAVEPARAMS.packing=1;
structs.TBSAVEPARAMS.members=struct('hkr', 'voidPtr', 'pszSubKey', 'cstring', 'pszValueName', 'cstring');
structs.s_TC_HITTESTINFO.packing=1;
structs.s_TC_HITTESTINFO.members=struct('pt', 'tagPOINT', 'flags', 'uint32');
structs.s_TC_ITEM.packing=1;
structs.s_TC_ITEM.members=struct('mask', 'uint32', 'lpReserved1', 'uint32', 'lpReserved2', 'uint32', 'pszText', 'cstring', 'cchTextMax', 'int32', 'iImage', 'int32', 'lParam', 'long');
structs.s_TC_ITEMHEADER.packing=1;
structs.s_TC_ITEMHEADER.members=struct('mask', 'uint32', 'lpReserved1', 'uint32', 'lpReserved2', 'uint32', 'pszText', 'cstring', 'cchTextMax', 'int32', 'iImage', 'int32');
structs.s_TC_KEYDOWN.packing=1;
structs.s_TC_KEYDOWN.members=struct('hdr', 'tagNMHDR', 'wVKey', 'uint16', 'flags', 'uint32');
structs.s_textrange.packing=1;
structs.s_textrange.members=struct('chrg', 's_charrange', 'lpstrText', 'cstring');
structs.s_TIME_ZONE_INFORMATION.packing=1;
structs.s_TIME_ZONE_INFORMATION.members=struct('Bias', 'long', 'StandardName', 'uint16#32', 'StandardDate', 's_SYSTEMTIME', 'StandardBias', 'long', 'DaylightName', 'uint16#32', 'DaylightDate', 's_SYSTEMTIME', 'DaylightBias', 'long');
structs.tagTOGGLEKEYS.packing=1;
structs.tagTOGGLEKEYS.members=struct('cbSize', 'ulong', 'dwFlags', 'ulong');
structs.s_TOKEN_SOURCE.packing=1;
structs.s_TOKEN_SOURCE.members=struct('SourceName', 'int8#8', 'SourceIdentifier', 'error');
structs.s_TOKEN_CONTROL.packing=1;
structs.s_TOKEN_CONTROL.members=struct('TokenId', 'error', 'AuthenticationId', 'error', 'ModifiedId', 'error', 'TokenSource', 's_TOKEN_SOURCE');
structs.s_TOKEN_DEFAULT_DACL.packing=1;
structs.s_TOKEN_DEFAULT_DACL.members=struct('DefaultDacl', 's_ACLPtr');
structs.s_TOKEN_GROUPS.packing=1;
structs.s_TOKEN_GROUPS.members=struct('GroupCount', 'ulong', 'Groups', 's_SID_AND_ATTRIBUTES#1');
structs.s_TOKEN_OWNER.packing=1;
structs.s_TOKEN_OWNER.members=struct('Owner', 's_SIDPtr');
structs.s_TOKEN_PRIMARY_GROUP.packing=1;
structs.s_TOKEN_PRIMARY_GROUP.members=struct('PrimaryGroup', 's_SIDPtr');
structs.s_TOKEN_PRIVILEGES.packing=1;
structs.s_TOKEN_PRIVILEGES.members=struct('PrivilegeCount', 'ulong', 'Privileges', 's_LUID_AND_ATTRIBUTES#1');
structs.s_TOKEN_STATISTICS.packing=1;
structs.s_TOKEN_STATISTICS.members=struct('TokenId', 'error', 'AuthenticationId', 'error', 'ExpirationTime', 'error', 'TokenType', 'tagTOKEN_TYPE', 'ImpersonationLevel', 'e_SECURITY_IMPERSONATION_LEVEL', 'DynamicCharged', 'ulong', 'DynamicAvailable', 'ulong', 'GroupCount', 'ulong', 'PrivilegeCount', 'ulong', 'ModifiedId', 'error');
structs.s_TOKEN_USER.packing=1;
structs.s_TOKEN_USER.members=struct('User', 's_SID_AND_ATTRIBUTES');
structs.TOOLINFO.packing=1;
structs.TOOLINFO.members=struct('cbSize', 'uint32', 'uFlags', 'uint32', 'hwnd', 'voidPtr', 'uId', 'uint32', 'rect', 's_RECT', 'hinst', 'voidPtr', 'lpszText', 'cstring');
structs.TOOLTIPTEXT.packing=1;
structs.TOOLTIPTEXT.members=struct('hdr', 'tagNMHDR', 'lpszText', 'cstring', 'szText', 'int8#80', 'hinst', 'voidPtr', 'uFlags', 'uint32');
structs.tagTPMPARAMS.packing=1;
structs.tagTPMPARAMS.members=struct('cbSize', 'uint32', 'rcExclude', 's_RECT');
structs.s_TT_HITTESTINFO.packing=1;
structs.s_TT_HITTESTINFO.members=struct('hwnd', 'voidPtr', 'pt', 'tagPOINT', 'ti', 'TOOLINFO');
structs.tagTTPOLYCURVE.packing=1;
structs.tagTTPOLYCURVE.members=struct('wType', 'uint16', 'cpfx', 'uint16', 'apfx', 'tagPOINTFX#1');
structs.s_TTPOLYGONHEADER.packing=1;
structs.s_TTPOLYGONHEADER.members=struct('cb', 'ulong', 'dwType', 'ulong', 'pfxStart', 'tagPOINTFX');
structs.s_TV_DISPINFO.packing=1;
structs.s_TV_DISPINFO.members=struct('hdr', 'tagNMHDR', 'item', 's_TV_ITEM');
structs.s_TVHITTESTINFO.packing=1;
structs.s_TVHITTESTINFO.members=struct('pt', 'tagPOINT', 'flags', 'uint32', 'hItem', 's_TREEITEMPtr');
structs.s_TV_INSERTSTRUCT.packing=1;
structs.s_TV_INSERTSTRUCT.members=struct('hParent', 's_TREEITEMPtr', 'hInsertAfter', 's_TREEITEMPtr', 'item', 's_TV_ITEM');
structs.s_TV_KEYDOWN.packing=1;
structs.s_TV_KEYDOWN.members=struct('hdr', 'tagNMHDR', 'wVKey', 'uint16', 'flags', 'uint32');
structs.s_TV_SORTCB.packing=1;
structs.s_TV_SORTCB.members=struct('hParent', 's_TREEITEMPtr', 'lpfnCompare', 'FcnPtr', 'lParam', 'long');
structs.UDACCEL.packing=1;
structs.UDACCEL.members=struct('nSec', 'uint32', 'nInc', 'uint32');
structs.s_ULARGE_INTEGER.packing=1;
structs.s_ULARGE_INTEGER.members=struct('LowPart', 'ulong', 'HighPart', 'ulong');
structs.s_UNIVERSAL_NAME_INFO.packing=1;
structs.s_UNIVERSAL_NAME_INFO.members=struct('lpUniversalName', 'cstring');
structs.tagUSEROBJECTFLAGS.packing=1;
structs.tagUSEROBJECTFLAGS.members=struct('fInherit', 'int32', 'fReserved', 'int32', 'dwFlags', 'ulong');
structs.value_ent.packing=1;
structs.value_ent.members=struct('ve_valuename', 'cstring', 've_valuelen', 'ulong', 've_valueptr', 'ulong', 've_type', 'ulong');
structs.s_WIN32_FIND_DATA.packing=1;
structs.s_WIN32_FIND_DATA.members=struct('dwFileAttributes', 'ulong', 'ftCreationTime', 's_FILETIME', 'ftLastAccessTime', 's_FILETIME', 'ftLastWriteTime', 's_FILETIME', 'nFileSizeHigh', 'ulong', 'nFileSizeLow', 'ulong', 'dwReserved0', 'ulong', 'dwReserved1', 'ulong', 'cFileName', 'int8#260', 'cAlternateFileName', 'int8#14', 'dummy', 'uint16');
structs.s_WIN32_STREAM_ID.packing=1;
structs.s_WIN32_STREAM_ID.members=struct('dwStreamId', 'ulong', 'dwStreamAttributes', 'ulong', 'Size', 'error', 'dwStreamNameSize', 'ulong', 'cStreamName', 'uint16Ptr');
structs.s_WINDOWPLACEMENT.packing=1;
structs.s_WINDOWPLACEMENT.members=struct('length', 'uint32', 'flags', 'uint32', 'showCmd', 'uint32', 'ptMinPosition', 'tagPOINT', 'ptMaxPosition', 'tagPOINT', 'rcNormalPosition', 's_RECT');
structs.s_WNDCLASS.packing=1;
structs.s_WNDCLASS.members=struct('style', 'uint32', 'lpfnWndProc', 'FcnPtr', 'cbClsExtra', 'int32', 'cbWndExtra', 'int32', 'hInstance', 'voidPtr', 'hIcon', 'voidPtr', 'hCursor', 'voidPtr', 'hbrBackground', 'voidPtr', 'lpszMenuName', 'cstring', 'lpszClassName', 'cstring');
structs.s_WNDCLASSEX.packing=1;
structs.s_WNDCLASSEX.members=struct('cbSize', 'uint32', 'style', 'uint32', 'lpfnWndProc', 'FcnPtr', 'cbClsExtra', 'int32', 'cbWndExtra', 'int32', 'hInstance', 'voidPtr', 'hIcon', 'voidPtr', 'hCursor', 'voidPtr', 'hbrBackground', 'voidPtr', 'lpszMenuName', 'cstring', 'lpszClassName', 'cstring', 'hIconSm', 'voidPtr');
structs.s_CONNECTDLGSTRUCT.packing=1;
structs.s_CONNECTDLGSTRUCT.members=struct('cbStructure', 'ulong', 'hwndOwner', 'voidPtr', 'lpConnRes', 's_NETRESOURCEPtr', 'dwFlags', 'ulong', 'dwDevNum', 'ulong');
structs.s_DISCDLGSTRUCT.packing=1;
structs.s_DISCDLGSTRUCT.members=struct('cbStructure', 'ulong', 'hwndOwner', 'voidPtr', 'lpLocalName', 'cstring', 'lpRemoteName', 'cstring', 'dwFlags', 'ulong');
structs.s_NETINFOSTRUCT.packing=1;
structs.s_NETINFOSTRUCT.members=struct('cbStructure', 'ulong', 'dwProviderVersion', 'ulong', 'dwStatus', 'ulong', 'dwCharacteristics', 'ulong', 'dwHandle', 'ulong', 'wNetType', 'uint16', 'dwPrinters', 'ulong', 'dwDrives', 'ulong');
structs.s_NETCONNECTINFOSTRUCT.packing=1;
structs.s_NETCONNECTINFOSTRUCT.members=struct('cbStructure', 'ulong', 'dwFlags', 'ulong', 'dwSpeed', 'ulong', 'dwDelay', 'ulong', 'dwOptDataSize', 'ulong');
structs.s_IMAGE_DOS_HEADER.packing=1;
structs.s_IMAGE_DOS_HEADER.members=struct('e_magic', 'uint16', 'e_cblp', 'uint16', 'e_cp', 'uint16', 'e_crlc', 'uint16', 'e_cparhdr', 'uint16', 'e_minalloc', 'uint16', 'e_maxalloc', 'uint16', 'e_ss', 'uint16', 'e_sp', 'uint16', 'e_csum', 'uint16', 'e_ip', 'uint16', 'e_cs', 'uint16', 'e_lfarlc', 'uint16', 'e_ovno', 'uint16', 'e_res', 'uint16#4', 'e_oemid', 'uint16', 'e_oeminfo', 'uint16', 'e_res2', 'uint16#10', 'e_lfanew', 'long');
structs.s_IMAGE_OS2_HEADER.packing=1;
structs.s_IMAGE_OS2_HEADER.members=struct('ne_magic', 'uint16', 'ne_ver', 'int8', 'ne_rev', 'int8', 'ne_enttab', 'uint16', 'ne_cbenttab', 'uint16', 'ne_crc', 'long', 'ne_flags', 'uint16', 'ne_autodata', 'uint16', 'ne_heap', 'uint16', 'ne_stack', 'uint16', 'ne_csip', 'long', 'ne_sssp', 'long', 'ne_cseg', 'uint16', 'ne_cmod', 'uint16', 'ne_cbnrestab', 'uint16', 'ne_segtab', 'uint16', 'ne_rsrctab', 'uint16', 'ne_restab', 'uint16', 'ne_modtab', 'uint16', 'ne_imptab', 'uint16', 'ne_nrestab', 'long', 'ne_cmovent', 'uint16', 'ne_align', 'uint16', 'ne_cres', 'uint16', 'ne_exetyp', 'uint8', 'ne_flagsothers', 'uint8', 'ne_pretthunks', 'uint16', 'ne_psegrefbytes', 'uint16', 'ne_swaparea', 'uint16', 'ne_expver', 'uint16');
structs.s_IMAGE_VXD_HEADER.packing=1;
structs.s_IMAGE_VXD_HEADER.members=struct('e32_magic', 'uint16', 'e32_border', 'uint8', 'e32_worder', 'uint8', 'e32_level', 'ulong', 'e32_cpu', 'uint16', 'e32_os', 'uint16', 'e32_ver', 'ulong', 'e32_mflags', 'ulong', 'e32_mpages', 'ulong', 'e32_startobj', 'ulong', 'e32_eip', 'ulong', 'e32_stackobj', 'ulong', 'e32_esp', 'ulong', 'e32_pagesize', 'ulong', 'e32_lastpagesize', 'ulong', 'e32_fixupsize', 'ulong', 'e32_fixupsum', 'ulong', 'e32_ldrsize', 'ulong', 'e32_ldrsum', 'ulong', 'e32_objtab', 'ulong', 'e32_objcnt', 'ulong', 'e32_objmap', 'ulong', 'e32_itermap', 'ulong', 'e32_rsrctab', 'ulong', 'e32_rsrccnt', 'ulong', 'e32_restab', 'ulong', 'e32_enttab', 'ulong', 'e32_dirtab', 'ulong', 'e32_dircnt', 'ulong', 'e32_fpagetab', 'ulong', 'e32_frectab', 'ulong', 'e32_impmod', 'ulong', 'e32_impmodcnt', 'ulong', 'e32_impproc', 'ulong', 'e32_pagesum', 'ulong', 'e32_datapage', 'ulong', 'e32_preload', 'ulong', 'e32_nrestab', 'ulong', 'e32_cbnrestab', 'ulong', 'e32_nressum', 'ulong', 'e32_autodata', 'ulong', 'e32_debuginfo', 'ulong', 'e32_debuglen', 'ulong', 'e32_instpreload', 'ulong', 'e32_instdemand', 'ulong', 'e32_heapsize', 'ulong', 'e32_res3', 'uint8#12', 'e32_winresoff', 'ulong', 'e32_winreslen', 'ulong', 'e32_devid', 'uint16', 'e32_ddkver', 'uint16');
structs.s_IMAGE_FILE_HEADER.packing=1;
structs.s_IMAGE_FILE_HEADER.members=struct('Machine', 'uint16', 'NumberOfSections', 'uint16', 'TimeDateStamp', 'ulong', 'PointerToSymbolTable', 'ulong', 'NumberOfSymbols', 'ulong', 'SizeOfOptionalHeader', 'uint16', 'Characteristics', 'uint16');
structs.s_IMAGE_DATA_DIRECTORY.packing=1;
structs.s_IMAGE_DATA_DIRECTORY.members=struct('VirtualAddress', 'ulong', 'Size', 'ulong');
structs.s_IMAGE_OPTIONAL_HEADER.packing=1;
structs.s_IMAGE_OPTIONAL_HEADER.members=struct('Magic', 'uint16', 'MajorLinkerVersion', 'uint8', 'MinorLinkerVersion', 'uint8', 'SizeOfCode', 'ulong', 'SizeOfInitializedData', 'ulong', 'SizeOfUninitializedData', 'ulong', 'AddressOfEntryPoint', 'ulong', 'BaseOfCode', 'ulong', 'BaseOfData', 'ulong', 'ImageBase', 'ulong', 'SectionAlignment', 'ulong', 'FileAlignment', 'ulong', 'MajorOperatingSystemVersion', 'uint16', 'MinorOperatingSystemVersion', 'uint16', 'MajorImageVersion', 'uint16', 'MinorImageVersion', 'uint16', 'MajorSubsystemVersion', 'uint16', 'MinorSubsystemVersion', 'uint16', 'Win32VersionValue', 'ulong', 'SizeOfImage', 'ulong', 'SizeOfHeaders', 'ulong', 'CheckSum', 'ulong', 'Subsystem', 'uint16', 'DllCharacteristics', 'uint16', 'SizeOfStackReserve', 'ulong', 'SizeOfStackCommit', 'ulong', 'SizeOfHeapReserve', 'ulong', 'SizeOfHeapCommit', 'ulong', 'LoaderFlags', 'ulong', 'NumberOfRvaAndSizes', 'ulong', 'DataDirectory', 's_IMAGE_DATA_DIRECTORY#16');
structs.s_IMAGE_ROM_OPTIONAL_HEADER.packing=1;
structs.s_IMAGE_ROM_OPTIONAL_HEADER.members=struct('Magic', 'uint16', 'MajorLinkerVersion', 'uint8', 'MinorLinkerVersion', 'uint8', 'SizeOfCode', 'ulong', 'SizeOfInitializedData', 'ulong', 'SizeOfUninitializedData', 'ulong', 'AddressOfEntryPoint', 'ulong', 'BaseOfCode', 'ulong', 'BaseOfData', 'ulong', 'BaseOfBss', 'ulong', 'GprMask', 'ulong', 'CprMask', 'ulong#4', 'GpValue', 'ulong');
structs.s_IMAGE_NT_HEADERS.packing=1;
structs.s_IMAGE_NT_HEADERS.members=struct('Signature', 'ulong', 'FileHeader', 's_IMAGE_FILE_HEADER', 'OptionalHeader', 's_IMAGE_OPTIONAL_HEADER');
structs.s_IMAGE_ROM_HEADERS.packing=1;
structs.s_IMAGE_ROM_HEADERS.members=struct('FileHeader', 's_IMAGE_FILE_HEADER', 'OptionalHeader', 's_IMAGE_ROM_OPTIONAL_HEADER');
structs.s_IMAGE_BASE_RELOCATION.packing=1;
structs.s_IMAGE_BASE_RELOCATION.members=struct('VirtualAddress', 'ulong', 'SizeOfBlock', 'ulong');
structs.s_IMAGE_ARCHIVE_MEMBER_HEADER.packing=1;
structs.s_IMAGE_ARCHIVE_MEMBER_HEADER.members=struct('Name', 'uint8#16', 'Date', 'uint8#12', 'UserID', 'uint8#6', 'GroupID', 'uint8#6', 'Mode', 'uint8#8', 'Size', 'uint8#10', 'EndHeader', 'uint8#2');
structs.s_IMAGE_EXPORT_DIRECTORY.packing=1;
structs.s_IMAGE_EXPORT_DIRECTORY.members=struct('Characteristics', 'ulong', 'TimeDateStamp', 'ulong', 'MajorVersion', 'uint16', 'MinorVersion', 'uint16', 'Name', 'ulong', 'Base', 'ulong', 'NumberOfFunctions', 'ulong', 'NumberOfNames', 'ulong', 'AddressOfFunctions', 'uint32PtrPtr', 'AddressOfNames', 'uint32PtrPtr', 'AddressOfNameOrdinals', 'uint16PtrPtr');
structs.s_IMAGE_IMPORT_BY_NAME.packing=1;
structs.s_IMAGE_IMPORT_BY_NAME.members=struct('Hint', 'uint16', 'Name', 'uint8#1');
structs.s_IMAGE_BOUND_IMPORT_DESCRIPTOR.packing=1;
structs.s_IMAGE_BOUND_IMPORT_DESCRIPTOR.members=struct('TimeDateStamp', 'ulong', 'OffsetModuleName', 'uint16', 'NumberOfModuleForwarderRefs', 'uint16');
structs.s_IMAGE_BOUND_FORWARDER_REF.packing=1;
structs.s_IMAGE_BOUND_FORWARDER_REF.members=struct('TimeDateStamp', 'ulong', 'OffsetModuleName', 'uint16', 'Reserved', 'uint16');
structs.s_IMAGE_TLS_DIRECTORY.packing=1;
structs.s_IMAGE_TLS_DIRECTORY.members=struct('StartAddressOfRawData', 'ulong', 'EndAddressOfRawData', 'ulong', 'AddressOfIndex', 'uint32Ptr', 'AddressOfCallBacks', 'FcnPtrPtr', 'SizeOfZeroFill', 'ulong', 'Characteristics', 'ulong');
structs.s_IMAGE_RESOURCE_DIRECTORY.packing=1;
structs.s_IMAGE_RESOURCE_DIRECTORY.members=struct('Characteristics', 'ulong', 'TimeDateStamp', 'ulong', 'MajorVersion', 'uint16', 'MinorVersion', 'uint16', 'NumberOfNamedEntries', 'uint16', 'NumberOfIdEntries', 'uint16');
structs.s_IMAGE_RESOURCE_DIRECTORY_STRING.packing=1;
structs.s_IMAGE_RESOURCE_DIRECTORY_STRING.members=struct('Length', 'uint16', 'NameString', 'int8#1');
structs.s_IMAGE_RESOURCE_DIR_STRING_U.packing=1;
structs.s_IMAGE_RESOURCE_DIR_STRING_U.members=struct('Length', 'uint16', 'NameString', 'uint16#1');
structs.s_IMAGE_RESOURCE_DATA_ENTRY.packing=1;
structs.s_IMAGE_RESOURCE_DATA_ENTRY.members=struct('OffsetToData', 'ulong', 'Size', 'ulong', 'CodePage', 'ulong', 'Reserved', 'ulong');
structs.s_IMAGE_LOAD_CONFIG_DIRECTORY.packing=1;
structs.s_IMAGE_LOAD_CONFIG_DIRECTORY.members=struct('Characteristics', 'ulong', 'TimeDateStamp', 'ulong', 'MajorVersion', 'uint16', 'MinorVersion', 'uint16', 'GlobalFlagsClear', 'ulong', 'GlobalFlagsSet', 'ulong', 'CriticalSectionDefaultTimeout', 'ulong', 'DeCommitFreeBlockThreshold', 'ulong', 'DeCommitTotalFreeThreshold', 'ulong', 'LockPrefixTable', 'voidPtr', 'MaximumAllocationSize', 'ulong', 'VirtualMemoryThreshold', 'ulong', 'ProcessHeapFlags', 'ulong', 'Reserved', 'ulong#4');
structs.s_IMAGE_RUNTIME_FUNCTION_ENTRY.packing=1;
structs.s_IMAGE_RUNTIME_FUNCTION_ENTRY.members=struct('BeginAddress', 'ulong', 'EndAddress', 'ulong', 'ExceptionHandler', 'voidPtr', 'HandlerData', 'voidPtr', 'PrologEndAddress', 'ulong');
structs.s_IMAGE_DEBUG_DIRECTORY.packing=1;
structs.s_IMAGE_DEBUG_DIRECTORY.members=struct('Characteristics', 'ulong', 'TimeDateStamp', 'ulong', 'MajorVersion', 'uint16', 'MinorVersion', 'uint16', 'Type', 'ulong', 'SizeOfData', 'ulong', 'AddressOfRawData', 'ulong', 'PointerToRawData', 'ulong');
structs.s_IMAGE_COFF_SYMBOLS_HEADER.packing=1;
structs.s_IMAGE_COFF_SYMBOLS_HEADER.members=struct('NumberOfSymbols', 'ulong', 'LvaToFirstSymbol', 'ulong', 'NumberOfLinenumbers', 'ulong', 'LvaToFirstLinenumber', 'ulong', 'RvaToFirstByteOfCode', 'ulong', 'RvaToLastByteOfCode', 'ulong', 'RvaToFirstByteOfData', 'ulong', 'RvaToLastByteOfData', 'ulong');
structs.s_IMAGE_DEBUG_MISC.packing=1;
structs.s_IMAGE_DEBUG_MISC.members=struct('DataType', 'ulong', 'Length', 'ulong', 'Unicode', 'uint8', 'Reserved', 'uint8#3', 'Data', 'uint8#1');
structs.s_IMAGE_FUNCTION_ENTRY.packing=1;
structs.s_IMAGE_FUNCTION_ENTRY.members=struct('StartingAddress', 'ulong', 'EndingAddress', 'ulong', 'EndOfPrologue', 'ulong');
structs.s_IMAGE_SEPARATE_DEBUG_HEADER.packing=1;
structs.s_IMAGE_SEPARATE_DEBUG_HEADER.members=struct('Signature', 'uint16', 'Flags', 'uint16', 'Machine', 'uint16', 'Characteristics', 'uint16', 'TimeDateStamp', 'ulong', 'CheckSum', 'ulong', 'ImageBase', 'ulong', 'SizeOfImage', 'ulong', 'NumberOfSections', 'ulong', 'ExportedNamesSize', 'ulong', 'DebugDirectorySize', 'ulong', 'SectionAlignment', 'ulong', 'Reserved', 'ulong#2');
structs.tagHEAPLIST32.packing=1;
structs.tagHEAPLIST32.members=struct('dwSize', 'ulong', 'th32ProcessID', 'ulong', 'th32HeapID', 'ulong', 'dwFlags', 'ulong');
structs.tagHEAPENTRY32.packing=1;
structs.tagHEAPENTRY32.members=struct('dwSize', 'ulong', 'hHandle', 'voidPtr', 'dwAddress', 'ulong', 'dwBlockSize', 'ulong', 'dwFlags', 'ulong', 'dwLockCount', 'ulong', 'dwResvd', 'ulong', 'th32ProcessID', 'ulong', 'th32HeapID', 'ulong');
structs.tagPROCESSENTRY32.packing=1;
structs.tagPROCESSENTRY32.members=struct('dwSize', 'ulong', 'cntUsage', 'ulong', 'th32ProcessID', 'ulong', 'th32DefaultHeapID', 'ulong', 'th32ModuleID', 'ulong', 'cntThreads', 'ulong', 'th32ParentProcessID', 'ulong', 'pcPriClassBase', 'long', 'dwFlags', 'ulong', 'szExeFile', 'int8#260');
structs.tagTHREADENTRY32.packing=1;
structs.tagTHREADENTRY32.members=struct('dwSize', 'ulong', 'cntUsage', 'ulong', 'th32ThreadID', 'ulong', 'th32OwnerProcessID', 'ulong', 'tpBasePri', 'long', 'tpDeltaPri', 'long', 'dwFlags', 'ulong');
structs.tagMODULEENTRY32.packing=1;
structs.tagMODULEENTRY32.members=struct('dwSize', 'ulong', 'th32ModuleID', 'ulong', 'th32ProcessID', 'ulong', 'GlblcntUsage', 'ulong', 'ProccntUsage', 'ulong', 'modBaseAddr', 'uint8Ptr', 'modBaseSize', 'ulong', 'hModule', 'voidPtr', 'szModule', 'int8#256', 'szExePath', 'int8#260');
structs.tagPIXELFORMATDESCRIPTOR.packing=1;
structs.tagPIXELFORMATDESCRIPTOR.members=struct('nSize', 'uint16', 'nVersion', 'uint16', 'dwFlags', 'ulong', 'iPixelType', 'uint8', 'cColorBits', 'uint8', 'cRedBits', 'uint8', 'cRedShift', 'uint8', 'cGreenBits', 'uint8', 'cGreenShift', 'uint8', 'cBlueBits', 'uint8', 'cBlueShift', 'uint8', 'cAlphaBits', 'uint8', 'cAlphaShift', 'uint8', 'cAccumBits', 'uint8', 'cAccumRedBits', 'uint8', 'cAccumGreenBits', 'uint8', 'cAccumBlueBits', 'uint8', 'cAccumAlphaBits', 'uint8', 'cDepthBits', 'uint8', 'cStencilBits', 'uint8', 'cAuxBuffers', 'uint8', 'iLayerType', 'uint8', 'bReserved', 'uint8', 'dwLayerMask', 'ulong', 'dwVisibleMask', 'ulong', 'dwDamageMask', 'ulong');
structs.s_WIN_CERTIFICATE.packing=1;
structs.s_WIN_CERTIFICATE.members=struct('dwLength', 'ulong', 'wRevision', 'uint16', 'wCertificateType', 'uint16', 'bCertificate', 'uint8#1');
structs.s_WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT.packing=1;
structs.s_WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT.members=struct('hClientToken', 'voidPtr', 'SubjectType', 's_GUIDPtr', 'Subject', 'voidPtr');
structs.s_WIN_TRUST_ACTDATA_SUBJECT_ONLY.packing=1;
structs.s_WIN_TRUST_ACTDATA_SUBJECT_ONLY.members=struct('SubjectType', 's_GUIDPtr', 'Subject', 'voidPtr');
structs.s_WIN_TRUST_SUBJECT_FILE.packing=1;
structs.s_WIN_TRUST_SUBJECT_FILE.members=struct('hFile', 'voidPtr', 'lpPath', 'uint16Ptr');
structs.s_WIN_SPUB_TRUSTED_PUBLISHER_DATA.packing=1;
structs.s_WIN_SPUB_TRUSTED_PUBLISHER_DATA.members=struct('hClientToken', 'voidPtr', 'lpCertificate', 's_WIN_CERTIFICATEPtr');
structs.tagNMDATETIMECHANGE.packing=1;
structs.tagNMDATETIMECHANGE.members=struct('nmhdr', 'tagNMHDR', 'dwFlags', 'ulong', 'st', 's_SYSTEMTIME');
structs.tagNMDATETIMESTRINGA.packing=1;
structs.tagNMDATETIMESTRINGA.members=struct('nmhdr', 'tagNMHDR', 'pszUserString', 'cstring', 'st', 's_SYSTEMTIME', 'dwFlags', 'ulong');
structs.tagNMDATETIMESTRINGW.packing=1;
structs.tagNMDATETIMESTRINGW.members=struct('nmhdr', 'tagNMHDR', 'pszUserString', 'uint16Ptr', 'st', 's_SYSTEMTIME', 'dwFlags', 'ulong');
structs.tagNMDATETIMEWMKEYDOWNA.packing=1;
structs.tagNMDATETIMEWMKEYDOWNA.members=struct('nmhdr', 'tagNMHDR', 'nVirtKey', 'int32', 'pszFormat', 'cstring', 'st', 's_SYSTEMTIME');
structs.tagNMDATETIMEWMKEYDOWNW.packing=1;
structs.tagNMDATETIMEWMKEYDOWNW.members=struct('nmhdr', 'tagNMHDR', 'nVirtKey', 'int32', 'pszFormat', 'uint16Ptr', 'st', 's_SYSTEMTIME');
structs.tagNMDATETIMEFORMATA.packing=1;
structs.tagNMDATETIMEFORMATA.members=struct('nmhdr', 'tagNMHDR', 'pszFormat', 'cstring', 'st', 's_SYSTEMTIME', 'pszDisplay', 'cstring', 'szDisplay', 'int8#64');
structs.tagNMDATETIMEFORMATW.packing=1;
structs.tagNMDATETIMEFORMATW.members=struct('nmhdr', 'tagNMHDR', 'pszFormat', 'uint16Ptr', 'st', 's_SYSTEMTIME', 'pszDisplay', 'uint16Ptr', 'szDisplay', 'uint16#64');
structs.tagNMDATETIMEFORMATQUERYA.packing=1;
structs.tagNMDATETIMEFORMATQUERYA.members=struct('nmhdr', 'tagNMHDR', 'pszFormat', 'cstring', 'szMax', 'tagSIZE');
structs.tagNMDATETIMEFORMATQUERYW.packing=1;
structs.tagNMDATETIMEFORMATQUERYW.members=struct('nmhdr', 'tagNMHDR', 'pszFormat', 'uint16Ptr', 'szMax', 'tagSIZE');
structs.s_POINTFLOAT.packing=1;
structs.s_POINTFLOAT.members=struct('x', 'single', 'y', 'single');
structs.s_GLYPHMETRICSFLOAT.packing=1;
structs.s_GLYPHMETRICSFLOAT.members=struct('gmfBlackBoxX', 'single', 'gmfBlackBoxY', 'single', 'gmfptGlyphOrigin', 's_POINTFLOAT', 'gmfCellIncX', 'single', 'gmfCellIncY', 'single');
structs.s_LAYERPLANEDESCRIPTOR.packing=1;
structs.s_LAYERPLANEDESCRIPTOR.members=struct('nSize', 'uint16', 'nVersion', 'uint16', 'dwFlags', 'ulong', 'iPixelType', 'uint8', 'cColorBits', 'uint8', 'cRedBits', 'uint8', 'cRedShift', 'uint8', 'cGreenBits', 'uint8', 'cGreenShift', 'uint8', 'cBlueBits', 'uint8', 'cBlueShift', 'uint8', 'cAlphaBits', 'uint8', 'cAlphaShift', 'uint8', 'cAccumBits', 'uint8', 'cAccumRedBits', 'uint8', 'cAccumGreenBits', 'uint8', 'cAccumBlueBits', 'uint8', 'cAccumAlphaBits', 'uint8', 'cDepthBits', 'uint8', 'cStencilBits', 'uint8', 'cAuxBuffers', 'uint8', 'iLayerPlane', 'uint8', 'bReserved', 'uint8', 'crTransparent', 'ulong');
enuminfo.e_TOKEN_INFORMATION_CLASS=struct('TokenUser',1,'TokenGroups',2,'TokenPrivileges',3,'TokenOwner',4,'TokenPrimaryGroup',5,'TokenDefaultDacl',6,'TokenSource',7,'TokenType',8,'TokenImpersonationLevel',9,'TokenStatistics',10);
enuminfo.tagTOKEN_TYPE=struct('TokenPrimary',1,'TokenImpersonation',2);
enuminfo.tagSHCONTF=struct('SHCONTF_FOLDERS',32,'SHCONTF_NONFOLDERS',64,'SHCONTF_INCLUDEHIDDEN',128);
enuminfo.tagMSHCTX=struct('MSHCTX_LOCAL',0,'MSHCTX_NOSHAREDMEM',1,'MSHCTX_DIFFERENTMACHINE',2,'MSHCTX_INPROC',3);
enuminfo.tagMSHLFLAGS=struct('MSHLFLAGS_NORMAL',0,'MSHLFLAGS_TABLESTRONG',1,'MSHLFLAGS_TABLEWEAK',2);
enuminfo.e_SECURITY_IMPERSONATION_LEVEL=struct('SecurityAnonymous',0,'SecurityIdentification',1,'SecurityImpersonation',2,'SecurityDelegation',3);
enuminfo.tagSTATFLAG=struct('STATFLAG_DEFAULT',0,'STATFLAG_NONAME',1);
enuminfo.tagDVASPECT=struct('DVASPECT_CONTENT',1,'DVASPECT_THUMBNAIL',2,'DVASPECT_ICON',4,'DVASPECT_DOCPRINT',8);
enuminfo.e_SID_NAME_USE=struct('SidTypeUser',1,'SidTypeGroup',2,'SidTypeDomain',3,'SidTypeAlias',4,'SidTypeWellKnownGroup',5,'SidTypeDeletedAccount',6,'SidTypeInvalid',7,'SidTypeUnknown',8);
enuminfo.tagSTGC=struct('STGC_DEFAULT',0,'STGC_OVERWRITE',1,'STGC_ONLYIFCURRENT',2,'STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE',4);
enuminfo.tagSTGMOVE=struct('STGMOVE_MOVE',0,'STGMOVE_COPY',1);
enuminfo.tagSHGDN=struct('SHGDN_NORMAL',0,'SHGDN_INFOLDER',1,'SHGDN_FORPARSING',32768);
enuminfo.e_ACL_INFORMATION_CLASS=struct('AclRevisionInformation',1,'AclSizeInformation',2);
enuminfo.tagCLSCTX=struct('CLSCTX_INPROC_SERVER',1,'CLSCTX_INPROC_HANDLER',2,'CLSCTX_LOCAL_SERVER',4,'CLSCTX_INPROC_SERVER16',8);
methodinfo=fcns;